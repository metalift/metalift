Found benchmark normal_blend_8 in suite blend
#include <vector>
using namespace std;

vector<int> normal_blend_8(vector<int> base, vector<int> active, int opacity)
{
  vector<int> out;
  for (int i = 0; i < base.size(); ++i)
    out.push_back(opacity * active[i] + (32 - opacity) * base[i]);

  return out;
}

Analyzing benchmark normal_blend_8
yoyo
name: for.cond<header><exiting>
name: for.body
name: invoke.cont
name: for.inc<latch>
found loop: header: for.cond, body: ['for.body', 'invoke.cont'], exits: ['for.cond'], latches: ['for.inc']
  %result.ptr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %nrvo = alloca i1, align 1
  %i = alloca i32, align 4
  %ref.tmp = alloca i32, align 4
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  %i1 = bitcast %"class.std::__1::vector"* %agg.result to i8*
  store i8* %i1, i8** %result.ptr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i1 false, i1* %nrvo, align 1
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEEC1Ev(%"class.std::__1::vector"* %agg.result) #11
  store i32 0, i32* %i, align 4
  br label %for.cond
  %i2 = load i32, i32* %i, align 4
  %conv = sext i32 %i2 to i64
  %call = call i64 @_ZNKSt3__16vectorIiNS_9allocatorIiEEE4sizeEv(%"class.std::__1::vector"* %base) #11
  %cmp = icmp ult i64 %conv, %call
  br i1 %cmp, label %for.body, label %for.end
  %i3 = load i32, i32* %opacity.addr, align 4
  %i4 = load i32, i32* %i, align 4
  %conv1 = sext i32 %i4 to i64
  %call2 = call nonnull align 4 dereferenceable(4) i32* @_ZNSt3__16vectorIiNS_9allocatorIiEEEixEm(%"class.std::__1::vector"* %active, i64 %conv1) #11
  %i5 = load i32, i32* %call2, align 4
  %mul = mul nsw i32 %i3, %i5
  %i6 = load i32, i32* %opacity.addr, align 4
  %sub = sub nsw i32 32, %i6
  %i7 = load i32, i32* %i, align 4
  %conv3 = sext i32 %i7 to i64
  %call4 = call nonnull align 4 dereferenceable(4) i32* @_ZNSt3__16vectorIiNS_9allocatorIiEEEixEm(%"class.std::__1::vector"* %base, i64 %conv3) #11
  %i8 = load i32, i32* %call4, align 4
  %mul5 = mul nsw i32 %sub, %i8
  %add = add nsw i32 %mul, %mul5
  store i32 %add, i32* %ref.tmp, align 4
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE9push_backEOi(%"class.std::__1::vector"* %agg.result, i32* nonnull align 4 dereferenceable(4) %ref.tmp)
  br label %invoke.cont
  br label %for.inc
  %i9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %i9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond
  store i1 true, i1* %nrvo, align 1
  %nrvo.val = load i1, i1* %nrvo, align 1
  br i1 %nrvo.val, label %nrvo.skipdtor, label %nrvo.unused
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev(%"class.std::__1::vector"* %agg.result) #11
  br label %nrvo.skipdtor
  ret void
ps: (Implies:Bool (Or:Bool (And:Bool (And:Bool (And:Bool (Not:Bool (Lt:Bool i (list_length:Int base))) (Eq:Bool (list_length:Int base) (list_length:Int active))) (Gt:Bool (list_length:Int base) (Lit:Int 0))) (normal_blend_8_inv0:Bool active base i opacity agg.result)) (And:Bool (And:Bool (And:Bool (And:Bool (Not:Bool (Lit:Bool True)) (Not:Bool (Lt:Bool i (list_length:Int base)))) (Eq:Bool (list_length:Int base) (list_length:Int active))) (Gt:Bool (list_length:Int base) (Lit:Int 0))) (normal_blend_8_inv0:Bool active base i opacity agg.result))) (normal_blend_8_ps:Bool active base opacity agg.result))
Analyze took 0.30544281005859375s
ps call took 5.3402159214019775s
------0th PS solution---------

def normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:
    return vec_elemwise_add(
        vec_scalar_mul(opacity, active),
        vec_scalar_mul(32 - opacity, base)
    )


Total time to date 5.645658731460571
> /Users/jieq/Desktop/metalift/tenspiler/llm/scripts/end_to_end.py(151)run_end_to_end_llm()
-> if ps_sol in ps_solutions_seen:
(Pdb) Passing through parser
Passed parser!
Parser took 5.512998819351196s
Total time taken: 11.158657550811768s
Generating invariants for the 0th PS solution
CALLING INV for PS
def normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:
    return vec_elemwise_add(
        vec_scalar_mul(opacity, active),
        vec_scalar_mul(32 - opacity, base)
    )

> /Users/jieq/Desktop/metalift/tenspiler/llm/scripts/utils.py(564)get_inv_choice_and_save_prompt()
-> call_start_time = time.time()
(Pdb) inv call took 8.669583082199097s
---0th INV solution for the 0th PS solution---

def invariant(base: List[int], active: List[int], opacity: int, i: int, out: List[int]) -> bool:
    return (
        i >= 0 and
        i <= len(base) and
        len(base) == len(active) and
        out == vec_elemwise_add(
            vec_scalar_mul(opacity, vec_slice(active, 0, i)),
            vec_scalar_mul(32 - opacity, vec_slice(base, 0, i))
        )
    )

Total time to date 19.828240633010864
Passing through parser
Passed parser!
Total time to date 20.687975645065308
CALLING INV for PS
def normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:
    return vec_elemwise_add(
        vec_scalar_mul(opacity, active),
        vec_scalar_mul(32 - opacity, base)
    )

> /Users/jieq/Desktop/metalift/tenspiler/llm/scripts/utils.py(564)get_inv_choice_and_save_prompt()
-> call_start_time = time.time()
(Pdb)
