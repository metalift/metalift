
    Your task is to rewrite the given `test` C++ Function. You need to use only the set of provided functions and constants to achieve this. The rewritten program should be semantically equivalent to the `test` function. Please generate the shortest possible solution.

    #Instructions
    # 1. Do not use for/while loops for rewriting the function.
    # 2. The rewritten program should just be a single return statement of the form return provided_function(...)
    # 3. Inline all the expressions. Do not use intermediate variables. Return the function signature as well as the function body in python.

    #defined functions
    ```python
    from typing import Callable, List


def matrix_scalar_sub(matrix_x: List[List[int]], a: int) -> List[List[int]]:
    # Subtract a scalar 'a' from each element of the matrix.
    # matrix_x[i][j] = matrix_x[i][j] - a
    return (
        []
        if len(matrix_x) < 1
        else [vec_scalar_sub(matrix_x[0], a), *matrix_scalar_sub(matrix_x[1:], a)]
    )


def matrix_scalar_mul(matrix_x: List[List[int]], a: int) -> List[List[int]]:
    # Multiply each element of the matrix by scalar 'a'.
    # matrix_x[i][j] = matrix_x[i][j] * a
    return (
        []
        if len(matrix_x) < 1
        else [vec_scalar_mul(matrix_x[0], a), *matrix_scalar_mul(matrix_x[1:], a)]
    )


def matrix_scalar_div(matrix_x: List[List[int]], a: int) -> List[List[int]]:
    # Divide each element of the matrix by scalar 'a' using integer division.
    # matrix_x[i][j] = matrix_x[i][j] // a
    return (
        []
        if len(matrix_x) < 1
        else [vec_scalar_div(matrix_x[0], a), *matrix_scalar_div(matrix_x[1:], a)]
    )


def scalar_matrix_sub(a: int, matrix_x: List[List[int]]) -> List[List[int]]:
    # Subtract each element of the matrix from scalar 'a'.
    # matrix_x[i][j] = a - matrix_x[i][j]
    return (
        []
        if len(matrix_x) < 1
        else [scalar_vec_sub(a, matrix_x[0]), *scalar_matrix_sub(a, matrix_x[1:])]
    )


def scalar_matrix_div(a: int, matrix_x: List[List[int]]) -> List[List[int]]:
    # Divide scalar 'a' by each element of the matrix using integer division.
    # matrix_x[i][j] = a // matrix_x[i][j]
    return (
        []
        if len(matrix_x) < 1
        else [scalar_vec_div(a, matrix_x[0]), *scalar_matrix_div(a, matrix_x[1:])]
    )


def vec_map(x: List[int], map_int_to_int: Callable[[int], int]) -> List[int]:
    # Apply a mapping function to each element in a vector.
    return [] if len(x) < 1 else [map_int_to_int(x[0]), *vec_map(x[1:], map_int_to_int)]


def matrix_where(
    matrix_x: List[List[int]],
    matrix_y: List[List[int]],
    condition: Callable[[int, int], int],
) -> List[List[int]]:
    # Apply a conditional function element-wise between two matrices.
    return (
        []
        if len(matrix_x) < 1 or not len(matrix_x) == len(matrix_y)
        else [
            vector_where(matrix_x[0], matrix_y[0], condition),
            *matrix_where(matrix_x[1:], matrix_y[1:], condition),
        ]
    )


def vector_where(
    x: List[int], y: List[int], condition: Callable[[int, int], int]
) -> List[int]:
    # Apply a conditional function element-wise between two vectors.
    return (
        []
        if len(x) < 1 or not len(x) == len(y)
        else [
            condition(x[0], y[0]),
            *vector_where(x[1:], y[1:], condition),
        ]
    )


def vec_slice(lst: List[int], start: int, end: int) -> List[int]:
    # Slice a vector from index 'start' to 'end'.
    return lst[:end][start:]


def matrix_row_slice(matrix: List[List[int]], start: int, end: int) -> List[List[int]]:
    # Slice rows of a matrix from index 'start' to 'end'.
    return matrix[:end][start:]


def matrix_col_slice(matrix: List[List[int]], start: int, end: int) -> List[List[int]]:
    # Slice columns of a matrix from index 'start' to 'end'.
    return (
        []
        if len(matrix) < 1 or len(matrix[0][start:end]) < 1
        else [matrix[0][start:end], *matrix_col_slice(matrix[1:], start, end)]
    )


def firsts(matrix: List[List[int]]) -> List[int]:
    # Helper function to extract the first element of each row in a matrix.
    return [] if len(matrix) < 1 else [matrix[0][0], *firsts(matrix[1:])]


def rests(matrix: List[List[int]]) -> List[List[int]]:
    # Helper function to extract the rest of the elements in each row in a matrix.
    return [] if len(matrix) < 1 else matrix_col_slice(matrix, 1, len(matrix[0]))


def matrix_transpose(matrix: List[List[int]]) -> List[List[int]]:
    # Transpose a matrix.
    return [] if len(matrix) < 1 else [firsts(matrix), *matrix_transpose(rests(matrix))]


def integer_exp(n: int) -> int:
    # Compute the e^n as an integer.
    return 1 if n <= 0 else (integer_exp((n - 1)) * 3 % 64)


def reduce_max(x: List[int]) -> int:
    # Find the maximum element in a vector.
    return (
        x[0]
        if len(x) <= 1
        else (x[0] if x[0] > reduce_max(x[1:]) else reduce_max(x[1:]))
    )


def vec_elemwise_mul(x: List[int], y: List[int]) -> List[int]:
    # Element-wise multiplication of two vectors.
    return (
        []
        if len(x) < 1 or not len(x) == len(y)
        else [x[0] * y[0], *vec_elemwise_mul(x[1:], y[1:])]
    )


def matrix_vec_mul(matrix_x: List[List[int]], x: List[int]) -> List[int]:
    # Matrix-vector multiplication.
    return (
        []
        if len(matrix_x) < 1 or len(matrix_x[0]) < 1 or not len(matrix_x[0]) == len(x)
        else [
            reduce_sum(vec_elemwise_mul(matrix_x[0], x)),
            *matrix_vec_mul(matrix_x[1:], x),
        ]
    )


def vec_scalar_sub(x: List[int], a: int) -> List[int]:
    # Subtract a scalar from each element in a vector.
    # x[i] = x[i] - a
    return [] if len(x) < 1 else [x[0] - a, *vec_scalar_sub(x[1:], a)]


def vec_scalar_mul(x: List[int], a: int) -> List[int]:
    # Multiply a scalar with each element in a vector.
    # x[i] = x[i] * a
    return [] if len(x) < 1 else [x[0] * a, *vec_scalar_mul(x[1:], a)]


def vec_scalar_div(x: List[int], a: int) -> List[int]:
    # Divide each element of the vector by scalar 'a' using integer division.
    # x[i] = x[i] // a
    return [] if len(x) < 1 else [x[0] // a, *vec_scalar_div(x[1:], a)]


def scalar_vec_sub(a: int, x: List[int]) -> List[int]:
    # Subtract each element of the vector from scalar 'a'.
    # x[i] = a - x[i]
    return [] if len(x) < 1 else [a - x[0], *scalar_vec_sub(a, x[1:])]


def scalar_vec_div(a: int, x: List[int]) -> List[int]:
    # Divide scalar 'a' by each element of the vector using integer division.
    # x[i] = a // x[i]
    return [] if len(x) < 1 else [a // x[0], *scalar_vec_div(a, x[1:])]


def vec_elemwise_add(x: List[int], y: List[int]) -> List[int]:
    # Perform element-wise addition between two vectors.
    # z[i] = x[i] + y[i]
    return (
        []
        if len(x) < 1 or not len(x) == len(y)
        else [x[0] + y[0], *vec_elemwise_add(x[1:], y[1:])]
    )


def vec_elemwise_sub(x: List[int], y: List[int]) -> List[int]:
    # Perform element-wise subtraction between two vectors.
    # z[i] = x[i] - y[i]
    return (
        []
        if len(x) < 1 or not len(x) == len(y)
        else [(x[0] - y[0]), *vec_elemwise_sub(x[1:], y[1:])]
    )


def vec_elemwise_div(x: List[int], y: List[int]) -> List[int]:
    # Perform element-wise division between two vectors.
    # z[i] = x[i] // y[i]
    return (
        []
        if len(x) < 1 or not len(x) == len(y)
        else [(x[0] // y[0]), *vec_elemwise_div(x[1:], y[1:])]
    )


def matrix_elemwise_add(
    matrix_x: List[List[int]], matrix_y: List[List[int]]
) -> List[List[int]]:
    # Perform element-wise addition between two matrices.
    # z[i][j] = x[i][j] + y[i][j]
    return (
        []
        if len(matrix_x) < 1
        or not len(matrix_x) == len(matrix_y)
        or vec_elemwise_add(matrix_x[0], matrix_y[0]) == []
        else [
            vec_elemwise_add(matrix_x[0], matrix_y[0]),
            *matrix_elemwise_add(matrix_x[1:], matrix_y[1:]),
        ]
    )


def matrix_elemwise_sub(
    matrix_x: List[List[int]], matrix_y: List[List[int]]
) -> List[List[int]]:
    # Perform element-wise subtraction between two matrices.
    # z[i][j] = x[i][j] - y[i][j]
    return (
        []
        if len(matrix_x) < 1
        or not len(matrix_x) == len(matrix_y)
        or vec_elemwise_sub(matrix_x[0], matrix_y[0]) == []
        else [
            vec_elemwise_sub(matrix_x[0], matrix_y[0]),
            *matrix_elemwise_sub(matrix_x[1:], matrix_y[1:]),
        ]
    )


def reduce_mul(x: List[int]) -> int:
    # Multiply all elements in a vector.
    return 1 if len(x) < 1 else x[0] * reduce_mul(x[1:])


def matrix_elemwise_mul(
    matrix_x: List[List[int]], matrix_y: List[List[int]]
) -> List[List[int]]:
    # Perform element-wise multiplication between two matrices.
    # z[i][j] = x[i][j] * y[i][j]
    return (
        []
        if len(matrix_x) < 1
        or not len(matrix_x) == len(matrix_y)
        or vec_elemwise_mul(matrix_x[0], matrix_y[0]) == []
        else [
            vec_elemwise_mul(matrix_x[0], matrix_y[0]),
            *matrix_elemwise_mul(matrix_x[1:], matrix_y[1:]),
        ]
    )


def matrix_elemwise_div(
    matrix_x: List[List[int]], matrix_y: List[List[int]]
) -> List[List[int]]:
    # Perform element-wise division between two matrices.
    # z[i][j] = x[i][j] // y[i][j]
    return (
        []
        if len(matrix_x) < 1
        or not len(matrix_x) == len(matrix_y)
        or vec_elemwise_div(matrix_x[0], matrix_y[0]) == []
        else [
            vec_elemwise_div(matrix_x[0], matrix_y[0]),
            *matrix_elemwise_div(matrix_x[1:], matrix_y[1:]),
        ]
    )


def reduce_sum(x: List[int]) -> int:
    # Sum all elements in a vector.
    return 0 if len(x) < 1 else x[0] + reduce_sum(x[1:])


def integer_sqrt(n: int) -> int:
    # Compute the integer square root of a number.
    return n


def ite(cond: bool, a: int, b: int) -> int:
    # Returns a if cond is True, otherwise b.
    return a if cond else b


def col_vec(matrix: List[List[int]], col_index: int) -> List[int]:
    # Extract a column vector from a matrix at index `col_index`.
    return matrix_transpose(matrix_col_slice(matrix, col_index, col_index + 1))[0]
    ```

    ```cpp
    //test function
    #include <vector>
using namespace std;

vector<vector<int>> color_burn_8(vector<vector<int>> base, vector<vector<int>> active)
{
    vector<vector<int>> out;
    int m = base.size();
    int n = base[0].size();
	for (int row = 0; row < m; row++) {
        vector<int> row_vec;
		for (int col = 0; col < n; col++) {
            int pixel;
            if (active[row][col] == 0)
                pixel = 32;
            else
                pixel = 32 - (32 - base[row][col]) / active[row][col];
            row_vec.push_back(pixel);
		}
		out.push_back(row_vec);
	}
	return out;
}

    ```
