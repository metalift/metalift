[
    "Given the `normal_blend_f` function implementation and a list of methods to use, the equivalent Python code for your function is the following:\n\n```\ndef normal_blend_f(base, active, opacity):\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```\nThis Python function uses the `vec_elemwise_add` and `vec_scalar_mul` functions, which semantically behave like the `+\n` and `*` operations in your original C++ code. The `vec_scalar_mul` function multiplies each element in a vector by a scalar, much like how each element in `base` and `active` is multiplied by a scalar in the original function. The `vec_elemwise_add` function adds elements in two vectors element by element, just like how each multiplied element of `active` and `base` is added together in the initial function."
]
