[
    "```\n#defined functions\nimport math\n\n\ndef reduce_max(x):\n    return x[0] if len(x) <= 1 else (x[0] if x[0] > max(x[1:]) else max(x[1:]))\n\n\ndef reduce_sum(x):\n    return 0 if len(x) < 1 else x[0] + sum(x[1:])\n\n\ndef reduce_mul(x):\n    return 1 if len(x) < 1 else x[0] * math.prod(x[1:])\n\n\ndef matrix_vec_mul(matrix_x, x):\n    return (\n        []\n        if len(matrix_x) < 1 or len(matrix_x[0]) < 1 or not len(matrix_x[0]) == len(x)\n        else [sum(vec_elemwise_mul(matrix_x[0], x)), *matrix_vec_mul(matrix_x[1:], x)]\n    )\n\n\ndef vec_elemwise_mul(x, y):\n    return (\n        []\n        if len(x) < 1 or not len(x) == len(y)\n        else [x[0] * y[0], *vec_elemwise_mul(x[1:], y[1:])]\n    )\n\n\ndef reduce_sum(x):\n    return 0 if len(x) < 1 else x[0] + sum(x[1:])\n\n\ndef vec_elemwise_add(x, y):\n    return (\n        []\n        if len(x) < 1 or not len(x) == len(y)\n        else [x[0] + y[0], *vec_elemwise_add(x[1:], y[1:])]\n    )\n\n\ndef vec_elemwise_sub(x, y):\n    return (\n        []\n        if len(x) < 1 or not len(x) == len(y)\n        else [x[0] - y[0], *vec_elemwise_sub(x[1:], y[1:])]\n    )\n\n\ndef vec_elemwise_mul(x, y):\n    return (\n        []\n        if len(x) < 1 or not len(x) == len(y)\n        else [x[0] * y[0], *vec_elemwise_mul(x[1:], y[1:])]\n    )\n\n\ndef vec_elemwise_div(x, y):\n    return (\n        []\n        if len(x) < 1 or not len(x) == len(y)\n        else [x[0] // y[0], *vec_elemwise_div(x[1:], y[1:])]\n    )\n\n\ndef matrix_elemwise_add(matrix_x, matrix_y):\n    return (\n        []\n        if len(matrix_x) < 1 or not len(matrix_x) == len(matrix_y)\n        else [\n            vec_elemwise_add(matrix_x[0], matrix_y[0]),\n            *matrix_elemwise_add(matrix_x[1:], matrix_y[1:]),\n        ]\n    )\n\n\ndef matrix_elemwise_sub(matrix_x, matrix_y):\n    return (\n        []\n        if len(matrix_x) < 1 or not len(matrix_x) == len(matrix_y)\n        else [\n            vec_elemwise_sub(matrix_x[0], matrix_y[0]),\n            *matrix_elemwise_sub(matrix_x[1:], matrix_y[1:]),\n        ]\n    )\n\n\ndef matrix_elemwise_mul(matrix_x, matrix_y):\n    return (\n        []\n        if len(matrix_x) < 1 or not len(matrix_x) == len(matrix_y)\n        else [\n            vec_elemwise_mul(matrix_x[0], matrix_y[0]),\n            *matrix_elemwise_mul(matrix_x[1:], matrix_y[1:]),\n        ]\n    )\n\n\ndef matrix_elemwise_div(matrix_x, matrix_y):\n    return (\n        []\n        if len(matrix_x) < 1 or not len(matrix_x) == len(matrix_y)\n        else [\n            vec_elemwise_div(matrix_x[0], matrix_y[0]),\n            *matrix_elemwise_div(matrix_x[1:], matrix_y[1:]),\n        ]\n    )\n\n\ndef vec_scalar_add(a, x):\n    return [] if len(x) < 1 else [a + x[0], *vec_scalar_add(a, x[1:])]\n\n\ndef vec_scalar_sub(a, x):\n    return [] if len(x) < 1 else [x[0] - a, *vec_scalar_sub(a, x[1:])]\n\n\ndef vec_scalar_mul(a, x):\n    return [] if len(x) < 1 else [a * x[0], *vec_scalar_mul(a, x[1:])]\n\n\ndef vec_scalar_div(a, x):\n    return [] if len(x) < 1 else [x[0] // a, *vec_scalar_div(a, x[1:])]\n\n\ndef scalar_vec_sub(a, x):\n    return [] if len(x) < 1 else [a - x[0], *scalar_vec_sub(a, x[1:])]\n\n\ndef scalar_vec_div(a, x):\n    return [] if len(x) < 1 else [a // x[0], *scalar_vec_div(a, x[1:])]\n\n\ndef matrix_scalar_add(a, matrix_x):\n    return (\n        []\n        if len(matrix_x) < 1\n        else [vec_scalar_add(a, matrix_x[0]), *matrix_scalar_add(a, matrix_x[1:])]\n    )\n\n\ndef matrix_scalar_sub(a, matrix_x):\n    return (\n        []\n        if len(matrix_x) < 1\n        else [vec_scalar_sub(a, matrix_x[0]), *matrix_scalar_sub(a, matrix_x[1:])]\n    )\n\n\ndef matrix_scalar_mul(a, matrix_x):\n    return (\n        []\n        if len(matrix_x) < 1\n        else [vec_scalar_mul(a, matrix_x[0]), *matrix_scalar_mul(a, matrix_x[1:])]\n    )\n\n\ndef matrix_scalar_div(a, matrix_x):\n    return (\n        []\n        if len(matrix_x) < 1\n        else [vec_scalar_div(a, matrix_x[0]), *matrix_scalar_div(a, matrix_x[1:])]\n    )\n\n\ndef scalar_matrix_sub(a, matrix_x):\n    return (\n        []\n        if len(matrix_x) < 1\n        else [scalar_vec_sub(a, matrix_x[0]), *scalar_matrix_sub(a, matrix_x[1:])]\n    )\n\n\ndef scalar_matrix_div(a, matrix_x):\n    return (\n        []\n        if len(matrix_x) < 1\n        else [scalar_vec_div(a, matrix_x[0]), *scalar_matrix_div(a, matrix_x[1:])]\n    )\n\n\ndef vec_map(x, map_int_to_int):\n    return [] if len(x) < 1 else [map_int_to_int(x[0]), *vec_map(x[1:], map_int_to_int)]\n\n\ndef matrix_selection_two_args(matrix_x, matrix_y, select_two_args_arg):\n    return (\n        []\n        if len(matrix_x) < 1 or not len(matrix_x) == len(matrix_y)\n        else [\n            selection_two_args(matrix_x[0], matrix_y[0], select_two_args_arg),\n            *matrix_selection_two_args(matrix_x[1:], matrix_y[1:], select_two_args_arg),\n        ]\n    )\n\n\ndef selection_two_args(x, y, select_two_args_arg):\n    return (\n        []\n        if len(x) < 1 or not len(x) == len(y)\n        else [\n            select_two_args_arg(x[0], y[0]),\n            *selection_two_args(x[1:], y[1:], select_two_args_arg),\n        ]\n    )\n\n//test function\n#include <vector>\nusing namespace std;\n\nvector<int> normal_blend_f(vector<int> base, vector<int> active, int opacity)\n{\n  return matrix_selection_two_args(base, active, vec_scalar_mul(opacity,));\n}\n\n```"
]
