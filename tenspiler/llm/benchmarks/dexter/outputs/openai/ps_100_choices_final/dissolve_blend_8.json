[
    "```python\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda a, b: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, a, b)\n    )\n```",
    "```python\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, x, y),\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda active, base: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, active, base))\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active, \n        lambda base_pixel, active_pixel: \n            ite(\n                opacity - ((rand_cons % 100) + 1) // 100 >= 0, \n                active_pixel, \n                base_pixel\n            )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda active_pixel, base_pixel: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, active_pixel, base_pixel)\n    )\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n            active_pixel,\n            base_pixel\n        )\n    )\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            opacity - (((rand_cons % 100) + 1) // 100) >= 0, active_pixel, base_pixel\n        ),\n    )\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    \n    def select_pixel(b: int, a: int) -> int:\n        rand_val = ((rand_cons % 100) + 1) // 100\n        return ite(opacity - rand_val >= 0, a, b)\n\n    return matrix_selection_two_args(base, active, select_pixel)\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, y, x))\n```",
    "```python\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda active_pixel, base_pixel: ite(\n            opacity - (((rand_cons % 100) + 1) / 100) >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, a, b))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda x, y: ite(\n            ((rand_cons % 100) + 1) / 100 <= opacity, x, y\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_val, active_val: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, active_val, base_val))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_val, active_val: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, active_val, base_val))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, x, y)\n    )\n```",
    "```python\n# Python implementation of 'dissolve_blend_8' function\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda b, a: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, a, b)\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, active_pixel: ite(\n            opacity - (rand_cons % 100 + 1) // 100 >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, active_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0,\n            y,\n            x,\n        ),\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(\n            opacity - (((rand_cons % 100) + 1) // 100) >= 0,\n            y,\n            x\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0,\n            active_pixel,\n            base_pixel,\n        ),\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda x, y: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0, \n            x, \n            y\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda x, y: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, \n            x, \n            y\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, active_pixel: \n        ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, \n                                     lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, y, x))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, x, y)\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, x, y))\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, a, b))\n```",
    "```python\n#rewritten function\n\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    def pixel_selector(base_pixel: int, active_pixel: int) -> int:\n        rand_val = ((rand_cons % 100) + 1) // 100\n        return ite(opacity - rand_val >= 0, active_pixel, base_pixel)\n\n    return matrix_selection_two_args(base, active, pixel_selector)\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda pixel_active, pixel_base: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0, pixel_active, pixel_base\n        ),\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, x, y))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, a, b))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n            active_pixel,\n            base_pixel\n        )\n    )\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    def select_pixel(b: int, a: int) -> int:\n        return ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, a, b)\n    return matrix_selection_two_args(base, active, select_pixel)\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, active,\n        lambda b, a: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, a, b)\n    )\n```",
    "```python\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0,\n            active_pixel,\n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, y, x))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n            active_pixel,\n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, active_pixel, base_pixel\n        ),\n    )\n```",
    "```python\n#rewritten function\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, active_pixel, base_pixel\n        ),\n    )\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n            active_pixel,\n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda x, y: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n            x,\n            y\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0,\n            active_pixel,\n            base_pixel,\n        ),\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda x, y: ite((opacity - ((rand_cons % 100) + 1) / 100) >= 0, x, y)\n    )\n```",
    "```python\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda x, y: ite((opacity - ((rand_cons % 100) + 1) / 100) >= 0, x, y)\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n            active_pixel,\n            base_pixel,\n        ),\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda active_pixel, base_pixel: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, active_pixel, base_pixel))\n```",
    "```python\n#rewritten function\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n            active, \n            base, \n            lambda active_pixel, base_pixel: ite(\n                opacity - ((rand_cons % 100) + 1) // 100 >= 0,\n                active_pixel,\n                base_pixel\n            )\n        )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda x, y: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, y, x)\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n               base, \n               active, \n               lambda base_pixel, active_pixel: ite(\n                   opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n                   active_pixel,\n                   base_pixel\n               )\n           )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0,\n            active_pixel,\n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda a, b: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, a, b)\n    )\n```",
    "```python\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(active, base, lambda active_pixel, base_pixel: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, active_pixel, base_pixel))\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, y, x))\n```",
    "```python\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0, active_pixel, base_pixel\n        ),\n    )\n```",
    "```python\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n        active, \n        base,\n        lambda a, b: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, a, b)\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda active_pixel, base_pixel: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, active_pixel, base_pixel))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: ite((opacity - ((rand_cons % 100) + 1) / 100) >= 0, a, b))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n            active_pixel,\n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, \n                                     lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, x, y))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_val, active_val: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n            active_val,\n            base_val\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda x, y: ite(opacity - (((rand_cons % 100) + 1) / 100) >= 0, x, y)\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda x, y: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n            x,\n            y\n        )\n    )\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0,\n            active_pixel,\n            base_pixel,\n        ),\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda active_cell, base_cell: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, active_cell, base_cell))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, a, b))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, active_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda a, b: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, \n            a, \n            b\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, a, b))\n```",
    "```python\n# Python equivalent function using defined functions\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - (rand_cons % 100 + 1) // 100 >= 0,\n            active_pixel,\n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    def pixel_select(x: int, y: int) -> int:\n        return ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, y, x)\n    return matrix_selection_two_args(base, active, pixel_select)\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, a, b))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_pixel, active_pixel: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, active_pixel, base_pixel))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            opacity - (((rand_cons % 100) + 1) // 100) >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active,\n        lambda base_pixel, active_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, \n            active_pixel, \n            base_pixel)\n        )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    rand_val = ((rand_cons % 100) + 1) // 100\n    select_two_args_arg = lambda base_pixel, active_pixel: ite(opacity - rand_val >= 0, active_pixel, base_pixel)\n    return matrix_selection_two_args(base, active, select_two_args_arg)\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, x, y))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_val, base_val: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0,\n            active_val,\n            base_val\n        )\n    )\n```",
    "```python\n# Python version of test function\nfrom typing import List\n\n\ndef dissolve_blend_8(\n    base: List[List[int]], \n    active: List[List[int]], \n    opacity: int, \n    rand_cons: int\n) -> List[List[int]]:\n    \n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda x, y: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0, \n            y, \n            x\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda b, a: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, a, b)\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda x, y: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, x, y))\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0,\n            active_pixel,\n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, base,\n        lambda active_pixel, base_pixel: \n            ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, active_pixel, base_pixel)\n    )\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, x, y))\n```\n",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda x, y: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, x, y))\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda row, col: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n            col,\n            row\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) // 100 >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0,\n            active_pixel,\n            base_pixel\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda pix1, pix2: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, \n            pix1, \n            pix2\n        )\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        active,\n        base,\n        lambda active_pixel, base_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, active_pixel, base_pixel\n        ),\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda active_pixel, base_pixel: ite(opacity - (rand_cons % 100 + 1) // 100 >= 0, active_pixel, base_pixel))\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, a, b))\n```",
    "```python\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, x, y))\n```",
    "```python\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    return matrix_selection_two_args(\n        active, \n        base, \n        lambda x, y: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, x, y)\n    )\n```",
    "```python\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, active_pixel: ite(\n            opacity - ((rand_cons % 100) + 1) / 100 >= 0, \n            active_pixel, \n            base_pixel\n        )\n    )\n```"
]