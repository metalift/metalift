{"dissolve_blend_8": ["\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: y if opacity - ((rand_cons % 100) + 1) / 100 >= 0 else x\n    )\n", "\nfrom typing import Callable, List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: y if opacity - ((rand_cons % 100) + 1) / 100 >= 0 else x)\n", "\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_mul(\n            opacity,\n            matrix_scalar_div(\n                rand_cons % 100 + 1,\n                100\n            )\n        ),\n        base,\n        active,\n        lambda x, y: y if x >= 0 else y\n    )\n", "\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_mul(100, active),\n        matrix_scalar_mul(100, base),\n        lambda x, y: x if opacity - ((rand_cons % 100) + 1) >= 0 else y\n    )\n", "\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: a if opacity - ((rand_cons % 100) + 1) // 100 >= 0 else b)\n", "\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda x, y: x if opacity - ((rand_cons % 100) + 1) // 100 >= 0 else y)\n", "\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: y if opacity - (rand_cons % 100 + 1) / 100 >= 0 else x\n    )\n", "\nfrom typing import List\n\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, active_pixel: active_pixel if opacity - ((rand_cons % 100) + 1) // 100 >= 0 else base_pixel\n    )\n", "\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: active_pixel if opacity - ((rand_cons % 100) + 1) // 100 >= 0 else base_pixel\n    )\n", "\ndef dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: active_pixel\n        if opacity - ((rand_cons % 100) + 1) // 100 >= 0\n        else base_pixel,\n    )\n"]}
