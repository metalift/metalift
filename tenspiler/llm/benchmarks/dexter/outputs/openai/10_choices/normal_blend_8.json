[
    "#rewritten function\n```python\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(255 - opacity, base))\n```",
    "#rewritten function\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(255 - opacity, base))",
    "#rewritten function\n```\nfrom typing import List\n\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(255 - opacity, base))\n```",
    "#rewritten function\n```python\nimport math\n\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(255 - opacity, base))\n```",
    "#rewritten function\n```python\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(255 - opacity, base))\n```",
    "#rewritten function\n```python\nfrom typing import List\n\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(255-opacity, base))\n```",
    "#rewritten function\n```python\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(255-opacity, base))\n```",
    "#rewritten function\n\n```python\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((255 - opacity), base))\n```",
    "#rewritten function\n```python\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(255 - opacity, base))\n```",
    "#rewritten function\n```python\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(255 - opacity, base))\n```"
]
