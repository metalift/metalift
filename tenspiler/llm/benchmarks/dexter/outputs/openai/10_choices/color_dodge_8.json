[
    "#rewritten function\ndef color_dodge_8(base, active):\n    def color_dodge_pixel(x, y):\n        return 255 if y == 255 else x // (255 - y)\n    return matrix_selection_two_args(base, active, color_dodge_pixel)",
    "#rewritten function\nHere's the equivalent Python function, simplified using the given building blocks.\n\n```python\ndef map_int_to_int(base_pixel, active_pixel):\n    return 255 if active_pixel == 255 else base_pixel // (255 - active_pixel)\n\ndef color_dodge_8(base, active):\n    return matrix_selection_two_args(base, active, map_int_to_int)\n```\nThis rewritten function performs the element-wise operation (base_pixel // (255 - active_pixel)) if active_pixel is not 255, otherwise it simply assigns 255 to pixel, same as the original C++ function does. It applies this operation to every corresponding pair of pixels in the base and active images. \n\nIt does so without the use of loops or intermediate variables, making use of the recursive function `matrix_selection_two_args` to traverse and process all pixels. As `map_int_to_int` is provided as a parameter, `matrix_selection_two_args` applies this function to each corresponding pixel pair in the `base` and `active` images.",
    "#rewritten function\ndef color_dodge_8(base, active, f=lambda x: x if x == 255 else 255):\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: 255 if y == 255 else scalar_vec_div(255 - y, x),\n    )",
    "#rewritten function\ndef color_dodge_8(base, active):\n    return matrix_selection_two_args(base, active, lambda a, b: 255 if b == 255 else a // (255-b))",
    "#rewritten function\n```\ndef safe_divide(b, a):\n    if a == 255: \n        return 255\n    else:\n        return b // (255 - a)\n\ndef color_dodge_8(base, active):\n    return matrix_selection_two_args(base, active, safe_divide)\n```",
    "#rewritten function\n```\ndef color_dodge_8(base, active):\n    def helper(b,a): \n        return 255 if a == 255 else b // (255 - a)\n    return matrix_selection_two_args(base, active, helper)\n```",
    "#rewritten function\n```python\ndef color_dodge_8(base, active):\n    return matrix_selection_two_args(base, active, lambda b, a: 255 if a == 255 else b // (255 - a))\n```",
    "#rewritten function\ndef color_dodge_8(base, active):\n    def helper_func(base_val, active_val):\n        return 255 if active_val == 255 else base_val // (255 - active_val)\n    \n    return matrix_selection_two_args(base, active, helper_func)",
    "#rewritten function\ndef color_dodge_8(base, active):\n    return matrix_selection_two_args(base, active, lambda x, y: 255 if y == 255 else x // (255 - y))",
    "#rewritten function\n```python\ndef color_dodge_8(base, active):\n    \n    def color_dodge(a,b):\n        return 255 if b == 255 else a/(255-b)\n    \n    return matrix_selection_two_args(base, active, color_dodge)\n```"
]
