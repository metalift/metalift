The `dissolve_blend_8` function can be rewritten into Python using the provided functions in the following way:

```python
def dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:
    return matrix_selection_two_args(
        base,
        active,
        lambda x, y: y if opacity - ((rand_cons % 100) + 1) / 100 >= 0 else x
    )
```

Here is what the transformed function does:

1. It uses the `matrix_selection_two_args` function, which applies a function (the third argument) elementwise on two matrices (the first and second arguments).
2. The function to apply is a lambda function which takes two arguments `x` and `y`. `x` corresponds to elements from the `base` matrix and `y` corresponds to elements from the `active` matrix.
3. If `opacity - ((rand_cons % 100) + 1) / 100 >= 0`, it returns `y` (i.e., the corresponding element from `active`), otherwise it returns `x` (i.e., the corresponding element from `base`).

This transformation keeps the semantics of the original C++ function: it creates a new matrix where each element is either from `active` or `base`, depending on the value of `opacity - ((rand_cons % 100) + 1) / 100`.

Please note that this transformation assumes that the given `base` and `active` matrices have the same dimensions. If they don't, `matrix_selection_two_args` will return an empty list.
The equivalent Python function using the provided functions and constants would be:

```python
from typing import Callable, List

def dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:
    return matrix_selection_two_args(
        base,
        active,
        lambda x, y: y if opacity - ((rand_cons % 100) + 1) / 100 >= 0 else x)
```

In this function, we use `matrix_selection_two_args` to iterate over both matrices `base` and `active`. For each pair of corresponding elements, we check if `opacity - ((rand_cons % 100) + 1) / 100 >= 0`. If it is, we select the element from `active`. If not, we select the element from `base`.

This function mimics the behavior of the original C++ `dissolve_blend_8` function, which iterates over the rows and columns of the matrices, and for each pixel it checks if `opacity - rand_val >= 0` to decide whether to select the pixel from `active` or `base`.
Here is the equivalent Python function using the provided functions:

```python
def dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:
    return matrix_selection_two_args(
        matrix_scalar_mul(
            opacity,
            matrix_scalar_div(
                rand_cons % 100 + 1,
                100
            )
        ),
        base,
        active,
        lambda x, y: y if x >= 0 else y
    )
```

This function uses the matrix functions to perform operations on each element of the given matrices. The `matrix_selection_two_args` function is used to apply an operation on each pair of corresponding elements in the two matrices. The operation is defined by the lambda function `lambda x, y: y if x >= 0 else y`, which is equivalent to the if-else condition in the original C++ function. The `matrix_scalar_mul` and `matrix_scalar_div` functions are used to perform the operations on the `opacity` and `rand_cons` variables respectively.
The given C++ function `dissolve_blend_8` can be rewritten in Python using the provided functions as follows:

```python
def dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:
    return matrix_selection_two_args(
        matrix_scalar_mul(100, active),
        matrix_scalar_mul(100, base),
        lambda x, y: x if opacity - ((rand_cons % 100) + 1) >= 0 else y
    )
```

This function performs the same operation as the `dissolve_blend_8` function in C++. It takes in two matrices `base` and `active`, an integer `opacity`, and a random constant `rand_cons`. It multiplies each element in the `active` and `base` matrices by 100 and then, for each corresponding pair of elements, it selects the element from the `active` matrix if `opacity - ((rand_cons % 100) + 1)` is greater or equal to 0, else it selects the element from the `base` matrix. The result is a new matrix that is the same size as the input matrices.
The `dissolve_blend_8` function can be rewritten using the provided functions as follows:

```python
def dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:
    return matrix_selection_two_args(active, base, lambda a, b: a if opacity - ((rand_cons % 100) + 1) // 100 >= 0 else b)
```

In this rewritten function, we use the `matrix_selection_two_args` function to iterate over `active` and `base` matrices. For each corresponding pair of elements in the matrices, we use a lambda function to select the element from `active` if `opacity - ((rand_cons % 100) + 1) // 100` is greater or equal to 0, and the element from `base` otherwise. This is equivalent to the conditional logic in the original C++ function.
The given `test` function in C++ can be rewritten in Python using the provided functions as follows:

```python
def dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:
    return matrix_selection_two_args(active, base, lambda x, y: x if opacity - ((rand_cons % 100) + 1) // 100 >= 0 else y)
```

In the `test` function, a new matrix is created by choosing each pixel from either the `active` matrix or the `base` matrix based on a condition that involves `opacity` and `rand_cons`. The rewritten function uses the `matrix_selection_two_args` function to achieve the same result. The condition in the lambda function is equivalent to the condition in the `test` function's if statement. The lambda function returns the pixel from the `active` matrix if the condition is true, otherwise it returns the pixel from the `base` matrix. This is equivalent to the behavior of the `test` function.
Based on the functions provided, the C++ function can be rewritten as follows:

```python
def dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:
    return matrix_selection_two_args(
        base,
        active,
        lambda x, y: y if opacity - (rand_cons % 100 + 1) / 100 >= 0 else x
    )
```

In the above Python function, `matrix_selection_two_args` is used to iterate over the two input matrices `base` and `active`.

A lambda function is used to choose between the corresponding elements from `base` and `active` matrices based on the condition.

The condition `opacity - (rand_cons % 100 + 1) / 100 >= 0` is equivalent to the condition in the original C++ function. If the condition is True, the element from the `active` matrix is chosen, otherwise the element from the `base` matrix is chosen.

This Python function is semantically equivalent to the given C++ function and follows the given instructions.
The given C++ function `dissolve_blend_8` can be rewritten in Python using the provided functions as follows:

```python
from typing import List

def dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:
    return matrix_selection_two_args(
        base,
        active,
        lambda base_pixel, active_pixel: active_pixel if opacity - ((rand_cons % 100) + 1) // 100 >= 0 else base_pixel
    )
```

This function uses the provided `matrix_selection_two_args` function which applies a function to each pair of corresponding elements in two matrices. The function passed to `matrix_selection_two_args` returns the active pixel if the opacity minus the random value is greater than or equal to zero, otherwise it returns the base pixel. This is equivalent to the logic in the given C++ function.
Here is the Python equivalent of the C++ function using the provided functions. Notice that the logic is the same as in the C++ function, but the actual implementation looks quite different due to the constraints of the task.

The `dissolve_blend_8` function is a function that takes four parameters and applies a dissolve blend operation between two matrices (`base` and `active`) based on the `opacity` and `rand_cons` parameters. The function iterates over each element in the matrices and checks if `opacity - rand_val` is greater than or equal to zero. If it is, it selects the corresponding element from the `active` matrix; otherwise, it selects the corresponding element from the `base` matrix.

```python
def dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:
    return matrix_selection_two_args(
        base,
        active,
        lambda base_pixel, active_pixel: active_pixel if opacity - ((rand_cons % 100) + 1) // 100 >= 0 else base_pixel
    )
```

This Python function uses the `matrix_selection_two_args` function, which applies a function (`select_two_args_arg`) to each pair of corresponding elements in two matrices. The `select_two_args_arg` function is a lambda function that takes a pixel from the `base` and `active` matrices and returns the `active` pixel if `opacity - ((rand_cons % 100) + 1) // 100` is greater than or equal to zero, otherwise it returns the `base` pixel.
The provided C++ function `dissolve_blend_8` implements a dissolve blend operation on two 2D images (represented as 2D vectors), using a given opacity and random constant. To rewrite this function in Python using the provided set of functions, we can use the `matrix_selection_two_args` function. This function applies a selection operation element-wise on two matrices. We can use this function to select the pixel from either the base image or the active image based on the calculated random value and the opacity. Here is your answer:

```python
def dissolve_blend_8(base: List[List[int]], active: List[List[int]], opacity: int, rand_cons: int) -> List[List[int]]:
    return matrix_selection_two_args(
        base,
        active,
        lambda base_pixel, active_pixel: active_pixel
        if opacity - ((rand_cons % 100) + 1) // 100 >= 0
        else base_pixel,
    )
```

In the above Python code, we're using the `matrix_selection_two_args` function to iterate over the `base` and `active` matrices. For each pair of corresponding pixels (base_pixel, active_pixel), we calculate a random value (`((rand_cons % 100) + 1) // 100`) and check if it's less than the opacity. If it is, we select the pixel from the active image; otherwise, we select the pixel from the base image.
