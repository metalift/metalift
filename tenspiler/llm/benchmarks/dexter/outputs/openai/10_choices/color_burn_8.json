[
    "#rewritten function\n```\ndef color_burn_8(base, active):\n    return matrix_selection_two_args(base, active, lambda x, y: 255 if y == 0 else 255 - (255 - x) // y)\n```",
    "The rewritten function using the provided functions is as follows:\n```python\n#rewritten function\ndef color_burn_8(base, active):\n    def pixel_burn(x, y):\n        return 255 if y == 0 else 255 - ((255 - x) // y)\n    return matrix_selection_two_args(base, active, pixel_burn)\n```",
    "#rewritten function\n```python\ndef color_burn_8(base, active): \n    return matrix_selection_two_args(\n        matrix_scalar_mul(255, base), \n        matrix_elemwise_add(\n            vec_scalar_mul(255, vec_elemwise_div(matrix_elemtwise_sub(matrix_scalar_mul(255, base), active), active)\n        ), \n        lambda x, y: y if y == 0 else x\n    )\n```",
    "#rewritten function\n```python\ndef color_burn_8(base, active):\n    def divide_and_subtract(a, b):\n        \"\"\"\n        This function returns a `pixel` value based on the given conditions.\n        \"\"\"\n        if b == 0:\n            return 255\n        else:\n            return 255 - (255 - a) / b\n    # using matrix_selection_two_args function to apply divide_and_subtract function on each pair of corresponding elements in base and active matrix.\n    return matrix_selection_two_args(base, active, divide_and_subtract)\n\n```",
    "#rewritten function\n```\ndef color_burn_8(base, active):\n    def color_burn_per_pixel(base_pixel, active_pixel):\n        return 255 if active_pixel == 0 else 255 - ((255 - base_pixel)// active_pixel)\n    return matrix_selection_two_args(base, active, color_burn_per_pixel)\n```",
    "#rewritten function\n```python\ndef color_burn_8(base, active):\n    return matrix_selection_two_args(active, base, lambda a, b: 255 if a == 0 else b - (255 - b) // a)\n```",
    "#rewritten function\ndef color_burn_8(base, active):\n    def color_burn_pixel(base_pixel, active_pixel):\n        return 255 if active_pixel == 0 else 255 - (255 - base_pixel) // active_pixel\n    \n    return matrix_selection_two_args(base, active, color_burn_pixel)",
    "#rewritten function\n```\ndef color_burn_8(base, active):\n    def select_two_args_arg(x, y):\n        return 255 if y == 0 else 255 - (255 - x) // y\n    return matrix_selection_two_args(base, active, select_two_args_arg)\n```",
    "#rewritten function\n```python\ndef color_burn_8(base, active):\n    return matrix_selection_two_args(base, active, \n                            lambda base, active: 255 if active == 0 else 255 - scalar_vec_div(scalar_vec_sub(255, base), active))\n```",
    "#rewritten function\n```python\ndef color_burn_8(base, active):\n    def select_two_args(base_pixel, active_pixel):\n        return 255 if active_pixel == 0 else 255 - (255 - base_pixel) // active_pixel\n    return matrix_selection_two_args(base, active, select_two_args)\n```\nThis Python function uses the `matrix_selection_two_args` with a lambda function that does exactly what the body of the inner `if` statement in the C++ code was doing, and applies it to every corresponding pair of elements in the two given matrices. As a result, its output should be equivalent to that of the given C++ function."
]
