normal_blend_f:
def normal_blend_f_inv0(active agg.result base i opacity ref.tmp)
    i >= 0 and i <= list_length(base) and agg.result == vec_elemwise_add(vec_scalar_mul(opacity, list_take(active, i)), vec_scalar_mul((1 - opacity), list_take(base, i)))

def normal_blend_f_ps(base active opacity normal_blend_f_rv)
    normal_blend_f_rv == vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))

=====
normal_blend_8:

def normal_blend_8_inv0(active agg.result base i opacity ref.tmp)
    i >= 0 and i <= list_length(base) and agg.result == vec_elemwise_add(vec_scalar_mul(opacity, list_take(active, i)), vec_scalar_mul((32 - opacity), list_take(base, i)))

def normal_blend_8_ps(base active opacity normal_blend_8_rv)
    normal_blend_8_rv == vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((32 - opacity), base))

=====
dissolve_blend_8

def dissolve_blend_8_inv0(active agg.result base col opacity pixel rand_cons rand_val row row_vec)
    row >= 0 and row <= matrix_length(base) and agg.result == dissolve_matrix_selection_two_args(matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), opacity, rand_cons, dissolve_select_two_args)

def dissolve_blend_8_inv1(active base col opacity pixel rand_cons rand_val row_vec agg.result row)
    row >= 0 and row <= matrix_length(base) and col >= 0 and col <= list_length(matrix_get(base, 0)) and row_vec == dissolve_selection_two_args(list_take(matrix_get(active, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0), list_take(matrix_get(base, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(active, col), row, 1)), 0), opacity, rand_cons, dissolve_select_two_args) and agg.result == dissolve_matrix_selection_two_args(matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), opacity, rand_cons, dissolve_select_two_args)

def dissolve_blend_8_ps(base active opacity rand_cons dissolve_blend_8_rv)
    dissolve_blend_8_rv == dissolve_matrix_selection_two_args(active, base, opacity, rand_cons, dissolve_select_two_args)

def dissolve_select_two_args(int_x int_y opacity rand_cons)
    int_x if (opacity - (((Mod:Int rand_cons (Lit:Int 100)) + 1) / 100)) >= 0 else int_y


def OUTER_LOOP_INDEX_FIRST()
    True

=====
darken_blend_8:

def OUTER_LOOP_INDEX_FIRST()
    True

def darken_blend_8_inv0(active agg.result base col pixel row row_vec):
    row >= 0 and row <= matrix_length(base) and agg.result == matrix_selection_two_args(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), select_two_args)

def darken_blend_8_inv1(active base col pixel row_vec agg.result row)
    row >= 0 and row <= matrix_length(base) and col >= 0 and col <= list_length(matrix_get(base, 0)) and row_vec == selection_two_args(list_take(matrix_get(active, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(active, col), row, 1)), 0), list_take(matrix_get(base, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0), select_two_args) and agg.result == matrix_selection_two_args(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), select_two_args)

def darken_blend_8_ps(base active darken_blend_8_rv)
    darken_blend_8_rv == matrix_selection_two_args(base, active, select_two_args)

def select_two_args(int_x int_y)
    int_x if int_y > int_x else int_y

=====
multiply_blend_8:

def multiply_blend_8_inv0(active agg.result base col pixel row row_vec)
    row >= 0 and row <= matrix_length(base) and agg.result == matrix_scalar_div(32, matrix_elemwise_mul(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row)))

def multiply_blend_8_inv1(active base col pixel row_vec agg.result row)
    row >= 0 and row <= matrix_length(base) and col >= 0 and col <= list_length(matrix_get(base, 0)) and row_vec == vec_scalar_div(32, vec_elemwise_mul(list_take(matrix_get(base, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0), list_take(matrix_get(active, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0))) and agg.result == matrix_scalar_div(32, matrix_elemwise_mul(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row)))

def multiply_blend_8_ps(base active multiply_blend_8_rv)
    multiply_blend_8_rv == matrix_scalar_div(32, matrix_elemwise_mul(base, active))

def OUTER_LOOP_INDEX_FIRST()
    True

=====
linear_burn_8

def linear_burn_8_inv0(active agg.result base col pixel row row_vec)
    row >= 0 and row <= matrix_length(base) and agg.result == matrix_scalar_sub(32, matrix_elemwise_add(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row)))

def linear_burn_8_inv1(active base col pixel row_vec agg.result row)
    row >= 0 and row <= matrix_length(base) and col >= 0 and col <= list_length(matrix_get(base, 0)) and row_vec == vec_scalar_sub(32, vec_elemwise_add(list_take(matrix_get(base, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(active, col), row, 1)), 0), list_take(matrix_get(active, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(active, col), row, 1)), 0))) and agg.result == matrix_scalar_sub(32, matrix_elemwise_add(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(active, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(active, 0, row)))

def linear_burn_8_ps(base active linear_burn_8_rv)
    linear_burn_8_rv == matrix_scalar_sub(32, matrix_elemwise_add(active, base))

def OUTER_LOOP_INDEX_FIRST()
    True

=====
color_burn_8

def color_burn_8_inv0(active agg.result base col pixel row row_vec)
    row >= 0 and row <= matrix_length(base) and agg.result == matrix_selection_two_args(matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(active, 0, row), select_two_args)

def color_burn_8_inv1(active base col pixel row_vec agg.result row)
    row >= 0 and row <= matrix_length(base) and col >= 0 and col <= list_length(matrix_get(base, 0)) and row_vec == selection_two_args(list_take(matrix_get(active, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(active, col), row, 1)), 0), list_take(matrix_get(base, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0), select_two_args) and agg.result == matrix_selection_two_args(matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), select_two_args)

def color_burn_8_ps(base active color_burn_8_rv)
    color_burn_8_rv == matrix_selection_two_args(active, base, select_two_args)

def select_two_args(int_x int_y)
    32 if int_x == 0 else (32 - ((32 - int_y) / int_x))

def OUTER_LOOP_INDEX_FIRST()
    True

=====
lighten_blend_8:

def lighten_blend_8_inv0(active agg.result base col pixel row row_vec)
    row >= 0 and row <= matrix_length(base) and agg.result == matrix_selection_two_args(matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(active, 0, row), select_two_args)

def lighten_blend_8_inv1(active base col pixel row_vec agg.result row)
    row >= 0 and row <= matrix_length(base) and col >= 0 and col <= list_length(matrix_get(base, 0)) and row_vec == selection_two_args(list_take(matrix_get(base, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0), list_take(matrix_get(active, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0), select_two_args) and agg.result == matrix_selection_two_args(matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), select_two_args)

def lighten_blend_8_ps(base active lighten_blend_8_rv)
    lighten_blend_8_rv == matrix_selection_two_args(active, base, select_two_args)

def select_two_args(int_x int_y)
    int_y if int_x < int_y else int_x

def OUTER_LOOP_INDEX_FIRST()
    True

====
screen_blend_8

def screen_blend_8_inv0(active agg.result base col pixel row row_vec)
    row >= 0 and row <= matrix_length(base) and agg.result == matrix_elemwise_sub(matrix_elemwise_add(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row)), matrix_scalar_div(32, matrix_elemwise_mul(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row))))

def screen_blend_8_inv1(active base col pixel row_vec agg.result row)
    row >= 0 and row <= matrix_length(base) and col >= 0 and col <= list_length(matrix_get(base, 0)) and row_vec == vec_elemwise_sub(vec_elemwise_add(list_take(matrix_get(base, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0), list_take(matrix_get(active, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0)), vec_scalar_div(32, vec_elemwise_mul(list_take(matrix_get(base, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0), list_take(matrix_get(active, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0)))) and agg.result == matrix_elemwise_sub(matrix_elemwise_add(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row)), matrix_scalar_div(32, matrix_elemwise_mul(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row))))

def screen_blend_8_ps(base active screen_blend_8_rv)
    screen_blend_8_rv == matrix_elemwise_sub(matrix_elemwise_add(base, active), matrix_scalar_div(32, matrix_elemwise_mul(base, active)))

def OUTER_LOOP_INDEX_FIRST()
    True

=====
linear_dodge_8

def linear_dodge_8_inv0(active agg.result base col pixel row row_vec)
    row >= 0 and row <= matrix_length(base) and agg.result == matrix_elemwise_add(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row))

def linear_dodge_8_inv1(active base col pixel row_vec agg.result row)
    row >= 0 and row <= matrix_length(base) and col >= 0 and col <= list_length(matrix_get(base, 0)) and row_vec == vec_elemwise_add(list_take(matrix_get(base, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0), list_take(matrix_get(active, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0)) and agg.result == matrix_elemwise_add(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row))

def linear_dodge_8_ps(base active linear_dodge_8_rv)
    linear_dodge_8_rv == matrix_elemwise_add(base, active)

def OUTER_LOOP_INDEX_FIRST()
    True

=====
color_dodge_8

def color_dodge_8_inv0(active agg.result base col pixel row row_vec)
    row >= 0 and row <= matrix_length(base) and agg.result == matrix_selection_two_args(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(active, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), select_two_args)

def color_dodge_8_inv1(active base col pixel row_vec agg.result row)
    row >= 0 and row <= matrix_length(base) and col >= 0 and col <= list_length(matrix_get(base, 0)) and row_vec == selection_two_args(list_take(matrix_get(base, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(active, col), row, 1)), 0), list_take(matrix_get(active, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0), select_two_args) and agg.result == matrix_selection_two_args(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), matrix_take(active, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(base, 0, row), select_two_args)

def color_dodge_8_ps(base active color_dodge_8_rv)
    color_dodge_8_rv == matrix_selection_two_args(base, active, select_two_args)

def select_two_args(int_x int_y)
    32 if int_y == 32 else (int_x / (32 - int_y))

def OUTER_LOOP_INDEX_FIRST()
    True

=====
overlay_blend_8

def overlay_blend_8_inv0(active agg.result base col pixel row row_vec)
    row >= 0 and row <= matrix_length(base) and agg.result == matrix_selection_two_args(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(active, 0, row), matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(active, 0, row), select_two_args)

def overlay_blend_8_inv1(active base col pixel row_vec agg.result row)
    row >= 0 and row <= matrix_length(base) and col >= 0 and col <= list_length(matrix_get(base, 0)) and row_vec == selection_two_args(list_take(matrix_get(base, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(base, col), row, 1)), 0), list_take(matrix_get(active, row), col) if OUTER_LOOP_INDEX_FIRST() else matrix_get(matrix_transpose(matrix_col_slice_with_length(matrix_take(active, col), row, 1)), 0), select_two_args) and agg.result == matrix_selection_two_args(matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(active, 0, row), matrix_take(base, row) if OUTER_LOOP_INDEX_FIRST() else matrix_col_slice(active, 0, row), select_two_args)

def overlay_blend_8_ps(base active overlay_blend_8_rv)
    overlay_blend_8_rv == matrix_selection_two_args(base, matrix_transpose(base), select_two_args)

def select_two_args(int_x int_y)
    ((((2 * int_x) + int_x) - (((2 * int_x) * int_x) / 32)) - 32) if int_x >= 16 else (((2 * int_x) * int_x) / 32)

def OUTER_LOOP_INDEX_FIRST()
    True
