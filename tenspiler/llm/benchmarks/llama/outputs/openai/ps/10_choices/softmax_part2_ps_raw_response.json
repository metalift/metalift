{"softmax_part2": ["\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n", "\nfrom typing import List\n\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n", "\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n", "\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(input[:max_pos], lambda x: integer_exp(x - max_val))\n", "\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_slice(vec_map(input, lambda x: integer_exp(x - max_val)), 0, max_pos)\n", "\nreturn_var = vec_map(vec_scalar_sub(max_val, vec_slice(input, 0, max_pos)), integer_exp)\n", "\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n", "\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(vec_scalar_sub(max_val, input), 0, max_pos), integer_exp)\n", "\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n", "\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n"]}
