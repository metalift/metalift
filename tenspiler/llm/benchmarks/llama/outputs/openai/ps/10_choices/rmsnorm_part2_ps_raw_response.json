{"rmsnorm_part2": ["\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(integer_sqrt(ss // len(input) + 1), input), weight)\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    size = len(input)\n    inv_ss = scalar_vec_div(integer_sqrt(ss // size + 1), [1])[0]\n    return vec_scalar_mul(inv_ss, vec_elemwise_mul(input, weight))\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    size = len(input)\n    inv_ss = integer_sqrt(ss // size + 1)\n    return vec_elemwise_mul(vec_scalar_mul(inv_ss, input), weight)\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(integer_sqrt(ss // len(input) + 1), input), weight)\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(integer_sqrt(ss // len(input) + 1), input), weight)\n", "\nfrom typing import List\n\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(integer_sqrt_helper(ss // len(input) + 1, 1), input), weight)\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(integer_sqrt_helper(ss // len(input) + 1, 1), input), weight)\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    size = len(input)\n    inv_ss = integer_sqrt(ss // size + 1)\n    return vec_elemwise_mul(vec_scalar_mul(inv_ss, input), weight)\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    size = len(input)\n    inv_ss = integer_sqrt(ss // size + 1)\n    return vec_scalar_mul(inv_ss, vec_elemwise_mul(input, weight))\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(integer_sqrt(ss // len(input) + 1), input), weight)\n"]}
