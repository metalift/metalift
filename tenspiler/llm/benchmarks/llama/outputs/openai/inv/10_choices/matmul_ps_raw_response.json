{"matmul": ["\nfrom typing import List\n\ndef invariant1(row: int, input: List[int], output: List[int], weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(col: int, curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col]))\n", "\nfrom typing import List\n\ndef invariant1(row: int, input: List[int], output: List[int], weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(row: int, col: int, curr: int, input: List[int], weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and row >= 0 and row <= len(weight) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col]))\n", "\ndef invariant1(row: int, input: List[int], output: List[int], m: int, weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= m and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(col: int, curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col]))\n", "\ndef invariant1(curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input) and curr == 0\n\ndef invariant2(col: int, curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and row >= 0 and row < len(weight) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col]))\n", "\ndef invariant1(row: int, input: List[int], output: List[int], weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(row: int, col: int, curr: int, input: List[int], weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and row >= 0 and row < len(weight) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col]))\n", "\ndef invariant1(row: int, input: List[int], output: List[int], weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(col: int, curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col]))\n", "\nfrom typing import List\n\ndef invariant1(row: int, input: List[int], output: List[int], weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(col: int, curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col]))\n", "\ndef invariant1(row: int, input: List[int], output: List[int], weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(row: int, col: int, curr: int, input: List[int], weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and row >= 0 and row <= len(weight) and curr == reduce_sum(vec_elemwise_mul(weight[row], input[:col]))\n", "\nfrom typing import List\n\ndef invariant1(curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= len(weight) and output[:row] == matrix_vec_mul(weight[:row], input) and curr == 0\n\ndef invariant2(col: int, curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and row >= 0 and row < len(weight) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col]))\n", "\ndef invariant1(curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\n\n\ndef invariant2(col: int, curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and row < len(weight) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col]))\n"]}
