{"softmax_part1": [["\ndef invariant(i: int, input: List[int], max_val: int, max_pos: int) -> bool:\n    return i > 0 and i <= max_pos and max_val == reduce_max(vec_slice(input, 0, i))\n"], ["\ndef invariant(input: List[int], max_val: int, i: int):\n    return i >= 1 and i <= len(input) and max_val == reduce_max(vec_slice(input, 0, i))\n"], ["\ndef invariant(input: List[int], max_val: int, i:int):\n    return i >= 1 and i <= len(input) and max_val == reduce_max(vec_slice(input, 0, i))\n"], ["\ndef invariant(input: List[int], max_pos: int, max_val: int, i: int):\n    return i >= 1 and i <= max_pos and max_val == reduce_max(vec_slice(input, 0, i))\n"], ["\ndef invariant(input: List[int], max_pos: int, max_val: int, i:int):\n    return i >= 1 and i <= max_pos and max_val == reduce_max(vec_slice(input, 0, i))\n"], ["\ndef invariant(input: List[int], max_pos: int, max_val: int, i: int):\n    return i >= 1 and i <= max_pos and max_val == reduce_max(vec_slice(input, 0, i))\n"], ["\ndef invariant(input: List[int], max_val: int, i:int):\n    return i >= 0 and i <= len(input) and max_val == reduce_max(vec_slice(input, 0, i))\n"], ["\ndef invariant(input: List[int], max_val: int, i:int):\n    return i >= 1 and i <= len(input) and max_val == reduce_max(vec_slice(input, 0, i))\n"], ["\ndef invariant(input: List[int], max_val: int, i:int):\n    return i >= 0 and i <= len(input) and max_val == reduce_max(vec_slice(input, 0, i))\n"], ["\ndef invariant(input: List[int], max_val: int, i:int):\n    return i > 0 and i <= len(input) and max_val == reduce_max(vec_slice(input, 0, i))\n"]]}
