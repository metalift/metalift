{"transformer_part1": ["\ndef invariant1(token_position, head, head_size, key_cache_layer, q, attention, timestep):\n    return timestep >= 0 and timestep <= token_position and attention == [reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + head_size), vec_slice(key_cache_layer[i], head * head_size, head * head_size + head_size))) // integer_sqrt(head_size * 1) for i in range(timestep)]\n\n\n\ndef invariant2(head, head_size, i, key_cache_layer, q, score, timestep):\n    return i >= 0 and i <= head_size and score == reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + head_size), vec_slice(key_cache_layer[timestep], head * head_size, head * head_size + head_size))) // integer_sqrt(head_size * 1)\n", "\ndef invariant1(token_position, head, head_size, key_cache_layer, q, attention, timestep):\n    return timestep >= 0 and timestep <= token_position and attention == vec_scalar_div(integer_sqrt(head_size * 1), matrix_vec_mul(matrix_col_slice(matrix_row_slice(key_cache_layer, 0, timestep), head * head_size, head * head_size + head_size), vec_slice(q, head * head_size, head * head_size + head_size)))\n\ndef invariant2(head, head_size, i, key_cache_layer, q, score, timestep):\n    return i >= 0 and i <= head_size and score == reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + head_size), vec_slice(key_cache_layer[timestep], head * head_size, head * head_size + head_size)))\n", "\ndef invariant1(token_position, head, head_size, key_cache_layer, q, attention, timestep):\n    return timestep >= 0 and timestep <= token_position and attention == [reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + head_size), vec_slice(key_cache_layer[i], head * head_size, head * head_size + head_size)) // integer_sqrt(head_size * 1) for i in range(timestep)]\n\ndef invariant2(head, head_size, key_cache_layer, q, score, timestep, i):\n    return i >= 0 and i <= head_size and timestep >= 0 and timestep <= len(key_cache_layer) and score == reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + head_size), vec_slice(key_cache_layer[timestep], head * head_size, head * head_size + head_size))[:i+1]) // integer_sqrt(head_size * 1)\n", "\ndef invariant1(token_position, head, head_size, key_cache_layer, q, attention, timestep):\n    return (\n        timestep >= 0 \n        and timestep <= token_position \n        and attention == vec_scalar_div(integer_sqrt(head_size * 1), matrix_vec_mul(matrix_col_slice(matrix_row_slice(key_cache_layer, 0, timestep), head * head_size, head * head_size + head_size), vec_slice(q, head * head_size, head * head_size + head_size)))\n    )\n\ndef invariant2(head, head_size, i, key_cache_layer, q, score, timestep, token_position):\n    return (\n        i >= 0 \n        and i <= head_size \n        and timestep >= 0 \n        and timestep <= token_position\n        and score == reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + i), vec_slice(matrix_row_slice(key_cache_layer, timestep, timestep+1)[0], head * head_size, head * head_size + i))) // integer_sqrt(head_size * 1)\n    )\n", "\ndef invariant1(token_position, head, head_size, key_cache_layer, q, attention, timestep):\n    return timestep >= 0 and timestep <= token_position and attention == [reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + head_size), vec_slice(key_cache_layer[i], head * head_size, head * head_size + head_size))) // integer_sqrt(head_size * 1) for i in range(timestep)]\n\ndef invariant2(head, head_size, i, key_cache_layer, q, score, timestep):\n    return i >= 0 and i <= head_size and score == reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + i), vec_slice(key_cache_layer[timestep], head * head_size, head * head_size + i))) // integer_sqrt(head_size * 1)\n", "\ndef invariant1(token_position, head, head_size, key_cache_layer, q, attention, timestep):\n    return timestep >= 0 and timestep <= token_position and attention == [reduce_sum(vec_elemwise_mul(q[head * head_size:head * head_size + head_size], key_cache_layer[i][head * head_size:head * head_size + head_size])) // integer_sqrt(head_size * 1) for i in range(timestep)]\n\ndef invariant2(head, head_size, key_cache_layer, q, score, timestep, i):\n    return i >= 0 and i <= head_size and score == reduce_sum(vec_elemwise_mul(q[head * head_size:head * head_size + i], key_cache_layer[timestep][head * head_size:head * head_size + i]))\n", "\ndef invariant1(token_position, head, head_size, key_cache_layer, q, attention, timestep):\n    return timestep >= 0 and timestep < token_position and attention == vec_scalar_div(integer_sqrt(head_size * 1), matrix_vec_mul(matrix_col_slice(matrix_row_slice(key_cache_layer, 0, timestep), head * head_size, head * head_size + head_size), vec_slice(q, head * head_size, head * head_size + head_size)))\n\ndef invariant2(head, head_size, i, key_cache_layer, q, score, timestep, token_position):\n    return i >= 0 and i < head_size and timestep >= 0 and timestep < token_position and score == reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + head_size), vec_slice(key_cache_layer[timestep], head * head_size, head * head_size + head_size))) / integer_sqrt(head_size * 1)\n", "\ndef invariant1(token_position, head, head_size, key_cache_layer, q, attention, timestep):\n    return timestep >= 0 and timestep <= token_position and attention == [reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + head_size), vec_slice(key_cache_layer[i], head * head_size, head * head_size + head_size)) // integer_sqrt(head_size * 1) for i in range(timestep)]\n\ndef invariant2(head, head_size, i, key_cache_layer, q, score, timestep):\n    return i >= 0 and i <= head_size and score == reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + i), vec_slice(key_cache_layer[timestep], head * head_size, head * head_size + i)))\n", "\ndef invariant1(attention, head, head_size, key_cache_layer, q, score, timestep, token_position):\n    return timestep >= 0 and timestep <= token_position and attention == [reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + head_size), vec_slice(key_cache_layer[i], head * head_size, head * head_size + head_size))) // integer_sqrt(head_size * 1) for i in range(timestep)]\n\ndef invariant2(head, head_size, i, key_cache_layer, q, score, timestep, token_position):\n    return i >= 0 and i < head_size and score == reduce_sum(vec_elemwise_mul(vec_slice(q, head * head_size, head * head_size + i), vec_slice(key_cache_layer[timestep], head * head_size, head * head_size + i)))\n", "\ndef invariant1(attention: List[int], head: int, head_size: int, key_cache_layer: List[List[int]], q: List[int], score: int, timestep: int, token_position: int):\n    return timestep >= 0 and timestep <= token_position and score == reduce_sum(matrix_vec_mul(matrix_col_slice(matrix_row_slice(key_cache_layer, 0, timestep), head * head_size, head * head_size + head_size), vec_slice(q, head * head_size, head * head_size + head_size))) // integer_sqrt(head_size * 1) and attention == matrix_vec_mul(matrix_col_slice(matrix_row_slice(key_cache_layer, 0, timestep), head * head_size, head * head_size + head_size), vec_slice(q, head * head_size, head * head_size + head_size))[:timestep] \n\ndef invariant2(head: int, head_size: int, i: int, key_cache_layer: List[List[int]], q: List[int], score: int, timestep: int, token_position: int):\n    return i >= 0 and i <= head_size and score == reduce_sum(vec_slice(q, head * head_size, head * head_size + i)) * reduce_sum(matrix_col_slice(matrix_row_slice(key_cache_layer, timestep, timestep+1), head * head_size, head * head_size + i)[0])\n"]}
