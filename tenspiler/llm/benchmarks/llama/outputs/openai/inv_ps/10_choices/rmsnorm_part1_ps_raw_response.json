{"rmsnorm_part1": ["\ndef rmsnorm_part1(input: List[int], weight: List[int]) -> int:\n    return reduce_sum(vec_elemwise_mul(input, input))\n\n\n\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\n#defined functions\ndef reduce_sum_square(x: List[int]) -> int:\n    return 0 if len(x) < 1 else x[0]*x[0] + reduce_sum_square(x[1:])\n\ndef rmsnorm_part1(input: List[int], weight: List[int]) -> int:\n    return ss = reduce_sum_square(input)\n\n\n\ndef invariant1(i: int, input: List[int], ss: int) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum_square(input[:i])\n", "\ndef rmsnorm_part1(input: List[int], weight: List[int]) -> int:\n    return reduce_sum(vec_elemwise_mul(input, input))\n\n\n\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef rmsnorm_part1(input: List[int], weight: List[int]) -> int:\n    return reduce_sum(vec_elemwise_mul(input, input))\n\n\n\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\n#Rewritten function\ndef rmsnorm_part1(input: List[int], weight: List[int]) -> int:\n    return reduce_sum(vec_elemwise_mul(input, input))\n\n#Loop Invariant\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef rmsnorm_part1(input: List[int], weight: List[int]) -> int:\n    return reduce_sum(vec_elemwise_mul(input, input))\n\n\n\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef rmsnorm_part1(input: List[int], weight: List[int]) -> int:\n    return reduce_sum(vec_elemwise_mul(input, input))\n\n\n\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef rmsnorm_part1(input: List[int], weight: List[int]) -> int:\n    return reduce_sum(vec_elemwise_mul(input, input))\n\n\n\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef rmsnorm_part1(input: List[int], weight: List[int]) -> int:\n    return reduce_sum(vec_elemwise_mul(input, input))\n\n\n\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\n#defined function\ndef reduce_sum_squares(x: List[int]) -> int:\n    return 0 if len(x) < 1 else x[0]*x[0] + reduce_sum_squares(x[1:])\n\ndef rmsnorm_part1(input: List[int], weight: List[int]) -> int:\n    return ss = reduce_sum_squares(input)\n\n\n\n#Outer loop invariant\ndef invariant(i: int, input: List[int], ss: int) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum_squares(input[:i])\n"]}
