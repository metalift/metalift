[
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\nfrom typing import List\n\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_slice(vec_map(vec_scalar_sub(max_val, input), integer_exp), 0, max_pos)\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\n\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_slice(vec_map(vec_scalar_sub(max_val, input), integer_exp), 0, max_pos)\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_slice(vec_map(vec_scalar_sub(max_val, input), integer_exp), 0, max_pos)\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\nfrom typing import List\n\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return reduce_sum(vec_elemwise_sub(vec_map(input[:max_pos], lambda x: integer_exp(x)), vec_scalar_mul(max_val, input[:max_pos])))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return_var = vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n    return return_var\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_slice(vec_map(input, lambda x: integer_exp(x - max_val)), 0, max_pos)\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n# Rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return reduce_sum(vec_slice(vec_map(vec_scalar_sub(max_val, input), integer_exp), 0, max_pos))\n```",
    "```python\n#Rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\nfrom typing import List, Callable\n\ndef softmax_part2(integer_exp: Callable[[int], int], input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\nfrom typing import List\n\ndef integer_exp(x: int) -> int:\n    return x\n\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return_var = vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n    return return_var\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function in Python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return return_var = vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\n\nfrom typing import List\n\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    integer_exp = lambda x: x\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\nfrom typing import List\n\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_slice(vec_map(vec_scalar_sub(max_val, input), integer_exp), 0, max_pos)\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_slice(vec_map(vec_scalar_sub(max_val, input), integer_exp), 0, max_pos)\n```",
    "```python\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```",
    "```python\n#rewritten function\ndef softmax_part2(input: List[int], max_pos: int, max_val: int) -> List[int]:\n    return vec_map(vec_slice(input, 0, max_pos), lambda x: integer_exp(x - max_val))\n```"
]
