{"softmax_part4": ["\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_elemwise_div(vec_slice(unnormalized_output, 0, max_pos), [sum]*max_pos)\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, unnormalized_output[:max_pos])\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_elemwise_div(vec_slice(unnormalized_output, 0, max_pos), vec_scalar_mul(sum, vec_slice(unnormalized_output, 0, max_pos)))\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, unnormalized_output[:max_pos])\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, unnormalized_output[:max_pos])\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n"]}
