[
    "Based on the example and the provided information, the loop invariant for the softmax_part2 function could be as follows:\n\n```python\ndef invariant(input: List[int], output: List[int], i:int, max_pos: int, max_val: int):\n    return i >= 0 and i <= max_pos and output == vec_map(vec_scalar_sub(max_val, list_slice(input, 0, i)), integer_exp)\n```\n\nThe invariant suggests that for each iteration from 0 to `max_pos`, `output` is the result of applying the function `integer_exp` to the result of subtracting `max_val` from each element in the slice of `input` from 0 to `i`, which is the current iteration of the loop. \n\nThis boolean formula returns true for each loop iteration, which means that it's an accurate representation of what's happening inside the loop. \n\nThe `output` vector is being constructed by adding the result of `integer_exp(input[i] - max_val)` for each `i` from 0 to `max_pos`. The invariant formula reflects this by slicing the `input` list from 0 to `i` and applying the same operation, resulting in a list that matches `output` at every loop iteration."
]
