{"darken_blend_8": ["\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, min)\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, min)\n", "\nfrom typing import List\n\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, min)\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, min)\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, min)\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, min)\n", "\nfrom typing import List\n\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, min)\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, min)\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: x if x < y else y\n    )\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, min)\n"]}
