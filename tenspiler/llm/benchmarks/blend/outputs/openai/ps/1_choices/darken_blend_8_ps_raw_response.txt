The `darken_blend_8` function in C++ applies the darken blend operation on two images represented as matrices. The darken blend operation selects the darker pixel from the base and active images for each position in the matrix.

In Python, you can rewrite this using the `matrix_selection_two_args` function defined above. This function applies a given selection operation on two matrices. The selection operation is given as a lambda function that takes two arguments and returns the smaller of the two, i.e., the darker pixel.

Here is how you can rewrite the `darken_blend_8` function in Python:

```python
def darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_selection_two_args(base, active, lambda x, y: x if x < y else y)
```

The lambda function `lambda x, y: x if x < y else y` is equivalent to the if-else condition in the original C++ function. It selects the smaller of the two pixels. The `matrix_selection_two_args` function applies this operation to each corresponding pair of pixels in the base and active matrices.
The given C++ function `darken_blend_8` is performing element-wise minimum operation between two 2D vectors `base` and `active`. It iterates over each row and column of the input 2D vectors, and for each corresponding pair of elements, it pushes the minimum value into a new 2D vector.

Here is the Python equivalent using the provided functions:

```python
def darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_selection_two_args(base, active, min)
```
In this Python version, we are using the function `matrix_selection_two_args` which iterates element-wise over the matrices `base` and `active` and applies the function `min` on each pair of corresponding elements, which is equivalent to the behavior of the original C++ function.
