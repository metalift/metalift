[
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_elemwise_mul(\n            matrix_elemwise_mul(\n                vec_scalar_mul(2, base),\n                ite(\n                    matrix_scalar_sub(128, base),\n                    matrix_scalar_div(32, vec_scalar_mul(2, base)),\n                    vec_scalar_sub(32, matrix_scalar_div(32, vec_scalar_mul(2, base)))\n                )\n            ),\n            ite(\n                matrix_scalar_sub(128, base),\n                matrix_scalar_div(32, vec_scalar_mul(2, base)),\n                vec_scalar_sub(32, matrix_scalar_div(32, vec_scalar_mul(2, base)))\n            ),\n            lambda x, y: x + y\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda pixel, _: ite(\n            pixel >= 128, \n            2 * pixel + pixel - 2 * pixel * pixel // 32 - 32, \n            2 * pixel * pixel // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_elemwise_mul(\n            matrix_elemwise_mul(\n                matrix_scalar_mul(2, base),\n                ite(\n                    reduce_max(firsts(base)) >= 128,\n                    vec_elemwise_sub(\n                        matrix_scalar_mul(2, base),\n                        vec_elemwise_div(\n                            matrix_elemwise_mul(\n                                matrix_scalar_mul(2, base),\n                                matrix_scalar_mul(2, base)\n                            ),\n                            vec_scalar_add(32, [])\n                        )\n                    ),\n                    vec_scalar_mul(32, [])\n                )\n            ),\n            ite(\n                reduce_max(firsts(base)) >= 128,\n                matrix_scalar_sub(\n                    32,\n                    vec_elemwise_div(\n                        matrix_elemwise_mul(\n                            matrix_scalar_mul(2, base),\n                            matrix_scalar_mul(2, base)\n                        ),\n                        vec_scalar_add(32, [])\n                    )\n                ),\n                []\n            )\n        ),\n        matrix_elemwise_mul(\n            matrix_scalar_mul(2, base),\n            ite(\n                reduce_max(firsts(base)) >= 128,\n                vec_elemwise_sub(\n                    matrix_scalar_mul(2, base),\n                    vec_elemwise_div(\n                        matrix_elemwise_mul(\n                            matrix_scalar_mul(2, base),\n                            matrix_scalar_mul(2, base)\n                        ),\n                        vec_scalar_add(32, [])\n                    )\n                ),\n                vec_scalar_mul(32, [])\n            )\n        ),\n        lambda x, y: x * y\n    )\n```\n",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda b, a: ite(\n            b >= 128,\n            2 * b + b - 2 * b * b // 32 - 32,\n            2 * b * b // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, base, lambda x, y: ite(x >= 128, 2 * x + x - 2 * x * x // 32 - 32, 2 * x * x // 32))\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_sub(\n            vec_elemwise_mul(\n                matrix_scalar_mul(2, base),\n                ite(\n                    matrix_scalar_div(32, matrix_elemwise_mul(base, base)),\n                    matrix_scalar_sub(32, matrix_scalar_mul(2, base)),\n                    matrix_scalar_mul(2, base),\n                ),\n            ),\n            matrix_scalar_mul(32, base),\n        ),\n        lambda x, y: y if x >= 128 else x,\n    )\n```\n",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, base, \n                                     lambda x, y: ite(x >= 128, \n                                                      2 * x + x - 2 * x * x // 32 - 32, \n                                                      2 * x * x // 32))\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda pixel_base, _: ite(\n            pixel_base >= 128, \n            2 * pixel_base + pixel_base - 2 * pixel_base * pixel_base // 32 - 32, \n            2 * pixel_base * pixel_base // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda a, b: ite(\n            a >= 128,\n            2 * a + a - 2 * a * a // 32 - 32,\n            2 * a * a // 32\n        )\n    )\n```",
    "```python\n# Python equivalent of the C++ function\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_elemwise_sub(\n            matrix_elemwise_add(\n                vec_scalar_mul(2, base),\n                vec_scalar_sub(32, matrix_elemwise_div(vec_scalar_mul(2, matrix_elemwise_mul(base, base)), vec_scalar_mul(32, base)))\n            ),\n            matrix_elemwise_mul(vec_scalar_mul(2, base), vec_scalar_div(base, 32))\n        ),\n        ite(base >= 128, True, False)\n    )\n```",
    "```python\n#rewritten function\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_elemwise_sub(\n            matrix_elemwise_add(\n                vec_scalar_mul(2, base),\n                vec_scalar_sub(32, matrix_elemwise_mul(vec_scalar_mul(2, base), base))\n            ),\n            matrix_elemwise_div(vec_scalar_mul(2, base), vec_scalar_mul(32, base))\n        ),\n        base,\n        lambda x, y: ite(x >= 128, x, y)\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, _: ite(\n            base_pixel >= 128, \n            2 * base_pixel + base_pixel - 2 * base_pixel * base_pixel // 32 - 32,\n            2 * base_pixel * base_pixel // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        matrix_elemwise_sub(\n            matrix_elemwise_add(\n                vec_scalar_mul(2, base), \n                matrix_elemwise_sub(\n                    vec_scalar_mul(2, matrix_elemwise_mul(base, base)), \n                    vec_scalar_mul(32, base)\n                )\n            ), \n            vec_scalar_mul(32, base)\n        ), \n        lambda x, y: ite(x >= 128, y, (2 * x * x) // 32)\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_sub(\n            32,\n            matrix_elemwise_div(\n                vec_elemwise_mul(\n                    vec_scalar_mul(2, base),\n                    base\n                ),\n                vec_scalar_add(32, [])\n            )\n        ),\n        matrix_elemwise_sub(\n            vec_elemwise_add(\n                vec_scalar_mul(2, base),\n                base\n            ),\n            matrix_elemwise_div(\n                vec_elemwise_mul(\n                    vec_scalar_mul(2, base),\n                    base\n                ),\n                vec_scalar_add(32, [])\n            )\n        ),\n        lambda x, y: ite(\n            x >= 128,\n            y,\n            x\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda pixel1, pixel2: ite(\n            pixel1 >= 128,\n            2 * pixel1 + pixel1 - 2 * vec_elemwise_div(vec_elemwise_mul([pixel1], [pixel1]), [32])[0] - 32,\n            2 * vec_elemwise_div(vec_elemwise_mul([pixel1], [pixel1]), [32])[0]\n        )\n    )\n```",
    "```python\n#rewritten function\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base, active: ite(\n            base >= 128,\n            2 * base + base - 2 * base * base // 32 - 32,\n            2 * base * base // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * reduce_mul(vec_scalar_div(x, [32])) - 32,\n            2 * reduce_mul(vec_scalar_div(vec_elemwise_mul(x, x), [32])),\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, base, lambda x, y: ite(x >= 128, 2 * x + x - 2 * x * x // 32 - 32, 2 * x * x // 32))\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def overlay_blend_pixel(pixel_value: int) -> int:\n        return ite(pixel_value >= 128, \n                   2 * pixel_value + pixel_value - 2 * pixel_value * pixel_value // 32 - 32, \n                   2 * pixel_value * pixel_value // 32)\n    return vec_map(base, overlay_blend_pixel)\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda pixel_base, pixel_active: ite(\n            pixel_base >= 128,\n            2 * pixel_base + pixel_base - 2 * pixel_base * pixel_base // 32 - 32,\n            2 * pixel_base * pixel_base // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_elemwise_add(\n            matrix_elemwise_mul(\n                vec_scalar_mul(2, base), \n                ite(\n                    matrix_elemwise_add(base, vec_scalar_mul(-128, ones_like(base))) >= 0, \n                    base, \n                    vec_scalar_mul(0, base)\n                )\n            ), \n            matrix_elemwise_mul(\n                vec_scalar_mul(-2, base), \n                vec_elemwise_div(\n                    matrix_elemwise_mul(base, base), \n                    vec_scalar_mul(32, ones_like(base))\n                )\n            )\n        ),\n        matrix_elemwise_mul(\n            vec_scalar_mul(2, base), \n            vec_elemwise_div(\n                matrix_elemwise_mul(base, base), \n                vec_scalar_mul(32, ones_like(base))\n            )\n        ), \n        lambda x, y: x if x >= 128 else y\n    )\n```",
    "```python\n# Rewritten function\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_elem, active_elem: ite(\n            base_elem >= 128,\n            2 * base_elem + base_elem - 2 * base_elem * base_elem // 32 - 32,\n            2 * base_elem * base_elem // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, base, lambda x, y: ite(x >= 128, 2 * x + x - 2 * x * x // 32 - 32, 2 * x * x // 32))\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_elemwise_mul(vec_scalar_mul(2, base), base),\n        matrix_elemwise_sub(\n            matrix_elemwise_add(vec_scalar_mul(2, base), base),\n            matrix_elemwise_div(vec_scalar_mul(2, matrix_elemwise_mul(base, base)), vec_scalar_add(32, []))\n        ),\n        lambda a, b: ite(a >= 128, b, a)\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, base, lambda x, y: ite(x >= 128, 2 * x + x - 2 * x * x // 32 - 32, 2 * x * x // 32))\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, _: ite(\n            base_pixel >= 128, \n            2 * base_pixel + base_pixel - 2 * base_pixel * base_pixel // 32 - 32,\n            2 * base_pixel * base_pixel // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32\n        )\n    )\n```\n",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, base, lambda x, y: ite(x>=128, 2*x + x - 2*x*x//32 - 32, 2*x*x//32))\n```",
    "```python\nfrom typing import List\n\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def blend_pixel(pixel: int) -> int:\n        return ite(pixel >= 128, 2 * pixel + pixel - 2 * pixel * pixel // 32 - 32, 2 * pixel * pixel // 32)\n\n    return matrix_selection_two_args(base, active, lambda x, y: blend_pixel(x))\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda x, y: ite(\n                x >= 128, \n                2 * x + x - 2 * x * x // 32 - 32, \n                2 * x * x // 32\n            )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda x, y: ite(\n            x >= 128, \n            2 * x + x - 2 * x * x // 32 - 32, \n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_sub(\n            matrix_elemwise_mul(\n                base, \n                vec_map(\n                    reduce_sum(base),\n                    lambda x: 2 * x if x < 128 else 2 * x + x - 2 * x * x // 32 - 32\n                )\n            ),\n            matrix_scalar_mul(\n                32,\n                matrix_elemwise_mul(\n                    base, \n                    base\n                )\n            )\n        ),\n        lambda x, y: x\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_sub(\n            matrix_elemwise_mul(\n                matrix_elemwise_sub(\n                    vec_scalar_mul(2, base), \n                    matrix_elemwise_div(\n                        matrix_elemwise_mul(\n                            vec_scalar_mul(2, base), \n                            base\n                        ), \n                        vec_scalar_mul(32, base)\n                    )\n                ),\n                vec_scalar_mul(32, base)\n            ),\n            vec_scalar_mul(32, base)\n        ),\n        lambda x, y: ite(x >= 128, y, matrix_elemwise_div(matrix_elemwise_mul(vec_scalar_mul(2, base), base), vec_scalar_mul(32, base)))\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_mul(\n            matrix_elemwise_mul(base, base),\n            matrix_scalar_div(2, matrix_scalar_mul(32, matrix_scalar_mul(2, base)))\n        ),\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            y\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def blend_pixel(pixel: int) -> int:\n        return ite(pixel >= 128, 2*pixel + pixel - 2*pixel*pixel//32 - 32, 2*pixel*pixel//32)\n    return matrix_selection_two_args(base, active, blend_pixel)\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda pixel, _: ite(\n            pixel >= 128,\n            2 * pixel + pixel - 2 * pixel * pixel // 32 - 32,\n            2 * pixel * pixel // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, _: (\n            ite(\n                base_pixel >= 128, \n                2 * base_pixel + base_pixel - 2 * base_pixel * base_pixel // 32 - 32, \n                2 * base_pixel * base_pixel // 32\n            )\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda x, y: ite(\n            x >= 128, \n            2 * x + x - 2 * x * x // 32 - 32, \n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]):\n    return matrix_selection_two_args(base, base, lambda x, y: ite(x >= 128, 2 * x + y - 2 * x * x // 32 - 32, 2 * x * x // 32))\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_sub(\n            vec_elemwise_mul(\n                matrix_scalar_mul(2, base),\n                ite(\n                    matrix_elemwise_mul(base, base),\n                    matrix_scalar_div(32, base),\n                    matrix_scalar_sub(32, matrix_scalar_mul(2, base))\n                )\n            ),\n            lambda x, y: x if x >= 128 else y\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + y - 2 * x * y // 32 - 32,\n            2 * x * y // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_scalar_mul(\n            2,\n            matrix_elemwise_sub(\n                base,\n                matrix_elemwise_div(\n                    matrix_elemwise_mul(\n                        matrix_scalar_mul(2, base),\n                        base\n                    ),\n                    vec_scalar_mul(32, vec_elemwise_mul(base, base))\n                )\n            )\n        ),\n        lambda x, y: ite(x >= 128, y, x)\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n\n    def blend_pixel(x: int, y: int) -> int:\n\n        return ite(x >= 128, \n                   2 * x + x - 2 * x * x // 32 - 32, \n                   2 * x * x // 32)\n\n    return matrix_selection_two_args(base, active, blend_pixel)\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, _: ite(\n            base_pixel >= 128,\n            2 * base_pixel + base_pixel - 2 * base_pixel * base_pixel // 32 - 32,\n            2 * base_pixel * base_pixel // 32,\n        ),\n    )\n```",
    "```python\n# Python function equivalent to the given C++ function\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda x, y: ite(\n            x >= 128, \n            2 * x + x - 2 * x * x // 32 - 32, \n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda x, y: ite(\n            x >= 128, \n            2 * x + x - 2 * x * x // 32 - 32, \n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_mul(\n            base,\n            ite(\n                matrix_elemwise_mul(base, base),\n                matrix_scalar_mul(2, matrix_elemwise_div(base, [32])),\n                matrix_elemwise_sub(\n                    matrix_elemwise_add(\n                        matrix_scalar_mul(2, base),\n                        matrix_scalar_sub(\n                            matrix_scalar_mul(2, matrix_elemwise_mul(base, base)),\n                            matrix_scalar_mul(32, base)\n                        )\n                    ),\n                    matrix_scalar_mul(32, base)\n                )\n            )\n        ),\n        lambda x, y: y\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda pixel1, pixel2: ite(\n            pixel1 >= 128,\n            2 * pixel1 + pixel1 - 2 * pixel1 * pixel1 // 32 - 32,\n            2 * pixel1 * pixel1 // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def blend_pixel(base_pixel: int) -> int:\n        return ite(\n            base_pixel >= 128,\n            2 * base_pixel + base_pixel - 2 * base_pixel * base_pixel // 32 - 32,\n            2 * base_pixel * base_pixel // 32,\n        )\n\n    return vec_map(base, blend_pixel)\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, base, \n                                     lambda base_val, _: ite(base_val >= 128, \n                                                             2 * base_val + base_val - 2 * base_val * base_val // 32 - 32, \n                                                             2 * base_val * base_val // 32))\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_sub(\n            matrix_elemwise_mul(\n                matrix_scalar_mul(2, base),\n                ite(\n                    matrix_elemwise_mul(\n                        matrix_scalar_mul(2, base),\n                        matrix_scalar_div(32, base)\n                    ),\n                    matrix_scalar_add(32, matrix_elemwise_sub(\n                        matrix_scalar_mul(2, base),\n                        matrix_elemwise_mul(\n                            matrix_scalar_mul(2, base),\n                            matrix_scalar_div(32, base)\n                        )\n                    )),\n                    matrix_elemwise_mul(\n                        matrix_scalar_mul(2, base),\n                        matrix_scalar_div(32, base)\n                    ),\n                )\n            )\n        ),\n        lambda x, y: x if x >= 128 else y\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda b, _: ite(\n            b >= 128,\n            2 * b + b - 2 * b * b // 32 - 32,\n            2 * b * b // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, active,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda row, col: ite(\n            row >= 128,\n            2 * row + row - 2 * row * row // 32 - 32,\n            2 * row * row // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda pixel_base, pixel_active: ite(\n            pixel_base >= 128,\n            2 * pixel_base + pixel_base - 2 * pixel_base * pixel_base // 32 - 32,\n            2 * pixel_base * pixel_base // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda pixel1, pixel2: ite(\n            pixel1 >= 128,\n            2 * pixel1 + pixel1 - 2 * pixel1 * pixel1 // 32 - 32,\n            2 * pixel1 * pixel1 // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda base_pixel, _: ite(\n            base_pixel >= 128, \n            2 * base_pixel + base_pixel - 2 * base_pixel * base_pixel // 32 - 32, \n            2 * base_pixel * base_pixel // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + y - 2 * y * y // 32 - 32,\n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda a, b: ite(\n            a >= 128,\n            2 * a + a - 2 * a * a // 32 - 32,\n            2 * a * a // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda a, b: ite(\n            a >= 128,\n            2 * a + a - 2 * a * a // 32 - 32,\n            2 * a * a // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_scalar_mul(2, matrix_elemwise_sub(base, matrix_elemwise_div(matrix_elemwise_mul(matrix_scalar_mul(2, base), base), [32 for _ in base[0]])),\n        lambda x, y: y if x >= 128 else 2 * x * x // 32\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, base,\n        lambda pixel_base1, pixel_base2: ite(\n            pixel_base1 >= 128,\n            2 * pixel_base1 + pixel_base2 - 2 * pixel_base2 * pixel_base2 // 32 - 32,\n            2 * pixel_base1 * pixel_base2 // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32\n        )\n    )\n```\n",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        (lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32\n        ))\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        matrix_elemwise_sub(\n            vec_elemwise_mul(\n                vec_scalar_mul(2, base), \n                ite(\n                    matrix_elemwise_mul(base, base), \n                    matrix_elemwise_sub(\n                        vec_scalar_mul(2, base), \n                        vec_elemwise_div(\n                            vec_elemwise_mul(\n                                vec_scalar_mul(2, base), \n                                base\n                            ), \n                            vec_scalar_add(32, [])\n                        )\n                    ), \n                    vec_scalar_sub(32, [])\n                )\n            ), \n            vec_scalar_mul(2, base)\n        ), \n        lambda x, y: ite(x >= 128, y, x)\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda pixel_base, _: ite(\n            pixel_base >= 128,\n            2 * pixel_base + pixel_base - 2 * pixel_base * pixel_base // 32 - 32,\n            2 * pixel_base * pixel_base // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda x, y: ite(\n            x >= 128, \n            2 * x + y - 2 * x * y // 32 - 32, \n            2 * x * y // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_elemwise_mul(\n            matrix_scalar_mul(2, base),\n            ite(\n                matrix_elemwise_mul(base, base),\n                matrix_scalar_div(32, base),\n                matrix_scalar_sub(32, matrix_elemwise_mul(matrix_scalar_mul(2, base), base))\n            )\n        ),\n        matrix_elemwise_mul(\n            matrix_scalar_mul(2, base),\n            matrix_scalar_div(32, base)\n        ),\n        lambda x, y: ite(x >= 128, x, y)\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base, active):\n    return_var = matrix_selection_two_args(\n        base,\n        base,\n        lambda x, _: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n    return return_var\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda pixel1, pixel2: ite(\n            pixel1 >= 128,\n            2 * pixel1 + pixel1 - 2 * vec_elemwise_mul([pixel1], [pixel1])[0] // 32 - 32,\n            2 * vec_elemwise_mul([pixel1], [pixel1])[0] // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_elemwise_mul(\n            matrix_elemwise_sub(\n                matrix_elemwise_mul(base, base),\n                matrix_scalar_mul(32, base)\n            ),\n            matrix_scalar_sub(2, matrix_scalar_div(2, base))\n        ),\n        matrix_elemwise_mul(\n            matrix_elemwise_sub(\n                matrix_elemwise_mul(base, base),\n                matrix_scalar_mul(32, base)\n            ),\n            matrix_scalar_div(2, base)\n        ),\n        lambda x, y: ite(x >= 128, y, x)\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, base, lambda x, y: ite(x >= 128, 2 * x + x - 2 * x * x // 32 - 32, 2 * x * x // 32))\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        base, \n        lambda a, b: ite(\n            a >= 128, \n            2 * a + a - 2 * a * a // 32 - 32, \n            2 * a * a // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_mul(\n            base,\n            ite(\n                reduce_max(base) >= 128,\n                matrix_elemwise_sub(\n                    vec_scalar_mul(2, base),\n                    vec_elemwise_div(\n                        vec_scalar_mul(\n                            2, matrix_elemwise_mul(base, base)\n                        ),\n                        vec_scalar_mul(32, base)\n                    )\n                ),\n                vec_elemwise_div(\n                    vec_scalar_mul(\n                        2, matrix_elemwise_mul(base, base)\n                    ),\n                    vec_scalar_mul(32, base)\n                )\n            )\n        ),\n        lambda x, y: y\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_elemwise_sub(\n            matrix_elemwise_add(\n                vec_scalar_mul(2, base),\n                vec_scalar_mul(-2, matrix_elemwise_div(matrix_elemwise_mul(base, base), vec_scalar_mul(32, base)))\n            ),\n            matrix_scalar_add(-32, vec_scalar_mul(2, base)),\n            lambda x, y: ite(x >= 128, y, matrix_elemwise_div(matrix_elemwise_mul(vec_scalar_mul(2, base), base), vec_scalar_mul(32, base)))\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_scalar_mul(\n            2,\n            matrix_elemwise_sub(\n                base,\n                matrix_elemwise_div(\n                    matrix_elemwise_mul(\n                        matrix_scalar_mul(2, base),\n                        base\n                    ),\n                    vec_scalar_mul(32, [[1]*len(base[0])]*len(base))\n                )\n            )\n        ),\n        lambda x, y: ite(\n            x >= 128,\n            y,\n            2 * x * x // 32\n        )\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_sub(\n            matrix_elemwise_mul(\n                matrix_scalar_mul(2, base),\n                ite(\n                    matrix_elemwise_sub(\n                        matrix_scalar_mul(2, base),\n                        matrix_elemwise_mul(\n                            matrix_scalar_mul(2, base),\n                            matrix_scalar_div(32, base)\n                        )\n                    ),\n                    matrix_scalar_sub(32, matrix_scalar_mul(2, base)),\n                    matrix_scalar_mul(2, matrix_scalar_div(32, base))\n                )\n            ),\n            matrix_scalar_mul(32, base)\n        ),\n        lambda x, y: ite(x >= 128, y, x)\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_sub(\n            vec_elemwise_mul(\n                matrix_elemwise_sub(\n                    matrix_scalar_mul(2, base),\n                    matrix_elemwise_div(\n                        matrix_scalar_mul(2, matrix_elemwise_mul(base, base)),\n                        scalar_vec_sub(32, [])\n                    )\n                ),\n                scalar_vec_sub(32, [])\n            ),\n            matrix_elemwise_div(\n                matrix_scalar_mul(2, matrix_elemwise_mul(base, base)),\n                scalar_vec_sub(32, [])\n            )\n        ),\n        lambda x, y: ite(x >= 128, y, x)\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        base,\n        lambda x, y: ite(\n            x >= 128,\n            2 * x + x - 2 * x * x // 32 - 32,\n            2 * x * x // 32,\n        ),\n    )\n```",
    "```python\n#rewritten function\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_mul(\n            matrix_scalar_mul(2, base),\n            ite(\n                matrix_scalar_sub(128, base),\n                matrix_elemwise_sub(\n                    matrix_scalar_mul(2, base),\n                    vec_scalar_div(\n                        matrix_elemwise_mul(matrix_scalar_mul(2, base), base),\n                        32,\n                    ),\n                ),\n                vec_scalar_div(\n                    matrix_elemwise_mul(matrix_scalar_mul(2, base), base),\n                    32,\n                ),\n            ),\n        ),\n        lambda x, y: x if x >= 128 else y,\n    )\n```\n",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        matrix_elemwise_mul(\n            matrix_elemwise_mul(\n                matrix_scalar_mul(2, base),\n                ite(reduce_max(base) >= 128, base, matrix_scalar_div(32, base))\n            ),\n            scalar_matrix_div(32, scalar_matrix_sub(2 * reduce_max(base) + reduce_max(base), matrix_scalar_mul(2, matrix_scalar_mul(reduce_max(base), base))))\n        ),\n        lambda x, y: ite(x >= 128, y - 32, y)\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_elemwise_mul(\n            matrix_elemwise_sub(base, matrix_scalar_mul(2, matrix_elemwise_div(matrix_elemwise_mul(base, base), [32 for _ in range(len(base[0]))]))),\n            [32 for _ in range(len(base[0]))]\n        ),\n        matrix_elemwise_sub(\n            matrix_elemwise_add(matrix_elemwise_mul(base, [2 for _ in range(len(base[0]))]), base),\n            matrix_elemwise_mul(\n                matrix_elemwise_mul(base, [2 for _ in range(len(base[0]))]),\n                matrix_elemwise_div(matrix_elemwise_mul(base, base), [32 for _ in range(len(base[0]))])\n            )\n        ),\n        ite\n    )\n```",
    "```python\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, base, lambda x, y: ite(x >= 128, 2 * x + x - 2 * x * x // 32 - 32, 2 * x * x // 32))\n```"
]