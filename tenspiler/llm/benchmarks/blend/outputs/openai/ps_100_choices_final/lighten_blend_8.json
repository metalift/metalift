[
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(x < y, y, x))\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\nfrom typing import List\n\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(x < y, y, x))\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, active, lambda x, y: ite(x < y, y, x)\n    )\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(x < y, y, x))\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    \n    return matrix_selection_two_args(base, active, lambda x, y: ite(x < y, y, x))\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(x < y, y, x))\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\n#rewritten function\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: y if x < y else x)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base, active):\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```",
    "```python\ndef lighten_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, max)\n```"
]
