[
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda b, a: ite(a == 32, 32, b // (32 - a))\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n\n    def pixel_dodge(base_pixel: int, active_pixel: int) -> int:\n        return ite(active_pixel == 32, 32, base_pixel // (32 - active_pixel))\n\n    return matrix_selection_two_args(base, active, pixel_dodge)\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(y == 32, 32, x // (32 - y))\n    )\n```\n",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, active, lambda x, y: ite(y == 32, 32, x // (32 - y))\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_pixel, active_pixel: ite(active_pixel == 32, 32, base_pixel // (32 - active_pixel)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(y == 32, 32, x // (32 - y))\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda a, b: ite(b == 32, 32, a // (32 - b)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32, 32, base_pixel // (32 - active_pixel)\n        ),\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32, 32, base_pixel // (32 - active_pixel)\n        ),\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32, 32, base_pixel // (32 - active_pixel)\n        ),\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_pixel, active_pixel: ite(active_pixel == 32, 32, base_pixel // (32 - active_pixel)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(y == 32, 32, x // (32 - y))\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda x, y: ite(y == 32, 32, x // (32 - y))\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\n#rewritten python function\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda x, y: ite(y == 32, 32, x // (32 - y))\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32, 32, base_pixel // (32 - active_pixel)\n        ),\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda pixel_base, pixel_active: ite(pixel_active == 32, 32, pixel_base // (32 - pixel_active)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_val, active_val: ite(active_val == 32, 32, base_val // (32 - active_val))\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base, active: ite(active == 32, 32, base // (32 - active))\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32, 32, base_pixel // (32 - active_pixel)\n        ),\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32,\n            32,\n            vec_elemwise_div(base_pixel, 32 - active_pixel)[0]\n        )\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x//(32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda pixel_base, pixel_active: ite(pixel_active == 32, 32, pixel_base // (32 - pixel_active)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32, \n            32, \n            base_pixel // (32 - active_pixel)\n        )\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda p1, p2: ite(p2==32, 32, p1//(32-p2)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32, \n            32, \n            base_pixel // (32 - active_pixel)\n        )\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base, active: ite(\n            active == 32, \n            32, \n            base // (32 - active)\n        )\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\n#rewritten function\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\n# Rewritten function\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_mul(32, matrix_elemwise_div(base, matrix_scalar_sub(32, active))),\n        scalar_matrix_mul(32, matrix_elemwise_eq(active, scalar_vec_mul(32, ones_like(active)))),\n        ite\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32,\n            32,\n            base_pixel // (32 - active_pixel)\n        )\n    )\n```\n",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_value, active_value: ite(\n            active_value == 32,\n            32,\n            base_value // (32 - active_value),\n        ),\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base, active: ite(active == 32, 32, base // (32 - active)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda pixel_base, pixel_active: ite(pixel_active == 32, 32, pixel_base // (32 - pixel_active)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32, \n            32, \n            base_pixel // (32 - active_pixel)\n        )\n    )\n```\n",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y==32, 32, x//(32-y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda pixel_base, pixel_active: ite(pixel_active == 32, 32, pixel_base // (32 - pixel_active)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x//(32-y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda b, a: ite(a == 32, 32, b // (32 - a)),\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\n#rewritten function\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(active, matrix_elemwise_div(base, matrix_scalar_sub(32, active)), lambda x, y: ite(x == 32, 32, y))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y==32, 32, x//(32-y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\n#rewritten function\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32,\n            32,\n            vec_elemwise_div(base_pixel, vec_scalar_sub(32, active_pixel))\n        )\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda x, y: ite(y == 32, 32, x // (32 - y))\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda x, y: ite(y == 32, 32, x // (32 - y))\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda x, y: ite(y == 32, 32, x // (32 - y))\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32,\n            32,\n            base_pixel // (32 - active_pixel)\n        )\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 32, 32, x // (32 - y)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 32,\n            32,\n            base_pixel // (32 - active_pixel)\n        )\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_val, active_val: ite(\n            active_val == 32, 32, base_val // (32 - active_val)\n        ),\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda pixel_base, pixel_active: ite(\n            pixel_active == 32,\n            32,\n            pixel_base // (32 - pixel_active)\n        )\n    )\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 32, 32, b // (32 - a)))\n```",
    "```python\ndef color_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda x, y: ite(y == 32, 32, x // (32 - y))\n    )\n```"
]
