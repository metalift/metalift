[
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_elemwise_mul(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base)))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1-opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(\n        vec_scalar_mul(opacity, active),\n        vec_scalar_mul(1 - opacity, base),\n    )\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1-opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return_vec = vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))\n    return return_vec\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1-opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1-opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1-opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function in python\ndef normal_blend_f(base, active, opacity):\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1-opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((1 - opacity), base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1-opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]: \n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\n#rewritten function\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```",
    "```python\ndef normal_blend_f(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(1 - opacity, base))\n```"
]
