[
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        scalar_matrix_div(32, active),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```\n",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, active)),\n        lambda x, y: ite(y != 0, x, y)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base, active: ite(active == 0, 32, 32 - (32 - base) // active))\n```",
    "```python\n# Rewritten function\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, matrix_scalar_div(1, active))),\n        ite\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 0, 32, 32 - (32 - b) // a))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    select_two_args_arg = lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y)\n    return matrix_selection_two_args(base, active, select_two_args_arg)\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base, active: ite(active == 0, 32, 32 - (32 - base) // active))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 0, 32, 32 - (32 - b) // a))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    # define function to apply to each pair of elements in base and active\n    def color_burn_8_helper(base_val: int, active_val: int) -> int:\n        return ite(active_val == 0, 32, 32 - (32 - base_val) // active_val)\n\n    return matrix_selection_two_args(base, active, color_burn_8_helper)\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, base),\n            active\n        )),\n        matrix_scalar_mul(32, matrix_transpose([[0] * len(base[0])] * len(base))),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(ite(matrix_elemwise_mul(active, active) == [], base, active), active)),\n        lambda base, active: ite(active == 0, base, active)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, scalar_matrix_div(1, active)),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32,\n                          matrix_elemwise_div(\n                              matrix_elemwise_sub(32, base),\n                              ite(vec_elemwise_mul(active, active), active, vec_scalar_mul(32, active))\n                          )\n        ),\n        matrix_scalar_mul(32, active),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, [[0]])),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, active)),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, base),\n        active,\n        lambda x, y: ite(y == 0, 32, x - x // y),\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(\n            matrix_scalar_sub(1, vec_map(active, lambda x: ite(x == 0, 0, 1))),\n            matrix_scalar_sub(1, vec_map(active, lambda x: ite(x == 0, 1, 0))))),\n        lambda x, y: ite(y == 0, x, y)\n    )\n```\n",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, base), active)), \n        matrix_scalar_mul(32, matrix_elemwise_add(matrix_elemwise_mul(active, base), \n                                                   matrix_elemwise_mul(active, base))),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, base),\n            active\n        )),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, [[0]*len(active[0])]*len(active))),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda act, bas: ite(act == 0, 32, 32 - (32 - bas) // act))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base, active: ite(active == 0, 32, 32 - (32 - base) // active))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(\n            32,\n            matrix_elemwise_div(\n                matrix_scalar_sub(32, base),\n                ite(active == 0, 1, active),\n            ),\n        ),\n        active,\n        lambda x, y: 32 if y == 0 else x,\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, [[0]*len(active[0])]*len(active))),\n        lambda x, y: ite(y == 0, y, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, base), active)),\n        matrix_scalar_add(32, base),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y==0, 32, 32 - (32 - x) // y))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_div(1, vec_map(active, lambda x: ite(x == 0, 1, x)))),\n        ite\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_val, active_val: ite(active_val == 0, 32, 32 - (32 - base_val) // active_val))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, \n                                     lambda base, active: ite(active == 0, 32, 32 - (32 - base) // active))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda active, base: ite(active==0, 32, 32-(32-base)//active))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_pix, active_pix: ite(active_pix == 0, 32, 32 - (32 - base_pix) // active_pix))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_scalar_div(32, active)),\n        base,\n        lambda a, b: ite(b == 0, 32, a)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    select_two_args_arg = lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y)\n    return matrix_selection_two_args(base, active, select_two_args_arg)\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: ite(a == 0, 32, 32 - (32 - b) // a))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_add(active, active)),\n        ite\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, active),\n        lambda base, active: ite(active == 0, 32, base)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_pixel, active_pixel: ite(active_pixel == 0, 32, 32 - (32 - base_pixel) // active_pixel))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, active)),\n        ite\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 0, 32, 32 - (32 - b) // a))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 0, 32, 32 - (32 - b) // a))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n\n    def pixel_op(base_pixel: int, active_pixel: int) -> int:\n        return ite(active_pixel == 0, 32, 32 - (32 - base_pixel) // active_pixel)\n\n    return matrix_selection_two_args(base, active, pixel_op)\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)), \n        matrix_scalar_mul(32, matrix_elemwise_sub(matrix_scalar_mul(32, base), active)),\n        lambda x, y: ite(y == 0, x, y)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, active)),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_transpose([[1] * len(active[0])])),\n        ite\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_scalar_div(1, active)),\n        ite\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, [[0 if v == 0 else 1 for v in row] for row in active])),\n        ite,\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_pixel, active_pixel: ite(active_pixel == 0, 32, 32 - (32 - base_pixel) // active_pixel))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_add(32, base),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, base),\n        active,\n        lambda x, y: ite(\n            y == 0,\n            32,\n            x - vec_scalar_div(x - 32, y)\n        )\n    )\n```\n",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_sub(matrix_scalar_sub(32, base), active)),\n        ite\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active,\n                                     lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, [[0] * len(active[0])] * len(active))),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_val, active_val : ite(active_val == 0, 32, 32 - (32 - base_val) // active_val))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, base),\n        active,\n        lambda x, y: ite(y == 0, 32, x - scalar_vec_div(x - 32, y))\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_sub(matrix_scalar_sub(32, base), active)),\n        ite\n    )\n```",
    "```python\n#rewritten function\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, scalar_matrix_div(1, active)),\n        ite\n    )\n\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_val, active_val: ite(active_val == 0, 32, 32 - (32 - base_val) // active_val))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_sub(matrix_scalar_mul(1, base), matrix_scalar_mul(0, active))),\n        lambda x, y: ite(y == 0, x, y)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_div(1, active)),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: ite(a == 0, 32, 32 - (32 - b) // a))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_elem, active_elem: ite(\n            active_elem == 0,\n            32,\n            32 - (32 - base_elem) // active_elem\n        )\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, [[0]])),\n        ite\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_add(matrix_elemwise_mul(base, active), matrix_scalar_mul(32, base))),\n        lambda base, active: ite(active == 0, 32, base)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_pixel, active_pixel: ite(\n            active_pixel == 0,\n            32,\n            32 - (32 - base_pixel) // active_pixel,\n        ),\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        scalar_matrix_div(32, active),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, base), \n            active\n        )),\n        matrix_scalar_add(32, matrix_elemwise_mul(\n            matrix_scalar_sub(32, base), \n            vec_elemwise_add(vec_scalar_mul(0, active), vec_scalar_mul(1, active))\n        )),\n        lambda a, b: ite(b==0, a, b)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: ite(a == 0, 32, 32 - (32 - b) // a))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        scalar_matrix_sub(32, active),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_i, active_i: ite(active_i == 0, 32, 32 - (32 - base_i) // active_i))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, base), active)),\n        scalar_matrix_sub(32, active),\n        ite)\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_add(active, [[0]])),\n        lambda a, b: ite(b == 32, 32, a)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)), \n        matrix_scalar_mul(32, matrix_elemwise_mul(active, vec_map(vec_elemwise_sub(base, active), lambda x: ite(x == 0, 32, x)))), \n        lambda x, y: ite(y == 0, x, y))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, scalar_matrix_div(1, active)),\n        ite\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(\n            32, \n            matrix_elemwise_div(\n                matrix_scalar_sub(32, base), \n                active\n            )\n        ), \n        scalar_matrix_sub(32, active), \n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_scalar_div(1, ite_matrix(active, matrix_scalar_mul(0, active), matrix_scalar_mul(1, active)))),\n        lambda x, y: ite(y == 0, x, y)\n    )\n```\n",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(active, matrix_elemwise_div(\n        vec_scalar_sub(32, base), active),\n        lambda active, div_result: ite(active==0, 32, 32 - div_result))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, base),\n        active,\n        lambda x, y: ite(y == 0, 32, x - x // y)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, active)),\n        ite)\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 0, 32, 32 - (32 - b) // a))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda b, a: ite(a == 0, 32, 32 - (32 - b) // a))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(active, base, lambda a, b: ite(a == 0, 32, 32 - (32 - b) // a))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, \n                                     lambda b, a: ite(a == 0, 32, 32 - (32 - b) // a))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_elemwise_add(\n            vec_scalar_mul(32, matrix_elemwise_div(vec_scalar_sub(32, base), active)),\n            matrix_scalar_mul(32, ite(active == 0, 1, 0)),\n        ),\n        (lambda x, y: x if y == 0 else y)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_add(active, [[0]*len(active[0])]*len(active))),\n        ite\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, active)),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_val, active_val: ite(active_val == 0, 32, 32 - (32 - base_val) // active_val))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y))\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(base, active)),\n        ite\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, active)),\n        lambda x, y: ite(y != 0, x, y),\n    )\n```",
    "```python\n#rewritten function\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def pixel_operation(base_pixel: int, active_pixel: int) -> int:\n        return ite(active_pixel == 0, 32, 32 - (32 - base_pixel) // active_pixel)\n    return matrix_selection_two_args(base, active, pixel_operation)\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base,\n        active,\n        lambda base_val, active_val: ite(\n            active_val == 0,\n            32,\n            32 - (32 - base_val) // active_val\n        )\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        matrix_scalar_mul(32, matrix_elemwise_mul(active, [[0] * len(active[0])] * len(active))),\n        lambda x, y: ite(y == 0, 32, x)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(\n        base, \n        active, \n        lambda base_pixel, active_pixel: ite(active_pixel == 0, 32, 32 - (32 - base_pixel) // active_pixel)\n    )\n```",
    "```python\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_selection_two_args(base, active, lambda base_pixel, active_pixel: ite(active_pixel == 0, 32, 32 - (32 - base_pixel) // active_pixel))\n```"
]
