["\ndef linear_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_add(base, active)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_add(base[:row], active[:row])\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and out[row][:col] == vec_elemwise_add(base[row][:col], active[row][:col])\n", "\ndef linear_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_add(base, active)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_add(base[:row], active[:row])\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int) -> bool:\n    return col >= 0 and col < len(base[0]) and row_vec == vec_elemwise_add(base[row][:col], active[row][:col]) and out[:row] == matrix_elemwise_add(base[:row], active[:row])\n", "\ndef test(base, active):\n    return matrix_elemwise_add(base, active)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_add(base[:row], active[:row])\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and out[row][:col] == vec_elemwise_add(base[row][:col], active[row][:col])\n", "\ndef linear_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_add(base, active)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_add(base[:row], active[:row])\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and out[row][:col] == vec_elemwise_add(base[row][:col], active[row][:col])\n", "\ndef test(base: List[List[uint8_t]], active: List[List[uint8_t]]) -> List[List[uint8_t]]:\n    return matrix_elemwise_sub(base, active)\n\n\n\ndef invariant1(base: List[List[uint8_t]], active: List[List[uint8_t]], out: List[List[uint8_t]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_sub(base[:row], active[:row])\n\ndef invariant2(base: List[List[uint8_t]], active: List[List[uint8_t]], out: List[List[uint8_t]], row: int, row_vec: List[uint8_t], col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row_vec == vec_elemwise_sub(base[row][:col], active[row][:col]) and out == matrix_elemwise_sub(base[:row], active[:row])\n", "\ndef linear_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_add(base, active)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_add(base[:row], active[:row])\n\ndef invariant2(base: List[List[int]], active: List[List[int]], col: int, out: List[List[int]], row: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec == vec_elemwise_add(base[row][:col], active[row][:col]) and out[row] == vec_elemwise_add(base[row], active[row])\n", "\ndef linear_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_add(base, active)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_add(base[:row], active[:row])\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and out[row][:col] == vec_elemwise_add(base[row][:col], active[row][:col])\n", "\nfrom typing import List\n\ndef vec_elemwise_add(x: List[int], y: List[int]) -> List[int]:\n    return [x_i + y_i for x_i, y_i in zip(x, y)]\n\ndef matrix_elemwise_add(matrix_x: List[List[int]], matrix_y: List[List[int]]) -> List[List[int]]:\n    return [vec_elemwise_add(x, y) for x, y in zip(matrix_x, matrix_y)]\n\ndef linear_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_add(base, active)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_elemwise_add(base[:row], active[:row])\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and out[row][:col] == vec_elemwise_add(base[row][:col], active[row][:col])\n", "\ndef linear_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_add(base, active)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_add(base[:row], active[:row])\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec[:col] == vec_elemwise_add(base[row][:col], active[row][:col]) and out[row] == vec_elemwise_add(base[row], active[row])\n", "cpp\nvector<vector<int>> linear_dodge_8(vector<vector<int>> base, vector<vector<int>> active)\n{\n    vector<vector<int>> out;\n    int m = base.size();\n    int n = base[0].size();\n\tfor (int row = 0; row < m; row++) {\n        vector<int> row_vec;\n\t\tfor (int col = 0; col < n; col++) {\n\t\t\tint pixel = base[row][col] + active[row][col];\n\t\t\trow_vec.push_back(pixel);\n\t\t}\n\t\tout.push_back(row_vec);\n\t}\n\treturn out;\n}\n\n\n\ndef linear_dodge_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_add(base, active)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_elemwise_add(base[:row], active[:row])\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int) -> bool:\n    return row >= 0 and row < len(base) and col >= 0 and col <= len(base[0]) and row_vec == vec_elemwise_add(base[row][:col], active[row][:col]) and out == matrix_elemwise_add(base[:row], active[:row])\n"]
