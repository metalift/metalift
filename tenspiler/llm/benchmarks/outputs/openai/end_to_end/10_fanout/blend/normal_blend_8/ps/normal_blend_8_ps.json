["\ndef vec_elemwise_mul(x: List[int], y: List[int]) -> List[int]:\n    return [] if len(x) < 1 or not len(x) == len(y) else [x[0] * y[0], *vec_elemwise_mul(x[1:], y[1:])]\n\ndef vec_scalar_mul(a: int, x: List[int]) -> List[int]:\n    return [] if len(x) < 1 else [a * x[0], *vec_scalar_mul(a, x[1:])]\n\ndef vec_elemwise_add(x: List[int], y: List[int]) -> List[int]:\n    return [] if len(x) < 1 or not len(x) == len(y) else [x[0] + y[0], *vec_elemwise_add(x[1:], y[1:])]\n\n\n\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(32 - opacity, base))\n\n\n\ndef invariant(base: List[int], active: List[int], i: int, opacity: int, out: List[int]) -> bool:\n    return i >= 0 and i <= len(base) and out == vec_elemwise_add(vec_scalar_mul(opacity, active[:i]), vec_scalar_mul(32 - opacity, base[:i]))\n", "\nfrom typing import List\n\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(32 - opacity, base))\n\n\n\ndef invariant(base: List[int], active: List[int], opacity: int, i: int, out: List[int]) -> bool:\n    return i >= 0 and i <= len(base) and out == vec_elemwise_add(vec_scalar_mul(opacity, active[:i]), vec_scalar_mul(32 - opacity, base[:i]))\n", "\ndef normal_blend_8(base: list[int], active: list[int], opacity: int) -> list[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(32 - opacity, base))\n\n\n\ndef invariant(i: int, base: list[int], active: list[int], opacity: int, out: list[int]) -> bool:\n    return i >= 0 and i <= len(base) and out == vec_elemwise_add(vec_scalar_mul(opacity, active[:i]), vec_scalar_mul(32 - opacity, base[:i]))\n", "\n#Rewritten function\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul((32 - opacity), base))\n\n#Loop invariant\ndef invariant(i: int, base: List[int], active: List[int], opacity: int, out: List[int]) -> bool:\n    return i >= 0 and i <= len(base) and out == vec_elemwise_add(vec_scalar_mul(opacity, active[:i]), vec_scalar_mul((32 - opacity), base[:i]))\n", "\ndef vec_scalar_mul(a: int, x: List[int]) -> List[int]:\n    return [] if len(x) < 1 else [a * x[0], *vec_scalar_mul(a, x[1:])]\n\ndef vec_elemwise_add(x: List[int], y: List[int]) -> List[int]:\n    return [] if len(x) < 1 or not len(x) == len(y) else [x[0] + y[0], *vec_elemwise_add(x[1:], y[1:])]\n\n\n\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(32 - opacity, base))\n\n\n\ndef invariant(i: int, base: List[int], active: List[int], opacity: int, out: List[int]) -> bool:\n    return i >= 0 and i <= len(base) and out == vec_elemwise_add(vec_scalar_mul(opacity, active[:i]), vec_scalar_mul(32 - opacity, base[:i]))\n", "\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(32 - opacity, base))\n\n\n\ndef invariant(base: List[int], active: List[int], i: int, opacity: int, out: List[int]) -> bool:\n    return i >= 0 and i <= len(base) and out == vec_elemwise_add(vec_scalar_mul(opacity, active[:i]), vec_scalar_mul(32 - opacity, base[:i]))\n", "\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(32 - opacity, base))\n\n\n\ndef invariant(i: int, base: List[int], active: List[int], opacity: int, out: List[int]) -> bool:\n    return i >= 0 and i <= len(base) and out == vec_elemwise_add(vec_scalar_mul(opacity, active[:i]), vec_scalar_mul(32 - opacity, base[:i]))\n", "\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(32 - opacity, base))\n\n\n\ndef invariant(base: List[int], active: List[int], opacity: int, i: int, out: List[int]) -> bool:\n    return i >= 0 and i <= len(base) and out == vec_elemwise_add(vec_scalar_mul(opacity, active[:i]), vec_scalar_mul(32 - opacity, base[:i]))\n", "\ndef normal_blend_8(base: list[int], active: list[int], opacity: int) -> list[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(32 - opacity, base))\n\n\n\ndef invariant(base: list[int], active: list[int], i: int, opacity: int, out: list[int]) -> bool:\n    return (i >= 0 and i <= len(base) and \n            out == vec_elemwise_add(vec_scalar_mul(opacity, active[:i]), vec_scalar_mul(32 - opacity, base[:i])))\n", "\ndef normal_blend_8(base: List[int], active: List[int], opacity: int) -> List[int]:\n    return vec_elemwise_add(vec_scalar_mul(opacity, active), vec_scalar_mul(32 - opacity, base))\n\n\n\ndef invariant(base: List[int], active: List[int], opacity: int, i: int, out: List[int]) -> bool:\n    return i >= 0 and i <= len(base) and out == vec_elemwise_add(vec_scalar_mul(opacity, active[:i]), vec_scalar_mul(32 - opacity, base[:i]))\n"]
