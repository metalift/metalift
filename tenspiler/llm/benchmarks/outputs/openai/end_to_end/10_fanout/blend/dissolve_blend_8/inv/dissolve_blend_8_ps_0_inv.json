["\n        def invariant1(base: List[List[int]], active: List[List[int]], opacity: int, out: List[List[int]], rand_cons: int, row: int) -> bool:\n            return row >= 0 and row <= len(base) and out == matrix_where( base[:row], active[:row], lambda base_pixel, active_pixel: active_pixel if opacity - ((rand_cons % 100) + 1) // 100 >= 0 else base_pixel)\n\n        def invariant2(base: List[List[int]], active: List[List[int]], col: int, opacity: int, out: List[List[int]], rand_cons: int, row: int, row_vec: List[int]) -> bool:\n            return row >= 0 and row < len(base) and col >= 0 and col <= len(base[0]) and row_vec == vector_where( base[row][:col], active[row][:col], lambda base_pixel, active_pixel: active_pixel if opacity - ((rand_cons % 100) + 1) // 100 >= 0 else base_pixel) and out == matrix_where( base[:row], active[:row], lambda base_pixel, active_pixel: active_pixel if opacity - ((rand_cons % 100) + 1) // 100 >= 0 else base_pixel)\n        "]
