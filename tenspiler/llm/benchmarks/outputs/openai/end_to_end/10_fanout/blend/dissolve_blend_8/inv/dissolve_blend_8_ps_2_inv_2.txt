
from typing import List

def invariant1(active: List[List[int]], base: List[List[int]], out: List[List[int]], row: int, opacity: int, rand_cons: int) -> bool:
    return row >= 0 and row <= len(active) and out == matrix_selection_two_args(active[:row], base[:row], lambda active, base: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, active, base))

def invariant2(active: List[List[int]], base: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int, opacity: int, rand_cons: int) -> bool:
    return col >= 0 and col <= len(active[0]) and row >= 0 and row < len(active) and out[:row] + [row_vec] == matrix_selection_two_args(active[:row] + [active[row][:col]], base[:row] + [base[row][:col]], lambda active, base: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, active, base))
