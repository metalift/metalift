["\ndef screen_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_elemwise_add(base, active), \n        matrix_elemwise_div(\n            matrix_elemwise_mul(base, active), \n            32\n        )\n    )\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == screen_blend_8(base[:row], active[:row])\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and out[row][:col] == vec_elemwise_sub(\n        vec_elemwise_add(base[row][:col], active[row][:col]), \n        vec_elemwise_div(\n            vec_elemwise_mul(base[row][:col], active[row][:col]), \n            32\n        )\n    )\n", "\ndef screen_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_elemwise_add(base, active), \n        matrix_elemwise_div(matrix_elemwise_mul(base, active), 32)\n    )\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_sub(\n        matrix_elemwise_add(base[:row], active[:row]), \n        matrix_elemwise_div(matrix_elemwise_mul(base[:row], active[:row]), 32)\n    )\n\ndef invariant2(base: List[List[int]], active: List[List[int]], row_vec: List[int], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row_vec == vec_elemwise_sub(\n        vec_elemwise_add(base[row][:col], active[row][:col]), \n        vec_elemwise_div(vec_elemwise_mul(base[row][:col], active[row][:col]), 32)\n    )\n", "\nfrom typing import List\n\ndef screen_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_elemwise_add(base, active), \n        matrix_scalar_div(32, matrix_elemwise_mul(base, active))\n    )\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_sub(\n        matrix_elemwise_add(base[:row], active[:row]), \n        matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n    )\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec[:col] == vec_elemwise_sub(\n        vec_elemwise_add(col_vec(base, col)[:row], col_vec(active, col)[:row]), \n        vec_scalar_div(32, vec_elemwise_mul(col_vec(base, col)[:row], col_vec(active, col)[:row]))\n    ) and out[:row] == matrix_elemwise_sub(\n        matrix_elemwise_add(base[:row], active[:row]), \n        matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n    )\n", "\ndef screen_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_elemwise_add(base, active), matrix_scalar_div(32, matrix_elemwise_mul(base, active))\n    )\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_sub(\n        matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n    )\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and out[:row] == matrix_elemwise_sub(\n        matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n    )\n", "\ndef screen_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_elemwise_add(base, active),\n        matrix_elemwise_div(matrix_elemwise_mul(base, active), 32)\n    )\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_sub(\n        matrix_elemwise_add(base[:row], active[:row]), \n        matrix_elemwise_div(matrix_elemwise_mul(base[:row], active[:row]), 32)\n    )\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row_vec: List[int], col: int, row: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec[:col] == vec_elemwise_sub(\n        vec_elemwise_add(col_vec(base, col)[:row], col_vec(active, col)[:row]), \n        vec_elemwise_div(vec_elemwise_mul(col_vec(base, col)[:row], col_vec(active, col)[:row]), 32)\n    ) and out[:row] == matrix_elemwise_sub(\n        matrix_elemwise_add(base[:row], active[:row]), \n        matrix_elemwise_div(matrix_elemwise_mul(base[:row], active[:row]), 32)\n    )\n", "\ndef screen_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_elemwise_add(base, active),\n        matrix_scalar_div(32, matrix_elemwise_mul(base, active))\n    )\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_elemwise_sub(\n        matrix_elemwise_add(base[:row], active[:row]),\n        matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n    )\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec == vec_elemwise_sub(\n        vec_elemwise_add(base[row][:col], active[row][:col]),\n        vec_scalar_div(32, vec_elemwise_mul(base[row][:col], active[row][:col]))\n    ) and out == matrix_elemwise_sub(\n        matrix_elemwise_add(base[:row], active[:row]),\n        matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n    )\n", "\ndef screen_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_add(\n        matrix_elemwise_sub(base, matrix_elemwise_div(matrix_elemwise_mul(base, active), 32)),\n        active\n    )\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_elemwise_add(\n        matrix_elemwise_sub(base[:row], matrix_elemwise_div(matrix_elemwise_mul(base[:row], active[:row]), 32)),\n        active[:row]\n    )\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], row_vec: List[int], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row_vec == vec_elemwise_add(\n        vec_elemwise_sub(base[row][:col], vec_elemwise_div(vec_elemwise_mul(base[row][:col], active[row][:col]), 32)),\n        active[row][:col]\n    )\n", "\ndef screen_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_add(\n        matrix_elemwise_sub(base, matrix_elemwise_div(matrix_elemwise_mul(base, active), 32)), active\n    )\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_add(\n        matrix_elemwise_sub(base[:row], matrix_elemwise_div(matrix_elemwise_mul(base[:row], active[:row]), 32)), active[:row]\n    )\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec[:col] == vec_elemwise_add(\n        vec_elemwise_sub(col_vec(base, col)[:row], vec_scalar_div(vec_elemwise_mul(col_vec(base, col)[:row], col_vec(active, col)[:row]), 32)), col_vec(active, col)[:row]\n    ) and out[:row] == matrix_elemwise_add(\n        matrix_elemwise_sub(base[:row], matrix_elemwise_div(matrix_elemwise_mul(base[:row], active[:row]), 32)), active[:row]\n    )\n", "\ndef screen_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_add(\n        matrix_elemwise_sub(base, active), \n        matrix_elemwise_div(matrix_elemwise_mul(base, active), 32)\n    )\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_add(\n        matrix_elemwise_sub(base[:row], active[:row]),\n        matrix_elemwise_div(matrix_elemwise_mul(base[:row], active[:row]), 32)\n    )\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec[:col] == vec_elemwise_add(\n        vec_elemwise_sub(col_vec(base, col)[:row], col_vec(active, col)[:row]),\n        vec_elemwise_div(vec_elemwise_mul(col_vec(base, col)[:row], col_vec(active, col)[:row]), 32)\n    ) and out[:row] == matrix_elemwise_add(\n        matrix_elemwise_sub(base[:row], active[:row]),\n        matrix_elemwise_div(matrix_elemwise_mul(base[:row], active[:row]), 32)\n    )\n", "\nfrom typing import List\n\ndef screen_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_elemwise_add(base, active),\n        matrix_elemwise_div(\n            matrix_elemwise_mul(base, active), \n            [[32]*len(base[0])]*len(base)\n        )\n    )\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_sub(\n        matrix_elemwise_add(base[:row], active[:row]),\n        matrix_elemwise_div(\n            matrix_elemwise_mul(base[:row], active[:row]), \n            [[32]*len(base[0])]*row\n        )\n    )\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row_vec: List[int], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec[:col] == vec_elemwise_sub(\n        vec_elemwise_add(col_vec(base, row)[:col], col_vec(active, row)[:col]),\n        vec_elemwise_div(\n            vec_elemwise_mul(col_vec(base, row)[:col], col_vec(active, row)[:col]), \n            [32]*col\n        )\n    ) and invariant1(base, active, out, row)\n"]
