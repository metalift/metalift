["\ndef multiply_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_scalar_div(32, matrix_elemwise_mul(base, active))\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row < len(base) and out[:row] == matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return row >= 0 and row < len(base) and col >= 0 and col < len(base[0]) and out[row][:col] == vec_scalar_div(32, vec_elemwise_mul(base[row][:col], active[row][:col]))\n", "\ndef multiply_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_scalar_div(32, matrix_elemwise_mul(base, active))\n\n\n \ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return row >= 0 and row < len(base) and col >= 0 and col <= len(base[0]) and row_vec == vec_scalar_div(32, vec_elemwise_mul(base[row][:col], active[row][:col])) and out == matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n", "\ndef multiply_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_scalar_div(32, matrix_elemwise_mul(base, active))\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return row >= 0 and row < len(base) and col >= 0 and col <= len(base[0]) and row_vec[:col] == vec_scalar_div(32, vec_elemwise_mul(base[row][:col], active[row][:col])) and out[:row] == matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n", "\ndef multiply_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_scalar_div(32, matrix_elemwise_mul(base, active))\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n\ndef invariant2(base: List[List[int]], active: List[List[int]], row_vec: List[int], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[row]) and row_vec[:col] == vec_scalar_div(32, vec_elemwise_mul(base[row][:col], active[row][:col]))\n", "\ndef multiply_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_div(matrix_elemwise_mul(base, active), 32)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_div(matrix_elemwise_mul(base[:row], active[:row]), 32)\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row_vec[:col] == vec_elemwise_div(vec_elemwise_mul(base[row][:col], active[row][:col]), 32)\n", "\n#Rewritten function\ndef multiply_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_div(matrix_elemwise_mul(base, active), 32)\n\n\n\n#Loop Invariants\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_div(matrix_elemwise_mul(base[:row], active[:row]), 32)\n\ndef invariant2(base: List[List[int]], active: List[List[int]], row_vec: List[int], row: int, col: int) -> bool:\n    return row >= 0 and row < len(base) and col >= 0 and col <= len(base[0]) and row_vec == vec_elemwise_div(vec_elemwise_mul(base[row][:col], active[row][:col]), 32)\n", "I apologize for any misunderstanding, but without specific C++ function and the set of provided functions, I can't provide an accurate solution to your request. Could you please provide the specific details?", "c++\nvector<vector<uint8_t>> test(vector<vector<uint8_t>> base, vector<vector<uint8_t>> active)\n{\n    return matrix_elemwise_mul(base, active);\n}\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_mul(base[:row], active[:row])\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row_vec == vec_elemwise_mul(base[row][:col], active[row][:col]) and out[:row] == matrix_elemwise_mul(base[:row], active[:row])\n", "\ndef multiply_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_scalar_div(32, matrix_elemwise_mul(base, active))\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_scalar_div(32, matrix_elemwise_mul(base[:row], active[:row]))\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row_vec[:col] == vec_scalar_div(32, vec_elemwise_mul(base[row][:col], active[row][:col])) and out[row] == vec_scalar_div(32, vec_elemwise_mul(base[row], active[row]))\n", "\ndef multiply_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_div(matrix_elemwise_mul(base, active), 32)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_elemwise_div(matrix_elemwise_mul(base[:row], active[:row]), 32)\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and out[row][:col] == vec_elemwise_div(vec_elemwise_mul(base[row][:col], active[row][:col]), 32)\n"]
