["\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, min)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_where(base[:row], active[:row], min)\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row <= len(base) and out[row][:col] == vector_where(base[row][:col], active[row][:col], min)\n", "\nfrom typing import List, Callable\n\n# Defined functions\ndef matrix_where(\n    matrix_x: List[List[int]],\n    matrix_y: List[List[int]],\n    condition: Callable[[int, int], bool],\n) -> List[List[int]]:\n    return (\n        []\n        if len(matrix_x) < 1 or not len(matrix_x) == len(matrix_y)\n        else [\n            vector_where(matrix_x[0], matrix_y[0], condition),\n            *matrix_where(matrix_x[1:], matrix_y[1:], condition),\n        ]\n    )\n\ndef vector_where(\n    x: List[int], y: List[int], condition: Callable[[int, int], bool]\n) -> List[int]:\n    return (\n        []\n        if len(x) < 1 or not len(x) == len(y)\n        else [\n            condition(x[0], y[0]),\n            *vector_where(x[1:], y[1:], condition),\n        ]\n    )\n\n# Rewritten function\ndef test(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, min)\n\n# Loop Invariants\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_where(base[:row], active[:row], min)\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec == vector_where(base[row][:col], active[row][:col], min) and out == matrix_where(base[:row], active[:row], min)\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, min)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_where(base[:row], active[:row], min)\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row_vec == vector_where(base[row][:col], active[row][:col], min)\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, min)\n\n\n\ndef invariant1(active: List[List[int]], base: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_where(base[:row], active[:row], min)\n\ndef invariant2(active: List[List[int]], base: List[List[int]], col: int, out: List[List[int]], row: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec == vector_where(base[row][:col], active[row][:col], min) and out == matrix_where(base[:row], active[:row], min)\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, min)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == [[min(b, a) for b, a in zip(base_row, active_row)] for base_row, active_row in zip(base[:row], active[:row])]\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and out[row][:col] == [min(b, a) for b, a in zip(base[row][:col], active[row][:col])]\n", "\nfrom typing import List\nfrom operator import lt\n\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, min)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_where(base[:row], active[:row], min)\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec == vector_where(base[row][:col], active[row][:col], min) and out == matrix_where(base[:row], active[:row], min)\n", "\ndef matrix_where(matrix_x: List[List[int]], matrix_y: List[List[int]], condition: Callable[[int, int], bool]) -> List[List[int]]:\n    return (\n        []\n        if len(matrix_x) < 1 or not len(matrix_x) == len(matrix_y)\n        else [\n            vector_where(matrix_x[0], matrix_y[0], condition),\n            *matrix_where(matrix_x[1:], matrix_y[1:], condition),\n        ]\n    )\n\ndef vector_where(x: List[int], y: List[int], condition: Callable[[int, int], bool]) -> List[int]:\n    return (\n        []\n        if len(x) < 1 or not len(x) == len(y)\n        else [\n            condition(x[0], y[0]),\n            *vector_where(x[1:], y[1:], condition),\n        ]\n    )\n\n\n\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, min)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_where(base[:row], active[:row], min)\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and \\\n           row_vec == vector_where(base[row][:col], active[row][:col], min) and \\\n           out == matrix_where(base[:row], active[:row], min) and out[row] == row_vec\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, min)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_where(base[:row], active[:row], min)\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec == vector_where(base[row][:col], active[row][:col], min) and out == matrix_where(base[:row], active[:row], min)\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, min)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_where(base[:row], active[:row], min)\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return row >= 0 and row < len(base) and col >= 0 and col <= len(base[0]) and row_vec == vector_where(base[row][:col], active[row][:col], min) and out == matrix_where(base[:row], active[:row], min)\n", "\ndef darken_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, min)\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_where(base[:row], active[:row], min)\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and row_vec == vector_where(base[row][:col], active[row][:col], min) and out == matrix_where(base[:row], active[:row], min)\n"]
