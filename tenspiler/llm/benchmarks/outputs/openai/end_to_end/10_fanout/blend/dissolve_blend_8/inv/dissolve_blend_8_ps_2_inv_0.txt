
def invariant1(active: List[List[int]], base: List[List[int]], out: List[List[int]], row: int, opacity: int, rand_cons: int) -> bool:
    return row >= 0 and row <= len(active) and out == [matrix_selection_two_args([active[i]], [base[i]], lambda active, base: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, active, base))[0] for i in range(row)]



def invariant2(active: List[List[int]], base: List[List[int]], col: int, out: List[List[int]], row: int, row_vec: List[int], opacity: int, rand_cons: int) -> bool:
    return col >= 0 and col <= len(active[0]) and row >= 0 and row < len(active) and row_vec == [ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, active[row][j], base[row][j]) for j in range(col)] and out == [matrix_selection_two_args([active[i]], [base[i]], lambda active, base: ite(opacity - ((rand_cons % 100) + 1) / 100 >= 0, active, base))[0] for i in range(row)] + [row_vec]
