
    def invariant1(active: List[List[int]], base: List[List[int]], opacity: int, out: List[List[int]], rand_cons: int, row: int) -> bool:
        return row >= 0 and row <= len(base) and out[:row] == matrix_selection_two_args(base[:row], active[:row],
                                                                                        lambda base_pixel, active_pixel:
                                                                                        active_pixel if opacity -
                                                                                        ((rand_cons % 100) + 1) // 100 >= 0
                                                                                        else base_pixel)

    def invariant2(active: List[List[int]], base: List[List[int]], col: int, opacity: int, out: List[List[int]], rand_cons: int, row: int, row_vec: List[int]) -> bool:
        return col >= 0 and col < len(base[row]) and row >= 0 and row < len(base) and row_vec[:col] == selection_two_args(base[row][:col], active[row][:col],
                                                                                        lambda base_pixel, active_pixel:
                                                                                        active_pixel if opacity -
                                                                                        ((rand_cons % 100) + 1) // 100 >= 0
                                                                                        else base_pixel)
