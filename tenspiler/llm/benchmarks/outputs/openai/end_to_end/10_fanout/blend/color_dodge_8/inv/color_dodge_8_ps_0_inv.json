["\n        def invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n            return row >= 0 and row <= len(base) and out == matrix_where(base[:row], active[:row], lambda x, y: ite(y == 32, 32, x // (32 - y)))\n\n        def invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, row_vec: List[int], col: int) -> bool:\n            return row >= 0 and row < len(base) and col >= 0 and col <= len(base[0]) and row_vec == vector_where(base[row][:col], active[row][:col], lambda x, y: ite(y == 32, 32, x // (32 - y))) and out == matrix_where(base[:row], active[:row], lambda x, y: ite(y == 32, 32, x // (32 - y)))\n        "]