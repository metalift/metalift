["\ndef linear_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_elemwise_add(base, active), matrix_scalar_add(32, []))\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_sub(matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_add(32, []))\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col < len(base[row]) and out[row][:col] == vec_elemwise_sub(vec_elemwise_add(base[row][:col], active[row][:col]), vec_scalar_add(32, []))\n", "\ndef linear_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_elemwise_add(base, active), matrix_scalar_add(32, []))\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_sub(matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_add(32, []))\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], row_vec: List[int], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[row]) and row_vec[:col] == vec_elemwise_sub(vec_elemwise_add(base[row][:col], active[row][:col]), vec_scalar_add(32, []))\n", "\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_sub(matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_add(32, matrix_elemwise_add(base[:row], active[:row])))\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[row]) and out[row][:col] == vec_elemwise_sub(vec_elemwise_add(base[row][:col], active[row][:col]), vec_scalar_add(32, vec_elemwise_add(base[row][:col], active[row][:col])))\n", "\ndef linear_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_elemwise_add(base, active), matrix_scalar_add(32, []))\n\n\n\ndef outer_loop_invariant(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_sub(matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_add(32, base[:row]))\n\n\n\ndef inner_loop_invariant(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[row]) and out[row][:col] == vec_elemwise_sub(vec_elemwise_add(base[row][:col], active[row][:col]), vec_scalar_add(32, base[row][:col]))\n", "\ndef linear_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_elemwise_add(base, active), matrix_scalar_add(32, base))\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row < len(base) and out[:row] == matrix_elemwise_sub(matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_add(32, base[:row]))\n\ndef invariant2(base: List[List[int]], active: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col < len(base[row]) and row_vec == vec_elemwise_sub(vec_elemwise_add(base[row][:col], active[row][:col]), vec_scalar_add(32, base[row][:col]))\n", "\ndef linear_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_elemwise_add(base, active), matrix_scalar_add(32, []))\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out[:row] == matrix_elemwise_sub(matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_add(32, []))\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col <= len(base[row]) and out[row][:col] == vec_elemwise_sub(vec_elemwise_add(base[row][:col], active[row][:col]), vec_scalar_add(32, []))\n", "cpp\nvector<vector<int>> linear_burn_8(vector<vector<int>> base, vector<vector<int>> active)\n{\n    vector<vector<int>> out;\n    int m = base.size();\n    int n = base[0].size();\n    for (int row = 0; row < m; row++) {\n        vector<int> row_vec;\n        for (int col = 0; col < n; col++) {\n            int pixel = (base[row][col] + active[row][col]) - 32;\n            row_vec.push_back(pixel);\n        }\n        out.push_back(row_vec);\n    }\n    return out;\n}\n\n\n\ndef linear_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_elemwise_add(base, active), matrix_scalar_add(32, []))\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_elemwise_sub(matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_add(32, [])) \n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row_vec == vec_elemwise_sub(vec_elemwise_add(base[row][:col], active[row][:col]), vec_scalar_add(32, []))\n", "\ndef linear_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_elemwise_add(base, active), matrix_scalar_add(32, []))\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row < len(base) and out[:row] == matrix_elemwise_sub(matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_add(32, []))\n\n\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col < len(base[0]) and out[row][:col] == vec_elemwise_sub(vec_elemwise_add(base[row][:col], active[row][:col]), vec_scalar_add(32, []))\n", "\ndef test(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_elemwise_add(base, active), matrix_scalar_add(32, []))\n\n\n\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row < len(base) and out[:row] == matrix_elemwise_sub(matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_add(32, []))\n\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int) -> bool:\n    return col >= 0 and col < len(base[0]) and out[row][:col] == vec_elemwise_sub(vec_elemwise_add(base[row][:col], active[row][:col]), vec_scalar_add(32, []))\n", "\n# Rewritten function\ndef linear_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_elemwise_add(base, active), matrix_scalar_add(32, len(base) * len(base[0]) * [[]]))\n\n# Loop invariant for the outer loop\ndef invariant1(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row < len(base) and out[:row] == matrix_elemwise_sub(matrix_elemwise_add(base[:row], active[:row]), matrix_scalar_add(32, len(base[0]) * [[]]))\n\n# Loop invariant for the inner loop\ndef invariant2(base: List[List[int]], active: List[List[int]], out: List[List[int]], row: int, col: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col < len(base[0]) and row_vec[:col] == vec_elemwise_sub(vec_elemwise_add(base[row][:col], active[row][:col]), vec_scalar_add(32, [])) and out[row] == row_vec\n"]
