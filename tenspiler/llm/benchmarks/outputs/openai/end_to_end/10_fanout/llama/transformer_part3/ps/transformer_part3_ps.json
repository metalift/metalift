["\nfrom typing import List\n\ndef vec_scalar_div(a: int, x: List[int]) -> List[int]:\n    return [] if len(x) < 1 else [(x[0] // a), *vec_scalar_div(a, x[1:])]\n\ndef integer_exp(n: int) -> int:\n    return 1 if n <= 0 else (integer_exp((n - 1)) * 3 % 64)\n\ndef transformer_part3(input: List[int], hidden_dim: int) -> List[int]:\n    return vec_scalar_div(1 + integer_exp(0 - input[:hidden_dim]), input[:hidden_dim])\n\n\n\ndef invariant(i: int, input: List[int]) -> bool:\n    return i >= 0 and i <= hidden_dim and output == vec_scalar_div(1 + integer_exp(0 - input[:i]), input[:i])\n", "\ndef transformer_part3(input: List[int], hidden_dim: int) -> List[int]:\n    return vec_map(input[:hidden_dim], lambda x: x * (1 / (1 + integer_exp(0 - x))))\n\n\n\ndef invariant(i: int, input: List[int], output: List[int]) -> bool:\n    return i >= 0 and i <= hidden_dim and output == vec_map(input[:i], lambda x: x * (1 / (1 + integer_exp(0 - x))))\n", "\nfrom typing import List, Callable\n\ndef integer_exp(n: int) -> int:\n    return 1 if n <= 0 else (integer_exp((n - 1)) * 3 % 64)\n\ndef vec_elemwise_mul(x: List[int], y: List[int]) -> List[int]:\n    return (\n        []\n        if len(x) < 1 or not len(x) == len(y)\n        else [x[0] * y[0], *vec_elemwise_mul(x[1:], y[1:])]\n    )\n\ndef vec_scalar_add(a: int, x: List[int]) -> List[int]:\n    return [] if len(x) < 1 else [a + x[0], *vec_scalar_add(a, x[1:])]\n\ndef scalar_vec_div(a: int, x: List[int]) -> List[int]:\n    return [] if len(x) < 1 else [(a // x[0]), *scalar_vec_div(a, x[1:])]\n\ndef vec_map(x: List[int], map_int_to_int: Callable[[int], int]) -> List[int]:\n    return [] if len(x) < 1 else [map_int_to_int(x[0]), *vec_map(x[1:], map_int_to_int)]\n\ndef transformer_part3(input: List[int], hidden_dim: int) -> List[int]:\n    return vec_elemwise_mul(input, scalar_vec_div(1, vec_scalar_add(1, vec_map(input, lambda x: integer_exp(-x)))))\n\n\n\ndef invariant(i: int, input: List[int], output: List[int]) -> bool:\n    return i >= 0 and i <= hidden_dim and output == vec_elemwise_mul(input[:i], scalar_vec_div(1, vec_scalar_add(1, vec_map(input[:i], lambda x: integer_exp(-x)))))\n", "\n# defined function\ndef vec_map(x: List[int], map_int_to_int: Callable[[int], int]) -> List[int]:\n    return [] if len(x) < 1 else [map_int_to_int(x[0]), *vec_map(x[1:], map_int_to_int)]\n\ndef integer_exp(n: int) -> int:\n    return 1 if n <= 0 else (integer_exp((n - 1)) * 3 % 64)\n\n# rewritten function\ndef transformer_part3(input: List[int], hidden_dim: int) -> List[int]:\n    return vec_map(input[:hidden_dim], lambda x: x * (1 / (1 + integer_exp(0 - x))))\n\n\n\ndef invariant(hidden_dim: int, i: int, input: List[int], output: List[int]) -> bool:\n    return i >= 0 and i <= hidden_dim and output == vec_map(input[:i], lambda x: x * (1 / (1 + integer_exp(0 - x))))\n", "\ndef transformer_part3(input: List[int], hidden_dim: int) -> List[int]:\n    return vec_map(input, lambda x: x * (1 / (1 + integer_exp(0 - x))))\n\n\n\ndef invariant(i: int, input: List[int], output: List[int]) -> bool:\n    return i >= 0 and i <= hidden_dim and output == vec_map(input[:i], lambda x: x * (1 / (1 + integer_exp(0 - x))))\n", "\nfrom typing import List\n\ndef integer_exp(x: int) -> int:\n    return x\n\ndef transformer_part3(input: List[int], hidden_dim: int) -> List[int]:\n    return vec_elemwise_mul(input[:hidden_dim], vec_elemwise_div(vec_scalar_mul(1, [1]*hidden_dim), vec_scalar_add(1, list(map(integer_exp, vec_scalar_mul(-1, input[:hidden_dim]))))))\n\n\n\ndef invariant(i: int, input: List[int], output: List[int]) -> bool:\n    return i >= 0 and i <= hidden_dim and output == vec_elemwise_mul(input[:i], vec_elemwise_div(vec_scalar_mul(1, [1]*i), vec_scalar_add(1, list(map(integer_exp, vec_scalar_mul(-1, input[:i]))))))\n", "\nfrom typing import List\n\ndef transformer_part3(input: List[int], hidden_dim: int) -> List[int]:\n    return vec_elemwise_mul(input[:hidden_dim], vec_scalar_div(1, vec_scalar_add(1, vec_map(input[:hidden_dim], integer_exp))))\n\n\n\ndef invariant(i: int, input: List[int], output: List[int]) -> bool:\n    return i >= 0 and i <= hidden_dim and output == vec_elemwise_mul(input[:i], vec_scalar_div(1, vec_scalar_add(1, vec_map(input[:i], integer_exp))))\n", "\ndef transformer_part3(input: List[int], hidden_dim: int) -> List[int]:\n    return vec_elemwise_mul(input[:hidden_dim], vec_scalar_div(1, vec_scalar_add(1, vec_map(vec_slice(input, 0, hidden_dim), integer_exp))))\n\n\n\ndef invariant(i: int, input: List[int], output: List[int]) -> bool:\n    return 0 <= i <= len(input) and output == vec_elemwise_mul(input[:i], vec_scalar_div(1, vec_scalar_add(1, vec_map(vec_slice(input, 0, i), integer_exp))))\n", "\ndef transformer_part3(input: List[int], hidden_dim: int) -> List[int]:\n    return vec_map(input[:hidden_dim], lambda x: x * (1 / (1 + integer_exp(0 - x))))\n\n\n\ndef invariant(i: int, input: List[int], output: List[int]) -> bool:\n    return i >= 0 and i <= hidden_dim and output == vec_map(input[:i], lambda x: x * (1 / (1 + integer_exp(0 - x))))\n", "\ndef vec_elemwise_mul(x: List[int], y: List[int]) -> List[int]:\n    return [] if len(x) < 1 else [(x[0] * y[0]), *vec_elemwise_mul(x[1:], y[1:])]\n\ndef vec_scalar_div(a: int, x: List[int]) -> List[int]:\n    return [] if len(x) < 1 else [(x[0] // a), *vec_scalar_div(a, x[1:])]\n\ndef integer_exp(n: int) -> int:\n    return 1 if n <= 0 else (integer_exp((n - 1)) * 3 % 64)\n\ndef transformer_part3(input: List[int], hidden_dim: int) -> List[int]:\n    return vec_elemwise_mul(input, vec_scalar_div(1, [1 + integer_exp(0 - i) for i in input]))\n\n\n\ndef invariant(i: int, input: List[int], output: List[int]) -> bool:\n    return i >= 0 and i <= hidden_dim and output == vec_elemwise_mul(input[:i], vec_scalar_div(1, [1 + integer_exp(0 - j) for j in input[:i]]))\n"]
