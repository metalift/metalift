["\ndef invariant(i: int, input: List[int], max_pos: int, max_val: int, output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_map(vec_slice(input, 0, i), lambda x: integer_exp(x - max_val))\n", "\ndef invariant(i: int, input: List[int], max_pos: int, max_val: int, output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_map(vec_slice(input, 0, i), lambda x: integer_exp(x - max_val))\n", "\ndef invariant(i: int, input: List[int], max_pos: int, max_val: int, output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_map(vec_slice(input, 0, i), lambda x: integer_exp(x - max_val))\n", "\ndef invariant(i: int, input: List[int], max_pos: int, max_val: int, output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_map(vec_slice(input, 0, i), lambda x: integer_exp(x - max_val))\n", "\ndef invariant(cur: int, i: int, input: List[int], max_pos: int, max_val: int, output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_map(vec_slice(input, 0, i), lambda x: integer_exp(x - max_val))\n", "\ndef invariant(i: int, input: List[int], max_pos: int, max_val: int, output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_map(vec_slice(input, 0, i), lambda x: integer_exp(x - max_val))\n", "\ndef invariant(i: int, input: List[int], max_pos: int, max_val: int, output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_map(vec_slice(input, 0, i), lambda x: integer_exp(x - max_val))\n", "\ndef invariant(i: int, input: List[int], max_pos: int, max_val: int, output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_map(vec_slice(input, 0, i), lambda x: integer_exp(x - max_val))\n", "\ndef invariant(i: int, input: List[int], max_pos: int, max_val: int, output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_map(vec_slice(input, 0, i), lambda x: integer_exp(x - max_val))\n", "\ndef invariant(i: int, input: List[int], max_pos: int, max_val: int, output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_map(vec_slice(input, 0, i), lambda x: integer_exp(x - max_val))\n"]
