["\n# Rewritten Function\n\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(input, vec_scalar_mul(integer_sqrt(ss // len(input) + 1), weight))\n\n# Loop Invariant\n\ndef invariant(i: int, input: List[int], output: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and output[:i] == vec_elemwise_mul(input[:i], vec_scalar_mul(integer_sqrt(ss // len(input[:i]) + 1), weight[:i]))\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input) + 1), input), weight)\n\n\n\ndef invariant(i: int, input: List[int], output: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and output[:i] == vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input[:i]) + 1), input[:i]), weight[:i])\n", "\ndef rmsnorm_part2(input: list[int], weight: list[int], ss: int) -> list[int]:\n    return vec_elemwise_mul(input, vec_scalar_mul(1 / integer_sqrt(ss / len(input) + 1), weight))\n\n\n\ndef invariant(i: int, input: list[int], output: list[int], ss: int, weight: list[int]) -> bool:\n    return i >= 0 and i <= len(input) and output[:i] == vec_elemwise_mul(input[:i], vec_scalar_mul(1 / integer_sqrt(ss / len(input[:i]) + 1), weight[:i]))\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input) + 1), input), weight)\n\n\n\ndef invariant(i: int, input: List[int], output: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and output[:i] == vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input[:i]) + 1), input[:i]), weight[:i])\n", "\ndef rmsnorm_part2(input: list[int], weight: list[int], ss: int) -> list[int]:\n    return vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input) + 1), input), weight)\n\n\n\ndef invariant(i: int, input: list[int], output: list[int], ss: int, weight: list[int]) -> bool:\n    return i >= 0 and i <= len(input) and output[:i] == vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input[:i]) + 1), input[:i]), weight[:i])\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input) + 1), input), weight)\n\n\n\ndef invariant(i: int, input: List[int], output: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and output[:i] == vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input[:i]) + 1), input[:i]), weight[:i])\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input) + 1), input), weight)\n\n\n\ndef invariant(i: int, input: List[int], output: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and output[:i] == vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input[:i]) + 1), input[:i]), weight[:i])\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input) + 1), input), weight)\n\n\n\ndef invariant(i: int, input: List[int], output: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and output == vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input[:i]) + 1), input[:i]), weight[:i])\n", "\ndef rmsnorm_part2(input: List[int], weight: List[int], ss: int) -> List[int]:\n    return vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // len(input) + 1), input), weight)\n\n\n\ndef invariant(i: int, input: List[int], output: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and output[:i] == vec_elemwise_mul(vec_scalar_mul(1 // integer_sqrt(ss // i + 1), input[:i]), weight[:i])\n", "\ndef vec_elemwise_mul(x: list[int], y: list[int]) -> list[int]:\n    return (\n        []\n        if len(x) < 1 or not len(x) == len(y)\n        else [x[0] * y[0], *vec_elemwise_mul(x[1:], y[1:])]\n    )\n\n\nc++\nvector<int> rmsnorm_part2(vector<int> input, vector<int> weight, int ss) {\n    vector<int> output;\n    int size = input.size();\n    int inv_ss = 1 / integer_sqrt(ss / size + 1);\n    for (int i = 0; i < input.size(); i++)\n        output.push_back(inv_ss * input[i] * weight[i]);\n    return output;\n}\n\n\n\ndef rmsnorm_part2(input: list[int], weight: list[int], ss: int) -> list[int]:\n    return vec_elemwise_mul(input, vec_scalar_mul(1 // integer_sqrt(ss // len(input) + 1), weight))\n\n\n\ndef invariant(i: int, input: list[int], output: list[int], ss: int, weight: list[int]) -> bool:\n    return i >= 0 and i <= len(input) and output[:i] == vec_elemwise_mul(input[:i], vec_scalar_mul(1 // integer_sqrt(ss // len(input[:i]) + 1), weight[:i]))\n"]
