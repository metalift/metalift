["\ndef invariant(i: int, input: list[int], ss: int, weight: list[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef invariant(i: int, input: List[int], ss: int) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef invariant(i: int, input: List[int], ss: int, weight: List[int]) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n", "\ndef invariant(i: int, input: list[int], ss: int) -> bool:\n    return i >= 0 and i <= len(input) and ss == reduce_sum(vec_elemwise_mul(input[:i], input[:i]))\n"]
