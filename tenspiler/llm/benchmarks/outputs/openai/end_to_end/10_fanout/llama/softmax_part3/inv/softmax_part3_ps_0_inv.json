["\ndef invariant(i: int, max_pos: int, output: List[int], sum: int) -> bool:\n    return i >= 0 and i <= max_pos and sum == reduce_sum(vec_slice(output, 0, i))\n", "\ndef invariant(i: int, max_pos: int, output: List[int], sum: int) -> bool:\n    return i >= 0 and i <= max_pos and sum == reduce_sum(vec_slice(output, 0, i))\n", "\ndef invariant(i: int, max_pos: int, output: List[int], sum: int) -> bool:\n    return i >= 0 and i <= max_pos and sum == reduce_sum(vec_slice(output, 0, i))\n", "\ndef invariant(i: int, max_pos: int, output: List[int], sum: int) -> bool:\n    return i >= 0 and i <= max_pos and sum == reduce_sum(vec_slice(output, 0, i))\n", "\ndef invariant(i: int, max_pos: int, output: List[int], sum: int) -> bool:\n    return i >= 0 and i <= max_pos and sum == reduce_sum(vec_slice(output, 0, i))\n", "\ndef invariant(i: int, max_pos: int, output: List[int], sum: int) -> bool:\n    return i >= 0 and i <= max_pos and sum == reduce_sum(vec_slice(output, 0, i))\n", "\ndef invariant(i: int, max_pos: int, output: List[int], sum: int) -> bool:\n    return i >= 0 and i <= max_pos and sum == reduce_sum(vec_slice(output, 0, i))\n", "\ndef invariant(i: int, max_pos: int, output: List[int], sum: int) -> bool:\n    return i >= 0 and i <= max_pos and sum == reduce_sum(vec_slice(output, 0, i))\n", "\ndef invariant(i: int, max_pos: int, output: List[int], sum: int) -> bool:\n    return i >= 0 and i <= max_pos and sum == reduce_sum(vec_slice(output, 0, i))\n", "\ndef invariant(i: int, max_pos: int, output: List[int], sum: int) -> bool:\n    return i >= 0 and i <= max_pos and sum == reduce_sum(vec_slice(output, 0, i))\n"]