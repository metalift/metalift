["\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n\n\n\ndef invariant(i: int, max_pos: int, output: List[int], sum: int, unnormalized_output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_scalar_div(sum, vec_slice(unnormalized_output, 0, i))\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n\n\n\ndef invariant(i: int, max_pos: int, output: List[int], sum: int, unnormalized_output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_scalar_div(sum, vec_slice(unnormalized_output, 0, i))\n", "\nfrom typing import List\n\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n\n\n\ndef invariant(i: int, max_pos: int, output: List[int], sum: int, unnormalized_output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_scalar_div(sum, vec_slice(unnormalized_output, 0, i))\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, unnormalized_output[:max_pos])\n\n\n\ndef invariant(i: int, max_pos: int, output: List[int], sum: int, unnormalized_output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_scalar_div(sum, unnormalized_output[:i])\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, unnormalized_output[0:max_pos])\n\n\n\ndef invariant(i: int, max_pos: int, output: List[int], sum: int, unnormalized_output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_scalar_div(sum, unnormalized_output[0:i])\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n\n\n\ndef invariant(i: int, max_pos: int, output: List[int], sum: int, unnormalized_output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_scalar_div(sum, vec_slice(unnormalized_output, 0, i))\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n\n\n\ndef invariant(i: int, max_pos: int, output: List[int], sum: int, unnormalized_output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_scalar_div(sum, vec_slice(unnormalized_output, 0, i))\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n\n\n\ndef invariant(i: int, max_pos: int, output: List[int], sum: int, unnormalized_output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_scalar_div(sum, vec_slice(unnormalized_output, 0, i))\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_scalar_div(sum, vec_slice(unnormalized_output, 0, max_pos))\n\n\n\ndef invariant(i: int, max_pos: int, output: List[int], sum: int, unnormalized_output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_scalar_div(sum, vec_slice(unnormalized_output, 0, i))\n", "\ndef softmax_part4(unnormalized_output: List[int], max_pos: int, sum: int) -> List[int]:\n    return vec_slice(vec_scalar_div(sum, unnormalized_output), 0, max_pos)\n\n\n\ndef invariant(i: int, max_pos: int, output: List[int], sum: int, unnormalized_output: List[int]) -> bool:\n    return i >= 0 and i <= max_pos and output == vec_slice(vec_scalar_div(sum, unnormalized_output), 0, i)\n"]
