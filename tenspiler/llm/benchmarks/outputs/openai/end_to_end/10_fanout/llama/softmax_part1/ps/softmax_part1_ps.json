["\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(vec_slice(input, 0, max_pos))\n\n\n\ndef invariant(i: int, input: List[int], max_pos: int, max_val: int) -> bool:\n    return i >= 0 and i <= max_pos and max_val == reduce_max(vec_slice(input, 0, i))\n", "\ndef softmax_part1(input: List[int]) -> int:\n    return reduce_max(input)\n\n\n\ndef invariant(i: int, input: List[int], max_val: int) -> bool:\n    return i >= 0 and i <= len(input) and max_val == reduce_max(input[:i])\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(input[:max_pos])\n\n\n\ndef invariant(i: int, input: List[int], max_val: int) -> bool:\n    return i >= 0 and i <= max_pos and max_val == reduce_max(input[:i])\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(input[:max_pos])\n\n\n\ndef invariant(i: int, input: List[int], max_val: int) -> bool:\n    return i >= 0 and i <= len(input) and max_val == reduce_max(input[:i])\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(input[:max_pos])\n\n\n\ndef invariant(i: int, input: List[int], max_val: int) -> bool:\n    return i >= 0 and i <= max_pos and max_val == reduce_max(input[:i])\n", "C++\n#include <vector>\nusing namespace std;\n\nint softmax_part1(vector<int> input, int max_pos) {\n    int max_val = input[0];\n    for (int i = 1; i < max_pos; i++)\n        if (input[i] > max_val)\n            max_val = input[i];\n    return max_val;\n}\n\n\n\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(input[:max_pos])\n\n\n\ndef invariant(i: int, input: List[int], max_val: int) -> bool:\n    return i >= 1 and i <= max_pos and max_val == reduce_max(input[:i])\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(input[:max_pos])\n\n\n\ndef invariant(i: int, input: List[int], max_pos: int, max_val: int) -> bool:\n    return i >= 0 and i <= max_pos and max_val == reduce_max(input[:i])\n", "\n#defined function\ndef reduce_max(x: List[int]) -> int:\n    return (\n        x[0]\n        if len(x) <= 1\n        else (x[0] if x[0] > reduce_max(x[1:]) else reduce_max(x[1:]))\n    )\n\n#rewritten test function\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(input[:max_pos])\n\n\n\ndef invariant1(i: int, input: List[int], max_val: int) -> bool:\n    return i >= 0 and i <= max_pos and max_val == reduce_max(input[:i])\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(input[:max_pos])\n\n\n\ndef invariant(i: int, input: List[int], max_val: int) -> bool:\n    return i >= 0 and i <= len(input) and max_val == reduce_max(input[:i])\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(input[:max_pos])\n\n\n\ndef invariant(i: int, input: List[int], max_val: int) -> bool:\n    return i >= 0 and i <= max_pos and max_val == reduce_max(input[:i])\n"]
