["\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(vec_slice(input, 0, max_pos))\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(input[:max_pos])\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(vec_slice(input, 0, max_pos))\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(vec_slice(input, 0, max_pos))\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(vec_slice(input, 0, max_pos))\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(vec_slice(input, 0, max_pos))\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(vec_slice(input, 0, max_pos))\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(vec_slice(input, 0, max_pos))\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(vec_slice(input, 0, max_pos))\n", "\ndef softmax_part1(input: List[int], max_pos: int) -> int:\n    return reduce_max(vec_slice(input, 0, max_pos))\n"]