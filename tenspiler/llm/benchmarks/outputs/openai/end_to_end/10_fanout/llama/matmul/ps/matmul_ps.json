["\ndef matmul(weight: List[List[int]], input: List[int]) -> List[int]:\n    return matrix_vec_mul(weight, input)\n\n\n\ndef invariant1(input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\n\n\ndef invariant2(col: int, curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and row >= 0 and row < len(weight) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col]))\n", "\nfrom typing import List\n\ndef matmul(weight: List[List[int]], input: List[int]) -> List[int]:\n    return matrix_vec_mul(weight, input)\n\n\n\nfrom typing import List\n\ndef invariant1(input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return row >= 0 and row <= len(weight) and output[:row] == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(col: int, curr: int, input: List[int], output: List[int], row: int, weight: List[List[int]]) -> bool:\n    return col >= 0 and col <= len(input) and row >= 0 and row < len(weight) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col]))\n", "\ndef matmul(weight, input):\n    return matrix_vec_mul(weight, input)\n\n\n\ndef invariant1(row, output, weight, input):\n    return row >= 0 and row <= m and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(row, col, curr, output, weight, input):\n    return row >= 0 and row < m and col >= 0 and col <= n and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col])) and output == matrix_vec_mul(weight[:row], input)\n", "\ndef matmul(weight: List[List[int]], input: List[int]) -> List[int]:\n    return matrix_vec_mul(weight, input)\n\n\n\ndef invariant1(row: int, output: List[int], weight: List[List[int]], input: List[int]) -> bool:\n    return row >= 0 and row <= m and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(row: int, col: int, curr: int, output: List[int], weight: List[List[int]], input: List[int]) -> bool:\n    return row >= 0 and row < m and col >= 0 and col <= n and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col])) and output == matrix_vec_mul(weight[:row], input)\n", "\n# Rewritten function\ndef matmul(weight: List[List[int]], input: List[int]) -> List[int]:\n    return matrix_vec_mul(weight, input)\n\n# Loop Invariants\ndef invariant1(row: int, weight: List[List[int]], input: List[int], output: List[int]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(row: int, col: int, weight: List[List[int]], input: List[int], output: List[int], curr: int) -> bool:\n    return row >= 0 and row < len(weight) and col >= 0 and col <= len(input) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col])) and output == matrix_vec_mul(weight[:row], input)\n", "\ndef matmul(weight: List[List[int]], input: List[int]) -> List[int]:\n    return matrix_vec_mul(weight, input)\n\n\n\ndef invariant1(row: int, output: List[int], weight: List[List[int]], input: List[int]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(row: int, col: int, curr: int, output: List[int], weight: List[List[int]], input: List[int]) -> bool:\n    return row >= 0 and row < len(weight) and col >= 0 and col <= len(input) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col])) and output == matrix_vec_mul(weight[:row], input)\n", "\ndef matmul(weight: List[List[int]], input: List[int]) -> List[int]:\n    return matrix_vec_mul(weight, input)\n\n\n\nfrom typing import List\n\ndef invariant1(row: int, output: List[int], weight: List[List[int]], input: List[int]) -> bool:\n    return row >= 0 and row <= m and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(row: int, col: int, curr: int, output: List[int], weight: List[List[int]], input: List[int]) -> bool:\n    return row >= 0 and row < m and col >= 0 and col <= n and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col])) and output == matrix_vec_mul(weight[:row], input)\n", "\ndef matmul(weight: List[List[int]], input: List[int]) -> List[int]:\n    return matrix_vec_mul(weight, input)\n\n\n\ndef invariant1(row: int, weight: List[List[int]], input: List[int], output: List[int]) -> bool:\n    return row >= 0 and row <= m and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(row: int, col: int, weight: List[List[int]], input: List[int], output: List[int], curr: int) -> bool:\n    return row >= 0 and row <= m and col >= 0 and col <= n and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col])) and output == matrix_vec_mul(weight[:row], input)\n", "\ndef matmul(weight: List[List[int]], input: List[int]) -> List[int]:\n    return matrix_vec_mul(weight, input)\n\n\n\ndef invariant1(row: int, weight: List[List[int]], input: List[int], output: List[int]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(row: int, col: int, curr: int, weight: List[List[int]], input: List[int], output: List[int]) -> bool:\n    return row >= 0 and row < len(weight) and col >= 0 and col <= len(input) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col])) and output == matrix_vec_mul(weight[:row], input)\n", "\ndef matmul(weight: List[List[int]], input: List[int]) -> List[int]:\n    return matrix_vec_mul(weight, input)\n\n\n\ndef invariant1(row: int, weight: List[List[int]], input: List[int], output: List[int]) -> bool:\n    return row >= 0 and row <= len(weight) and output == matrix_vec_mul(weight[:row], input)\n\ndef invariant2(row: int, col: int, weight: List[List[int]], input: List[int], output: List[int], curr: int) -> bool:\n    return row >= 0 and row < len(weight) and col >= 0 and col <= len(input) and curr == reduce_sum(vec_elemwise_mul(weight[row][:col], input[:col])) and output == matrix_vec_mul(weight[:row], input)\n"]
