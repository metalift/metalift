["\nimport numpy as np\n\ndef dissolve_blend_8(base, active, opacity, rand_cons):\n    if not (isinstance(base, list) and all(isinstance(row, list) and all(isinstance(val, int) for val in row) for row in base)):\n        raise TypeError(f\"Base matrix must be a list of lists of integers. Got {type(base)}\")\n    if not (isinstance(active, list) and all(isinstance(row, list) and all(isinstance(val, int) for val in row) for row in active)):\n        raise TypeError(f\"Active matrix must be a list of lists of integers. Got {type(active)}\")\n    if not all(len(row) == len(base[0])) or len(base) != len(active):\n        raise ValueError(f\"Base and active matrices must have the same dimensions. Got {len(base[0])} vs {len(active[0])}, {len(base)} vs {len(active)}\")\n    if not (0 <= opacity <= 100) or not (0 <= rand_cons <= 100):\n        raise ValueError(f\"Opacity and random consistency must be in range [0, 100]. Got opacity={opacity}, rand_cons={rand_cons}\")\n\n    base, active = np.array(base), np.array(active)\n    random_values = np.random.rand(*base.shape) * (100 - rand_cons)\n    mask = (opacity - random_values) >= 0\n    blended = np.where(mask[..., None], active, base)\n\n    return blended.tolist()\n\n# Example usage:\nbase = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nactive = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\nopacity = 70\nrand_cons = 30\n\nprint(dissolve_blend_8(base, active, opacity, rand_cons))\n"]
