["\ndef invariant1(active: List[List[int]], base: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_where(base[:row], active[:row], lambda x, y: ite(x > y, y, x))\n\ndef invariant2(active: List[List[int]], base: List[List[int]], col: int, out: List[List[int]], row: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and out == matrix_where(base[:row], active[:row], lambda x, y: ite(x > y, y, x)) and row_vec == vector_where(base[row][:col], active[row][:col], lambda x, y: ite(x > y, y, x))\n"]
