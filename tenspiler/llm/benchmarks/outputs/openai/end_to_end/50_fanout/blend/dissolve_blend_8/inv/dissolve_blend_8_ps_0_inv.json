["\ndef invariant1(active: List[List[int]], base: List[List[int]], opacity: int, out: List[List[int]], rand_cons: int, row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_where(\n        matrix_row_slice(base, 0, row),\n        matrix_row_slice(active, 0, row),\n        lambda x, y: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, y, x)\n    )\n\ndef invariant2(active: List[List[int]], base: List[List[int]], col: int, opacity: int, out: List[List[int]], rand_cons: int, row: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and out == matrix_where(\n        matrix_row_slice(base, 0, row),\n        matrix_row_slice(active, 0, row),\n        lambda x, y: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, y, x)\n    ) and row_vec == vector_where(\n        vec_slice(base[row], 0, col),\n        vec_slice(active[row], 0, col),\n        lambda x, y: ite(opacity - ((rand_cons % 100) + 1) // 100 >= 0, y, x)\n    )\n"]
