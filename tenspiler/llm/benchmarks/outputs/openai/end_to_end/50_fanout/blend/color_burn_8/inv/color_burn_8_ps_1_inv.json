["\ndef invariant1(active: List[List[int]], base: List[List[int]], out: List[List[int]], row: int) -> bool:\n    return row >= 0 and row <= len(base) and out == matrix_where(\n        matrix_row_slice(active, 0, row),\n        matrix_scalar_sub(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, matrix_row_slice(base, 0, row)),\n            matrix_where(\n                matrix_row_slice(active, 0, row),\n                matrix_row_slice(active, 0, row),\n                lambda x, y: 1\n            )\n        )),\n        lambda x, y: 32\n    )\n\ndef invariant2(active: List[List[int]], base: List[List[int]], col: int, out: List[List[int]], row: int, row_vec: List[int]) -> bool:\n    return col >= 0 and col <= len(base[0]) and row >= 0 and row < len(base) and out == matrix_where(\n        matrix_row_slice(active, 0, row),\n        matrix_scalar_sub(32, matrix_elemwise_div(\n            matrix_scalar_sub(32, matrix_row_slice(base, 0, row)),\n            matrix_where(\n                matrix_row_slice(active, 0, row),\n                matrix_row_slice(active, 0, row),\n                lambda x, y: 1\n            )\n        )),\n        lambda x, y: 32\n    ) and row_vec == vector_where(\n        vec_slice(active[row], 0, col),\n        vec_scalar_sub(32, vec_elemwise_div(\n            vec_scalar_sub(32, vec_slice(base[row], 0, col)),\n            vector_where(\n                vec_slice(active[row], 0, col),\n                vec_slice(active[row], 0, col),\n                lambda x, y: 1\n            )\n        )),\n        lambda x, y: 32\n    )\n"]
