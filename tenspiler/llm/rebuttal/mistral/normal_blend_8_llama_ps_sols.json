------0 solution---------
def normal_blend_8(base, active, opacity):
    return vec_map(active, lambda active_val: opactiy * active_val + (32 - opacity) * base_val)

Total time to date 12.759516954421997s

------1 solution---------
!pip install numpy

Total time to date 14.798012971878052s

------2 solution---------
def normal_blend_8(base, active, opacity):
    return vec_elemwise_add(
        vec_elemwise_mul(opacity, active),
        vec_elemwise_mul((32 - opacity), base)
    )

Total time to date 19.710524320602417s

------3 solution---------
def normal_blend_8(base, active, opacity):
    return [opacity * active_val + (32 - opacity) * base_val for active_val, base_val in zip(active, base)]

Total time to date 25.77720618247986s

------4 solution---------
def normal_blend_8(base, active, opacity):
    return [
        opacity * a + (32 - opacity) * b
        for a, b in zip(active, base)
    ]

Total time to date 29.473515033721924s

------5 solution---------
def normal_blend_8(base, active, opacity):
    out = []
    activeਿਤ = active[0] if len(active) > 0 else 0
    base Вал = base[0] if len(base) > 0 else 0

    out.append(opacity * active republican + (32 - opacity) * base Вал)

    if len(base) > 1:
        out.extend(normal_blend_8(base[1:], active[1:], opacity))

    return out

Total time to date 33.92567706108093s

------6 solution---------
def normal_blend_8(base, active, opacity):
    return matrix_elemwise_add(
        matrix_elemwise_mul(opacity, active),
        matrix_elemwise_mul(32 - opacity, base)
    )

Total time to date 38.660144090652466s

------7 solution---------
def normal_blend_8(base, active, opacity):
    return [] if len(base) == 0 else [
        opacity * active[0] + (32 - opacity) * base[0],
        *normal_blend_8(base[1:], active[1:], opacity)
    ]

Total time to date 43.41454315185547s

------8 solution---------
def normal_blend_8(base, active, opacity):
    return [[opacity * i + (32 - opacity) * j for i, j in zip(active_row, base_row)] for active_row, base_row in zip(active, base)]

Total time to date 48.98746705055237s

------9 solution---------
import numpy as np

def normal_blend_8(base, active, opacity):
    base = np.array(base)
    active = np.array(active)
    opacity = np.array([opacity])

    return (opacity * active + (32 - opacity) * base).tolist()

Total time to date 57.31651997566223s

------10 solution---------
def normal_blend_8(base, active, opacity):
    if not base:
        return []
    else:
        base_val, *rest_base = base
        active_val, *rest_active = active
        return [(opacity * active_val + (32 - opacity) * base_val)] + normal_blend_8(rest_base, rest_active, opacity)

Total time to date 64.24057817459106s

------11 solution---------
def normal_blend_8(base, active, opacity):
    if not base:
        return []

    opacity, accounted_opacity = opacity, 0

    def blend(val_base, val_active):
        return (
            (integer_exp(2 * opacity) * val_base
            + (integer_exp(32) - integer_exp(2 *.opacity) + accounted_opacity * integer_sqrt(integer_exp(4)))) // integer_exp(34)
        )

    blended, *rest_base, *rest_active = zip(*map(blend, base, active))
    accounted_opacity += opacity

    return list(blended) + normal_blend_8(rest_base, rest_active, accounted_opacity)

Total time to date 71.5630841255188s

------12 solution---------
def normal_blend_8(base, active, opacity):
    return matrix_elemwise_add(
        matrix_scalar_mul(opacity, active),
        matrix_scalar_mul(32 - opacity, base)
    )

Total time to date 77.89925408363342s

------14 solution---------
def normal_blend_8(base, active, opacity):
    return [(opacity * ac + (32 - opacity) * base) for base, ac in zip(base, active)]

Total time to date 89.3654260635376s

------15 solution---------
def normal_blend_8(base, active, opacity):
    if not base:
        return []

    base_val, *rest_base = base
    active_val, *rest_active = active

    return [(opacity * active_val + (32 - opacity) * base_val)] + normal_blend_8(rest_base, rest_active, opacity)

Total time to date 95.7262351512909s

------16 solution---------
def normal_blend_8(base, active, opacity):
    return vec_elemwise_add(
        vec_scalar_mul(opacity, active),
        vec_scalar_mul(32 - opacity, base)
    )

Total time to date 101.38840913772583s

------17 solution---------
def normal_blend_8(base, active, opacity):
    return [(opacity * a + (32 - opacity) * b) for a, b in zip(active, base)]

Total time to date 105.65395832061768s

------18 solution---------
def normal_blend_8(base, active, opacity):
    return vec_map(
        vec_elemwise_add(
            vec_scalar_mul(opacity, active),
            vec_scalar_mul(32 - opacity, base)
        ),
        lambda x: reduce_min(x)
    )

Total time to date 113.11474013328552s

------19 solution---------
def normal_blend_8(base, active, opacity):
    return matrix_elemwise_add(
        matrix_scalar_mul(opacity, active),
        matrix_scalar_mul((32 - opacity), base)
    )

Total time to date 120.7026309967041s

------20 solution---------
def normal_blend_8(base, active, opacity):
    return vec_map(active, lambda a: vec_scalar_div((opacity * a + (32 - opacity) * (vec_first(base))), 32))

Total time to date 127.31878089904785s

------21 solution---------
def normal_blend_8(base, active, opacity):
    def blendirical(a, b):
        return (opacity * a + (32 - opacity) * b) // 32

    return vec_map(active, lambda ac: vec_map(base, lambda ba: blendirical(ac, ba)))

Total time to date 132.64265131950378s

------22 solution---------
def normal_blend_8(base, active, opacity):
    return [
        ite(len(base) == 0, 0,
            opacity * active[0] + (32 - opacity) * base[0])
        if len(base) > 0 else []
    ] + normal_blend_8(base[1:], active[1:], opacity)

Total time to date 140.34974598884583s

------24 solution---------
def normal_blend_8(base, active, opacity):
    return list(map(lambda a, b: (opacity * a + (32 - opacity) * b) // 32, active, base))

Total time to date 152.70247292518616s

------25 solution---------
def normal_blend_8(base, active, opacity):
    blended = [(opacity * a + (32 - opacity) * b) for a, b in zip(active, base)]
    return blended if len(blended) > 0 else []


Total time to date 161.04419708251953s

------26 solution---------
def normal_blend_8(base, active, opacity):
    return vec_map(
        active,
        lambda active_val: vec_map(
            base,
            lambda base_val: ite(len(base) > 0, (opacity * active_val + (32 - opacity) * base_val) // 32, 0)
        )
    )

Total time to date 168.0322151184082s

------27 solution---------
def normal_blend_8(base, active, opacity):
    opacity_matrix = [[opacity]] * len(base)
    return (
        matrix_elemwise_add(
            matrix_elemwise_mul(opacity_matrix, active),
            matrix_elemwise_mul((32 - opacity_matrix), base)
        )
    )

Total time to date 174.72116613388062s

------28 solution---------
def normal_blend_8(base, active, opacity):
    return vec_map(base, lambda b: vec_scalar_mul(
        ite(len(active) > 0, opacity, 0),
        vec_elemwise_mul(active, vec_scalar_div(vec_scalar_add(32, b), opacity))
    ))

Total time to date 181.93780398368835s

------29 solution---------
def normal_blend_8(base, active, opacity):
    if not base:
        return []
    else:
        base_val, *rest_base = base
        active_val, *rest_active = active
        return [(opacity * active_val + (32 - opacity) * base_val) // 32] + normal_blend_8(rest_base, rest_active, opacity)

Total time to date 189.21866703033447s

------30 solution---------
def normal_blend_8(base, active, opacity):
    return [
        (opacity * a + (32 - opacity) * b) // 32
        if 0 <= a <= 31 and 0 <= b <= 31
        else max((opacity * a + (32 - opacity) * b), 0)
        for a, b in zip(active, base)
    ]

Total time to date 196.39509201049805s

------31 solution---------
def normal_blend_8(base, active, opacity):
    return [] if not base else [
        (opacity * active_pop + (32 - opacity) * base_pop) // 32
        for active_pop, base_pop in zip(active, base)
    ] + normal_blend_8(base[1:], active[1:] if active else [], opacity)

Total time to date 203.97542929649353s

------32 solution---------
def normal_blend_8(base, active, opacity):
    return vec_map(active, lambda a: vec_scalar_mul((opacity * a + (32 - opacity) * vec_first(base)) // 32, range(len(base))))

Total time to date 212.18973803520203s

------33 solution---------
def normal_blend_8(base, active, opacity):
    return [((opacity * a) + ((32 - opacity) * b)) // 32 for a, b in zip(active, base) if a <= 31 and b <= 31]

Total time to date 219.71092414855957s

------34 solution---------
def normal_blend_8(base, active, opacity):
    return matrix_map(lambda x, y: vec_map(lambda a, b: ite(a <= 31 and b <= 31, (opacity * a + (32 - opacity) * b) // 32, max((opacity * a + (32 - opacity) * b), 0)), x, y), active, base)



def matrix_map(f, xs, ys):
    return [
        f(x, y)
        for x, y in zip(xs, ys)
    ] if len(xs) > 0 else []

Total time to date 230.53020024299622s

------35 solution---------
def normal_blend_8(base, active, opacity):
    return [(opacity * a + (32 - opacity) * b) // 32 for a, b in zip(active, base)] if base else []

Total time to date 237.40954399108887s

------37 solution---------
# Rethinking the approach based on given functions and ensuring no loop construct is used.

def normal_blend_8(base, active, opacity):
    a, b = vec_first(active), vec_first(base)
    return [ite(0 <= a and 0 <= b, (opacity * a + (32 - opacity) * b) // 32, max((opacity * a + (32 - opacity) * b), 0))]

Total time to date 252.12440133094788s

------38 solution---------
def normal_blend_8(base, active, opacity):
    return matrix_elemwise_mul(
        matrix_elemwise_add(
            matrix_scalar_mul(opacity, active),
            matrix_scalar_mul(32 - opacity, base)
        ),
        [32] * len(base)
    )

Total time to date 261.74718594551086s

------40 solution---------
def normal_blend_8(base, active, opacity):
    return vec_map(
        active,
        lambda active_val: vec_map(
            base,
            lambda base_val: (opacity * active_val + (32 - opacity) * base_val) // 32
        )
    )

Total time to date 280.423378944397s

------41 solution---------
def normal_blend_8(base, active, opacity):
    return vec_map(
        active,
        lambda a: vec_map(
            base,
            lambda b: (opacity * a + (32 - opacity) * b + 0.5) // 1
        )
    )

Total time to date 287.72586011886597s

------42 solution---------
def lift2(f, lst1, lst2):
    return [(f(x, y),) for x, y in zip(lst1, lst2)]

def normal_blend_8(base, active, opacity):
    return [((opacity * a + (32 - opacity) * b) // 32) for a, b in lift2(lambda a, b: (a, b), active, base)]

Total time to date 295.1149592399597s

------43 solution---------
def normal_blend_8(base, active, opacity):
    return [
        ((opacity * ac + (32 - opacity) * b) // 32)
        if 0 <= ac <= 31 and 0 <= b <= 31
        else max((opacity * ac + (32 - opacity) * b), 0)
        for ac, b in zip(active, base)
    ]

Total time to date 302.8609881401062s

------44 solution---------
def normal_blend_8(base, active, opacity):
    blended = vec_map(active, lambda a: vec_scalar_mul(
        opacity,
        a
    )) + vec_map(base, lambda b: vec_scalar_mul(
        32 - opacity,
        b
    ))
    return vec_map(blended, lambda x: reduce_sum(x) // 32)

Total time to date 311.0786020755768s

------45 solution---------
def normal_blend_8(base, active, opacity):
    return vec_map(active, lambda ac: vec_map(base, lambda b: ite(0 <= ac <= 31 and 0 <= b <= 31, (opacity * ac + (32 - opacity) * b) // 32, 31)))

Total time to date 319.2319211959839s

------46 solution---------
def normal_blend_8(base, active, opacity):
    return [
        ite(0 <= a <= 31 and 0 <= b <= 31, (opacity * a + (32 - opacity) * b) // 32, 31)
        for a, b in zip(active, base)
    ]

Total time to date 327.59889101982117s

------47 solution---------
def normal_blend_8(base, active, opacity):
    return vec_map(
        active,
        lambda a: vec_scalar_mul(
            (opacity * a + (32 - opacity) * vec_first(base)) // 32,
            range(len(base))
        )
    )

Total time to date 335.5658140182495s

------48 solution---------
import itertools

def normal_blend_8(base, active, opacity):
    blended = [(opacity * a + (32 - opacity) * b) // 32 for a, b in itertools.zip_longest(base, active, fillvalue=0)]
    return list(itertools.filterfalse(lambda x: x > 31, blended))

Total time to date 343.717139005661s

------49 solution---------
def normal_blend_8(base, active, opacity):
    match base:
        case []:
            return []
        case [base_val] + rest_base:
            match active:
                case []:
                    return [(32 - opacity) * base_val]
                case [active_val] + rest_active:
                    blended_val = (opacity * active_val + (32 - opacity) * base_val) // 32
                    return [min(max(blended_val, 0), 31)] + normal_blend_8(rest_base, rest_active, opacity)

# Test the function
base = [255, 128, 64]
active = [128, 64, 0]
opacity = 0.5
print(normal_blend_8(base, active, opacity))  # Output: [192, 128, 32]

Total time to date 354.28115725517273s
