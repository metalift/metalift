------0 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y), base, active)

Total time to date 17.38000512123108s

------1 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_where(base, matrix_plug_int(32, active), lambda x, y: ite(y == 0, 32, 32 - (32 - x) // y))



def matrix_plug_int(a: int, matrix_x: List[List[int]]) -> List[List[int]]:
    return matrix_map(lambda _: a, matrix_x)

Total time to date 24.058840036392212s

------2 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return [
        [
            32 - ((32 - x) // y) if y else 32
            for x, y in zip(row_base, row_active)
        ]
        for row_base, row_active in zip(base, active)
    ]

Total time to date 29.70918297767639s

------3 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    def transform_pixel(x, y):
        return 32 * (1 - (y - (x // 32) if y > 0 else x) / y) if y != 0 else 32

    return matrix_map(transform_pixel, base, map vec_len(active, int))

def vec_len(x: List[int], y: int) -> List[int]:
    return [y] * len(x)

Total time to date 35.49564290046692s

------4 solution---------
def color_burn_8(base, active):
    return matrix_map(lambda x, y: 32 * ((32 - x) / (y if y > 0 else 1)), base, active)

Total time to date 41.848618030548096s

------5 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    if len(base) < 1 or not len(base) == len(active):
        return []
    else:
        return [
            [
                0 if y == 0 else ((32 * (32 - x)) // y)
                for x, y in zip(base[0], active[0])
            ],
            *color_burn_8(base[1:], active[1:])
        ]

Total time to date 49.07915806770325s

------6 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(lambda x, y: ite(y == 0, 32, vec_scalar_div(32 * (32 - x), y)), base, active)

Total time to date 55.40860390663147s

------7 solution---------
def color_burn_8(base, active):
    return matrix_where(
        base,
        active,
        lambda x, y: 32 if y == 0 else 32 - int((32 - x) / y) * y
    )

Total time to date 62.9829261302948s

------8 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return [[min(255, 32 - (32 - x) // y) if y else 32) for x, y in zip(row_base, row_active)] for row_base, row_active in zip(base, active)]

Total time to date 69.19561100006104s

------9 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(lambda x, y: vec_scalar_div(32 * (32 - x), y) if y else 32, base, active)

Total time to date 76.27891993522644s

------10 solution---------
def color_burn_8(base, active):
    return [
        [32 * (1 - ((y or 1) - x / 32)) if y else 32 for x, y in zip(row_base, row_active)]
        for row_base, row_active in zip(base, active)
    ]

Total time to date 83.28405618667603s

------11 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(
        lambda x, y: ite(
            y == 0,
            32,
            32 - ((32 - x) // y) * y
        ),
        base,
        active
    )

Total time to date 90.5977668762207s

------12 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return [
        [32 - ((32 - x) // y) if y else 32 for x, y in zip(row, act_row)]
        for row, act_row in zip(base, active)
    ]

Total time to date 98.64634013175964s

------13 solution---------
def color_burn_8(base, active):
    def transform_transform_row(row_base, row_active):
        return [transform_pixel(x, y) for x, y in zip(row_base, row_active)]

    def transform_pixel(x, y):
        if y == 0:
            return 32
        else:
            return 32 - (32 - x) // y

    return [transform_transform_row(row_base, row_active) for row_base, row_active in zip(base, active)]

Total time to date 106.43477606773376s

------14 solution---------
def color_burn_8(base, active):
    return [[min(32, 32 - (x / y)) if y else 32) for x, y in zip(row, act_row)] for row, act_row in zip(base, active)]

Total time to date 111.33435916900635s

------15 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(
        lambda x, y: ite(
            y == 0,
            32,
            ite(x > 32, 255, 32 - ((32 - x) // y) * y)
        ),
        base,
        active
    )

Total time to date 118.60689687728882s

------16 solution---------
def color_burn_8(base, active):
    return matrix_map(
        lambda b, a: [0 if ai == 0 else (32 - (32 - bi) // ai) for bi, ai in zip(row_base, row_active)],
        base,
        active
    )

Total time to date 127.46605110168457s

------17 solution---------
def color_burn_8(base, active):
    m, n = len(base), len(base[0])
    out = [[0] * n for _ in range(m)]
    for i in range(m):
        for j in range(n):
            if active[i][j] == 0:
                out[i][j] = 32
            else:
                q = (32 - base[i][j]) / active[i][j]
                out[i][j] = 32 - (q // 1) * active[i][j]
    return out

Total time to date 135.16264390945435s

------18 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(lambda x, y: min(32, 32 - (32 - x) // (y if y != 0 else 1)), base, active)

Total time to date 142.6999921798706s

------19 solution---------
def color_burn_8(base, active):
    return [[min(255, 32 * (32 - row_base[i] // row_active[i] if row_active[i] > 0 else 0)) if row_active else 32
            for i in range(len(row_base))]
           for row_base, row_active in zip(base, active)]

Total time to date 150.20718216896057s

------20 solution---------
def color_burn_8(base, active):
    return matrix_map(
        lambda b, a: ite(
            a == 0,
            32,
            ite(b > 32, 255, 32 - ((32 - b) // a))
        ),
        base,
        active
    )

Total time to date 158.27906608581543s

------21 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return base_product(base, active) if active_max(active) != 0 else base_max(base)



def base_product(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return [
        [max(0, 255 - ((base_row[i] - 32) // active_row[i] * active_row[i]))) if active_row[i] else 32 for i in range(len(base_row))]
        for base_row, active_row in zip(base, active)
    ] if len(base) > 0 else []

def active_max(active: List[List[int]]) -> int:
    return max([max(row) for row in active])

def base_max(base: List[List[int]]) -> List[List[int]]:
    return [[32] * len(base_row) for base_row in base]

Total time to date 167.58986902236938s

------22 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(lambda x, y: 32 * (1 - ((y or 1) - x / 32)), base, active)

Total time to date 174.7256178855896s

------23 solution---------
def color_burn_8(base, active):
    def burn_row(base_row, active_row):
        return [min(255, 32 - (32 - b) // a) if a else 32 for b, a in zip(base_row, active_row)]

    return [burn_row(base_row, active_row) for base_row, active_row in zip(base, active)] if base else []

Total time to date 182.2121980190277s

------24 solution---------
import numpy as np

def color_burn_8(base: np.ndarray, active: np.ndarray) -> np.ndarray:
    return np.where(active == 0, 32, 32 - (32 - base) // active).astype(int)



base_arr = np.array(base)
active_arr = np.array(active)

result = color_burn_8(base_arr, active_arr)

# If you want to convert the result back to a list of lists:
result_list = result.tolist()

Total time to date 191.3553547859192s

------25 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(
        lambda b, a: ite(
            a == 0,
            32,
            32 - ite(b > 32, 255, (32 - b) // a) * a
        ),
        base,
        active
    )

Total time to date 199.097088098526s

------26 solution---------
def color_burn_8(base, active):
    rows = matrix_map(lambda x, y: vec_map(lambda b, a: ite(a == 0, 32, ite(b > 32, 255, 32 - ((32 - b) // a) * a)), x, y), base, active)
    return firsts(rows)

Total time to date 207.8693618774414s

------27 solution---------
def color_burn_8(base, active):
    return matrix_map(
        lambda b, a: 32 * (1 - ((a or 1) - b / 32)),
        base,
        active
    )

Total time to date 215.29370999336243s

------28 solution---------Understood. Please provide me with the satellite number this time.
Total time to date 218.78428602218628s

------29 solution---------
def color_burn_8(base, active):
    def pixel_transform(b, a):
        if a == 0:
            return 32
        else:
            q = (32 - b) / a
            return 32 - (q // 1) * a

    return matrix_map(pixel_transform, base, active)

Total time to date 228.27919101715088s

------30 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return [
        [
            32 - (32 - x) // y if y else 32
            for x, y in zip(row_base, row_active)
        ]
        for row_base, row_active in zip(base, active)
    ]

Total time to date 235.59842205047607s

------31 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(lambda x, y: vec_len([32 - (32 - i) // j * j if j != 0 else 32] for i, j in zip(x, y)), base, active)

Total time to date 244.1959319114685s

------32 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(
        lambda x, y: ite(
            y == 0,
            32,
            min(32, 32 - (32 - x) // y)
        ),
        base,
        active
    )

Total time to date 254.13080096244812s

------33 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(
        lambda b, a: ite(
            a == 0,
            32,
            ite(
                b > 32,
                255,
                32 - min(31, (32 - b) // a)
            )
        ),
        base,
        active
    )

Total time to date 263.83991718292236s

------34 solution---------
def color_burn_8(base, active):
    return matrix_map(
        lambda b, a: ite(
            a == 0,
            32,
            32 - min(255, ((32 - b) * 32) // a)
        ),
        base,
        active
    )

Total time to date 272.2403619289398s

------35 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    mask = [[1 if a else 0 for a in row] for row in active]
    exposed = [[max(0, 32 - (32 - b) // (a if a != 0 else 1)) * a for b, a in zip(row_base, row_active)] for row_base, row_active in zip(base, active)]
    return [[ brillante * m + 32 * (1 - m) for brillante, m in zip(r, mask_r)] for r, mask_r in zip(exposed, mask)]

Total time to date 282.7183620929718s

------36 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    m, n = len(base), len(base[0])
    if m == 0 or n == 0:
        return []

    result_row = []
    for i in range(n):
        if active[0][i] == 0:
            result_row.append(32)
        else:
            q = (32 - base[0][i]) / active[0][i]
            q = min(255, q // 1)
            result_row.append(32 - q * active[0][i])

    return [result_row] + color_burn_8(base[1:], active[1:])

Total time to date 293.45573806762695s

------37 solution---------
def scale(b, a):
    if a == 0:
        return 32
    elif b > 32:
        return 255
    else:
        return 32 - ((32 - b) // a)

def color_burn_8(base, active):
    return matrix_map(scale, base, active)

Total time to date 301.38980984687805s

------38 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    if not base or not active:
        return []
    return [
        [32 - (32 - x) // y if y else 32 for x, y in zip(row_base, row_active)]
        for row_base, row_active in zip(base[0], active[0])
    ] + color_burn_8(base[1:], active[1:])

Total time to date 309.5313951969147s

------39 solution---------
def color_burn_8(base, active):
    return [
        [min(32, 32 - ((base_row[i] * 32) // active_row[i] if active_row[i] > 0 else 0)) for i in range(len(base_row))]
        for base_row, active_row in zip(base, active)
    ]

Total time to date 316.49068117141724s

------40 solution---------
def burn_pixel(b, a):
    if a == 0:
        return 32
    elif b > 32:
        return 255
    else:
        return 32 - min(32, (32 - b) // a * a)

def color_burn_8(base, active):
    return [[burn_pixel(x, y) for x, y in zip(row_base, row_active)] for row_base, row_active in zip(base, active)]

Total time to date 324.27480697631836s

------41 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return [[min(255, 32 - ((32 - b) // a if a else 0)) for b, a in zip(row_base, row_active)] for row_base, row_active in zip(base, active)]

Total time to date 334.2988531589508s

------42 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return [[min(255, 32 - (32 - b) // a) if a else 32 for b, a in zip(row_base, row_active)] for row_base, row_active in zip(base, active)]

Total time to date 343.668653011322s

------43 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(
        lambda b, a: ite(
            a == 0,
            32,
            32 - min(32, (32 - b) // a)
        ),
        base,
        active
    )

Total time to date 353.94223403930664s

------44 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    return matrix_map(
        lambda x, y: 32 * (1 - ((y or 1) - (x / 32))),
        base,
        active
    )

Total time to date 362.05316615104675s

------45 solution---------
def color_burn_8(base, active):
    return [[32 - divmod(32 - b, a)[1] * a if a else 32 for b, a in zip(row_base, row_active)] for row_base, row_active in zip(base, active)]

Total time to date 370.94383788108826s

------46 solution---------
def color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:
    result = [[0] * len(row) for row in base]
    for i, row in enumerate(base):
        for j, val in enumerate(row):
            if active[i][j] == 0:
                result[i][j] = 32
            else:
                q = (32 - val) / active[i][j]
                result[i][j] = 32 - min(255, q * active[i][j])
    return result

Total time to date 380.8549590110779s

------47 solution---------
def color_burn_8(base, active):
    result = []
    for b, a in zip(base, active):
        row = []
        for i, j in zip(b, a):
            if j == 0:
                row.append(32)
            else:
                q = (32 - i) / j
                row.append(32 - (q * j) // 1)
        result.append(row)
    return result

Total time to date 388.6496250629425s

------48 solution---------
def color_burn_8(base, active):
    return matrix_map(
        lambda x, y: ite(
            y == 0,
            32,
            32 - min(255, (32 - x) // y * y)
        ),
        base,
        active
    )

Total time to date 396.80515718460083s

------49 solution---------
import numpy as np

def color_burn_8(base, active):
    base = np.array(base)
    active = np.array(active)

    # Replace 0s in active with 1 to avoid division by zero
    active[active == 0] = 1

    result = (32 - np.divmod(32 - base, active)[1]) * active + 32 * (1 - active)
    return result.tolist()

Total time to date 406.24861311912537s
