------0th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return matrix_vec_mul(
        matrix_row_slice(key_cache_layer, 0, token_position + 1),
        vec_slice(attention, 0, token_position + 1)
    )[head * head_size : (head + 1) * head_size]

Parsed PS solution
Failed to run tests: expected [11], but got [8]
------1th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:

    return matrix_vec_mul(
        [
            vec_elemwise_mul(
                vec_slice(attention, 0, token_position + 1),
                vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)
            )
            for i in range(head_size)
        ],
        [1] * (token_position + 1)
    )

Failed to parse PS solution Unsupported node ListComprehension:16(
  GeneratorExpr:16(
    CallExpr:17(
      NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
      Args(
        CallExpr:18(
          NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
          Args(
            NameExpr(attention [l])
            IntExpr(0)
            OpExpr:18(
              +
              NameExpr(token_position [l])
              IntExpr(1))))
        CallExpr:19(
          NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
          Args(
            CallExpr:19(
              NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
              Args(
                NameExpr(key_cache_layer [l])
                OpExpr:19(
                  +
                  OpExpr:19(
                    *
                    NameExpr(head [l])
                    NameExpr(head_size [l]))
                  NameExpr(i [l]))))
            IntExpr(0)
            OpExpr:19(
              +
              NameExpr(token_position [l])
              IntExpr(1))))))
    NameExpr(i* [l])
    CallExpr:21(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------2th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return matrix_vec_mul(
        matrix_row_slice(key_cache_layer, 0, token_position + 1),
        vec_scalar_mul(
            head,
            vec_slice(attention, 0, token_position + 1)
        )
    )

Parsed PS solution
Failed to run tests: expected [11], but got [0, 0]
------3th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:

    return matrix_vec_mul(
        matrix_row_slice(
            matrix_transpose(
                matrix_col_slice(
                    key_cache_layer, head * head_size, (head + 1) * head_size
                )
            ),
            0,
            token_position + 1
        ),
        vec_slice(attention, 0, token_position + 1)
    )

Parsed PS solution
Failed to run tests: expected [21], but got []
------4th PS solution--------

from typing import List

def transformer_part2(token_position: int, head: int, head_size: int, key_cache_layer: List[List[int]], attention: List[int]) -> List[int]:
    return [reduce_sum(vec_elemwise_mul(attention[:token_position+1], col_vec(matrix_row_slice(key_cache_layer, 0, token_position+1), head * head_size + i))) for i in range(head_size)]

Failed to parse PS solution Unsupported node ListComprehension:8(
  GeneratorExpr:8(
    CallExpr:8(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:8(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:8(
              NameExpr(attention [l])
              SliceExpr:8(
                <empty>
                OpExpr:8(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:8(
              NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
              Args(
                CallExpr:8(
                  NameExpr(matrix_row_slice [tenspiler.llm.python_dsl.matrix_row_slice])
                  Args(
                    NameExpr(key_cache_layer [l])
                    IntExpr(0)
                    OpExpr:8(
                      +
                      NameExpr(token_position [l])
                      IntExpr(1))))
                OpExpr:8(
                  +
                  OpExpr:8(
                    *
                    NameExpr(head [l])
                    NameExpr(head_size [l]))
                  NameExpr(i [l]))))))))
    NameExpr(i* [l])
    CallExpr:8(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------5th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return vec_map(
        range(head_size),
        lambda i: reduce_sum(vec_elemwise_mul(
            attention[:token_position + 1],
            col_vec(key_cache_layer[:token_position + 1], head * head_size + i)
        ))
    )

Failed to parse PS solution Unknown function range
------6th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:

    return matrix_vec_mul(
        matrix_col_slice(
            matrix_row_slice(key_cache_layer, 0, token_position + 1),
            head * head_size,
            (head + 1) * head_size
        ),
        attention[:token_position + 1]
    )

Parsed PS solution
Failed to run tests: expected [11], but got []
------7th PS solution--------

def transformer_part2(token_position, head, head_size, key_cache_layer, attention):
    return matrix_vec_mul([vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1) for i in range(head_size)], attention)

Failed to parse PS solution Unsupported type None
------8th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(attention[: token_position + 1], col_vec(key_cache_layer, head * head_size + i)))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:15(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:15(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:15(
              NameExpr(attention [l])
              SliceExpr:15(
                <empty>
                OpExpr:15(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:15(
              NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
              Args(
                NameExpr(key_cache_layer [l])
                OpExpr:15(
                  +
                  OpExpr:15(
                    *
                    NameExpr(head [l])
                    NameExpr(head_size [l]))
                  NameExpr(i [l]))))))))
    NameExpr(i* [l])
    CallExpr:16(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------9th PS solution--------

def transformer_part2(token_position, head, head_size, key_cache_layer, attention):
    return matrix_vec_mul(matrix_col_slice(key_cache_layer, 0, token_position + 1),
                          vec_scalar_mul(attention[token_position],
                                         col_vec(key_cache_layer, head * head_size)))

Failed to parse PS solution Unsupported type None
------10th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(
            vec_slice(attention, 0, token_position + 1),
            vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)
        )) for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:12(
  GeneratorExpr:12(
    CallExpr:13(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:13(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:14(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:14(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:15(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:15(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:15(
                      +
                      OpExpr:15(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:15(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:16(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------11th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:

    return matrix_vec_mul(
        [vec_elemwise_mul(
            vec_slice(attention, 0, token_position + 1),
            vec_slice(matrix_transpose(key_cache_layer)[head * head_size + i], 0, token_position + 1)
        ) for i in range(head_size)],
        [1] * (token_position + 1)
    )

Failed to parse PS solution Unsupported node ListComprehension:16(
  GeneratorExpr:16(
    CallExpr:16(
      NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
      Args(
        CallExpr:17(
          NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
          Args(
            NameExpr(attention [l])
            IntExpr(0)
            OpExpr:17(
              +
              NameExpr(token_position [l])
              IntExpr(1))))
        CallExpr:18(
          NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
          Args(
            IndexExpr:18(
              CallExpr:18(
                NameExpr(matrix_transpose [tenspiler.llm.python_dsl.matrix_transpose])
                Args(
                  NameExpr(key_cache_layer [l])))
              OpExpr:18(
                +
                OpExpr:18(
                  *
                  NameExpr(head [l])
                  NameExpr(head_size [l]))
                NameExpr(i [l])))
            IntExpr(0)
            OpExpr:18(
              +
              NameExpr(token_position [l])
              IntExpr(1))))))
    NameExpr(i* [l])
    CallExpr:19(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------12th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(attention[:token_position+1],
                                    col_vec(key_cache_layer, head * head_size + i)[:token_position+1]))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:15(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:15(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:15(
              NameExpr(attention [l])
              SliceExpr:15(
                <empty>
                OpExpr:15(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            IndexExpr:16(
              CallExpr:16(
                NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                Args(
                  NameExpr(key_cache_layer [l])
                  OpExpr:16(
                    +
                    OpExpr:16(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l]))))
              SliceExpr:16(
                <empty>
                OpExpr:16(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:17(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------13th PS solution--------

def transformer_part2(token_position: int, head: int, head_size: int, key_cache_layer: List[List[int]], attention: List[int]) -> List[int]:
    return [reduce_sum(vec_elemwise_mul(vec_slice(attention, 0, token_position + 1), vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1))) for i in range(head_size)]

Failed to parse PS solution Unsupported node ListComprehension:6(
  GeneratorExpr:6(
    CallExpr:6(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:6(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:6(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:6(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:6(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:6(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:6(
                      +
                      OpExpr:6(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:6(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:6(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------14th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return matrix_vec_mul(
        matrix_row_slice(key_cache_layer, 0, token_position + 1),
        vec_elemwise_mul(attention[:token_position + 1], [head * head_size + i for i in range(head_size)])
    )

Failed to parse PS solution Unsupported node ListComprehension:16(
  GeneratorExpr:16(
    OpExpr:16(
      +
      OpExpr:16(
        *
        NameExpr(head [l])
        NameExpr(head_size [l]))
      NameExpr(i [l]))
    NameExpr(i* [l])
    CallExpr:16(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------15th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(attention[:token_position + 1],
                                    vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:12(
  GeneratorExpr:12(
    CallExpr:13(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:13(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:13(
              NameExpr(attention [l])
              SliceExpr:13(
                <empty>
                OpExpr:13(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:14(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:14(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:14(
                      +
                      OpExpr:14(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:14(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:15(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------16th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [reduce_sum(vec_elemwise_mul(
        vec_slice(attention, 0, token_position + 1),
        vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)))
            for i in range(head_size)]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:14(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:14(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:15(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:15(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:16(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:16(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:16(
                      +
                      OpExpr:16(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:16(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:17(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------17th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:

    return matrix_vec_mul(
        [attention[: token_position + 1]] * head_size,
        [col_vec(key_cache_layer, head * head_size + i) for i in range(head_size)]
    )

Failed to parse PS solution Unsupported binary operation * on types metalift.ir.List[metalift.ir.List[metalift.ir.Int]] and <class 'metalift.ir.Int'>
------18th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(attention[:token_position + 1],
                                    [key_cache_layer[timestep][head * head_size + i] for timestep in range(token_position + 1)]))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:15(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:15(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:15(
              NameExpr(attention [l])
              SliceExpr:15(
                <empty>
                OpExpr:15(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            ListComprehension:16(
              GeneratorExpr:16(
                IndexExpr:16(
                  IndexExpr:16(
                    NameExpr(key_cache_layer [l])
                    NameExpr(timestep [l]))
                  OpExpr:16(
                    +
                    OpExpr:16(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l])))
                NameExpr(timestep* [l])
                CallExpr:16(
                  NameExpr(range [builtins.range])
                  Args(
                    OpExpr:16(
                      +
                      NameExpr(token_position [l])
                      IntExpr(1))))))))))
    NameExpr(i* [l])
    CallExpr:17(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------19th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum([
            attention[timestep] * key_cache_layer[timestep][head * head_size + i]
            for timestep in range(token_position + 1)
        ])
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:15(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        ListComprehension:15(
          GeneratorExpr:15(
            OpExpr:16(
              *
              IndexExpr:16(
                NameExpr(attention [l])
                NameExpr(timestep [l]))
              IndexExpr:16(
                IndexExpr:16(
                  NameExpr(key_cache_layer [l])
                  NameExpr(timestep [l]))
                OpExpr:16(
                  +
                  OpExpr:16(
                    *
                    NameExpr(head [l])
                    NameExpr(head_size [l]))
                  NameExpr(i [l]))))
            NameExpr(timestep* [l])
            CallExpr:17(
              NameExpr(range [builtins.range])
              Args(
                OpExpr:17(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:19(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------20th PS solution--------

def transformer_part2(token_position: int, head: int, head_size: int,
                      key_cache_layer: List[List[int]], attention: List[int]) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(
            attention[:token_position + 1],
            [key_cache_layer[timestep][head * head_size + i] for timestep in range(token_position + 1)]
        ))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:7(
  GeneratorExpr:7(
    CallExpr:8(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:8(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:9(
              NameExpr(attention [l])
              SliceExpr:9(
                <empty>
                OpExpr:9(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            ListComprehension:10(
              GeneratorExpr:10(
                IndexExpr:10(
                  IndexExpr:10(
                    NameExpr(key_cache_layer [l])
                    NameExpr(timestep [l]))
                  OpExpr:10(
                    +
                    OpExpr:10(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l])))
                NameExpr(timestep* [l])
                CallExpr:10(
                  NameExpr(range [builtins.range])
                  Args(
                    OpExpr:10(
                      +
                      NameExpr(token_position [l])
                      IntExpr(1))))))))))
    NameExpr(i* [l])
    CallExpr:12(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------21th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:

    return [reduce_sum(vec_elemwise_mul(attention[:token_position + 1], vec_slice(key_cache_layer[timestep], head * head_size, (head * head_size) + head_size))) for timestep in range(token_position + 1)]

Failed to parse PS solution Unsupported node ListComprehension:15(
  GeneratorExpr:15(
    CallExpr:15(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:15(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:15(
              NameExpr(attention [l])
              SliceExpr:15(
                <empty>
                OpExpr:15(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:15(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                IndexExpr:15(
                  NameExpr(key_cache_layer [l])
                  NameExpr(timestep [l]))
                OpExpr:15(
                  *
                  NameExpr(head [l])
                  NameExpr(head_size [l]))
                OpExpr:15(
                  +
                  OpExpr:15(
                    *
                    NameExpr(head [l])
                    NameExpr(head_size [l]))
                  NameExpr(head_size [l]))))))))
    NameExpr(timestep* [l])
    CallExpr:15(
      NameExpr(range [builtins.range])
      Args(
        OpExpr:15(
          +
          NameExpr(token_position [l])
          IntExpr(1))))))
------22th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [reduce_sum(vec_elemwise_mul(attention[:token_position+1], col_vec(key_cache_layer, head * head_size + i)[:token_position+1])) for i in range(head_size)]

Failed to parse PS solution Unsupported node ListComprehension:12(
  GeneratorExpr:12(
    CallExpr:12(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:12(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:12(
              NameExpr(attention [l])
              SliceExpr:12(
                <empty>
                OpExpr:12(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            IndexExpr:12(
              CallExpr:12(
                NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                Args(
                  NameExpr(key_cache_layer [l])
                  OpExpr:12(
                    +
                    OpExpr:12(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l]))))
              SliceExpr:12(
                <empty>
                OpExpr:12(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:12(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------23th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(vec_slice(attention, 0, token_position + 1),
                                    vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:15(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:15(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:15(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:15(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:16(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:16(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:16(
                      +
                      OpExpr:16(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:16(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:17(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------24th PS solution--------

def transformer_part2(token_position: int, head: int, head_size: int, key_cache_layer: List[List[int]], attention: List[int]) -> List[int]:
    return [reduce_sum(vec_elemwise_mul(attention[:token_position+1], [key_cache_layer[timestep][head * head_size + i] for timestep in range(token_position+1)])) for i in range(head_size)]

Failed to parse PS solution Unsupported node ListComprehension:6(
  GeneratorExpr:6(
    CallExpr:6(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:6(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:6(
              NameExpr(attention [l])
              SliceExpr:6(
                <empty>
                OpExpr:6(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            ListComprehension:6(
              GeneratorExpr:6(
                IndexExpr:6(
                  IndexExpr:6(
                    NameExpr(key_cache_layer [l])
                    NameExpr(timestep [l]))
                  OpExpr:6(
                    +
                    OpExpr:6(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l])))
                NameExpr(timestep* [l])
                CallExpr:6(
                  NameExpr(range [builtins.range])
                  Args(
                    OpExpr:6(
                      +
                      NameExpr(token_position [l])
                      IntExpr(1))))))))))
    NameExpr(i* [l])
    CallExpr:6(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------25th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(
            vec_slice(attention, 0, token_position + 1),
            vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)
        )) for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:15(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:15(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:16(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:16(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:17(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:17(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:17(
                      +
                      OpExpr:17(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:17(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:18(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------26th PS solution--------

def transformer_part2(token_position: int, head: int, head_size: int, key_cache_layer: List[List[int]], attention: List[int]) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(
            attention[:token_position + 1],
            [key_cache_layer[timestep][head * head_size + i] for timestep in range(token_position + 1)]
        ))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:6(
  GeneratorExpr:6(
    CallExpr:7(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:7(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:8(
              NameExpr(attention [l])
              SliceExpr:8(
                <empty>
                OpExpr:8(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            ListComprehension:9(
              GeneratorExpr:9(
                IndexExpr:9(
                  IndexExpr:9(
                    NameExpr(key_cache_layer [l])
                    NameExpr(timestep [l]))
                  OpExpr:9(
                    +
                    OpExpr:9(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l])))
                NameExpr(timestep* [l])
                CallExpr:9(
                  NameExpr(range [builtins.range])
                  Args(
                    OpExpr:9(
                      +
                      NameExpr(token_position [l])
                      IntExpr(1))))))))))
    NameExpr(i* [l])
    CallExpr:11(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------27th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(
            vec_slice(attention, 0, token_position + 1),
            vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)
        )) for i in range(head_size)
    ]

Skipping duplicate solution

------28th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum([
            attention[timestep] * key_cache_layer[timestep][head * head_size + i]
            for timestep in range(token_position + 1)
        ])
        for i in range(head_size)
    ]

Skipping duplicate solution

------29th PS solution--------

def transformer_part2(token_position: int, head: int, head_size: int, key_cache_layer: List[List[int]], attention: List[int]) -> List[int]:
    return [reduce_sum(vec_elemwise_mul(attention[:token_position + 1], col_vec(matrix_row_slice(key_cache_layer, 0, token_position + 1), head * head_size + i))) for i in range(head_size)]

Failed to parse PS solution Unsupported node ListComprehension:6(
  GeneratorExpr:6(
    CallExpr:6(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:6(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:6(
              NameExpr(attention [l])
              SliceExpr:6(
                <empty>
                OpExpr:6(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:6(
              NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
              Args(
                CallExpr:6(
                  NameExpr(matrix_row_slice [tenspiler.llm.python_dsl.matrix_row_slice])
                  Args(
                    NameExpr(key_cache_layer [l])
                    IntExpr(0)
                    OpExpr:6(
                      +
                      NameExpr(token_position [l])
                      IntExpr(1))))
                OpExpr:6(
                  +
                  OpExpr:6(
                    *
                    NameExpr(head [l])
                    NameExpr(head_size [l]))
                  NameExpr(i [l]))))))))
    NameExpr(i* [l])
    CallExpr:6(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------30th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:

    return [
        reduce_sum(vec_elemwise_mul(attention[:token_position+1], [key_cache_layer[j][head * head_size + i] for j in range(token_position+1)]))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:15(
  GeneratorExpr:15(
    CallExpr:16(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:16(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:16(
              NameExpr(attention [l])
              SliceExpr:16(
                <empty>
                OpExpr:16(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            ListComprehension:16(
              GeneratorExpr:16(
                IndexExpr:16(
                  IndexExpr:16(
                    NameExpr(key_cache_layer [l])
                    NameExpr(j [l]))
                  OpExpr:16(
                    +
                    OpExpr:16(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l])))
                NameExpr(j* [l])
                CallExpr:16(
                  NameExpr(range [builtins.range])
                  Args(
                    OpExpr:16(
                      +
                      NameExpr(token_position [l])
                      IntExpr(1))))))))))
    NameExpr(i* [l])
    CallExpr:17(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------31th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(
            vec_slice(attention, 0, token_position + 1),
            vec_slice(matrix_transpose(key_cache_layer)[head * head_size + i], 0, token_position + 1)
        ))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:15(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:15(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:16(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:16(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:17(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                IndexExpr:17(
                  CallExpr:17(
                    NameExpr(matrix_transpose [tenspiler.llm.python_dsl.matrix_transpose])
                    Args(
                      NameExpr(key_cache_layer [l])))
                  OpExpr:17(
                    +
                    OpExpr:17(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l])))
                IntExpr(0)
                OpExpr:17(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:19(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------32th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(
            attention[:token_position + 1],
            [key_cache_layer[timestep][head * head_size + i] for timestep in range(token_position + 1)]
        ))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:12(
  GeneratorExpr:12(
    CallExpr:13(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:13(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:14(
              NameExpr(attention [l])
              SliceExpr:14(
                <empty>
                OpExpr:14(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            ListComprehension:15(
              GeneratorExpr:15(
                IndexExpr:15(
                  IndexExpr:15(
                    NameExpr(key_cache_layer [l])
                    NameExpr(timestep [l]))
                  OpExpr:15(
                    +
                    OpExpr:15(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l])))
                NameExpr(timestep* [l])
                CallExpr:15(
                  NameExpr(range [builtins.range])
                  Args(
                    OpExpr:15(
                      +
                      NameExpr(token_position [l])
                      IntExpr(1))))))))))
    NameExpr(i* [l])
    CallExpr:17(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------33th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(attention[:token_position + 1], vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:12(
  GeneratorExpr:12(
    CallExpr:13(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:13(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:13(
              NameExpr(attention [l])
              SliceExpr:13(
                <empty>
                OpExpr:13(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:13(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:13(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:13(
                      +
                      OpExpr:13(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:13(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:14(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------34th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(
            vec_elemwise_mul(
                vec_slice(attention, 0, token_position + 1),
                vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)
            )
        )
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:12(
  GeneratorExpr:12(
    CallExpr:13(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:14(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:15(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:15(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:16(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:16(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:16(
                      +
                      OpExpr:16(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:16(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:19(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------35th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    # Extract the required rows and columns from the key_cache_layer
    key_cache_layer_transformed = [col_vec(key_cache_layer, head * head_size + i) for i in range(head_size)]
    key_cache_layer_transformed = matrix_row_slice(key_cache_layer_transformed, 0, token_position + 1)
    # Now perform the matrix vector multiplication
    return matrix_vec_mul(key_cache_layer_transformed, attention[:token_position + 1])

Failed to parse PS solution Only one or two statements supported
------36th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [reduce_sum(vec_elemwise_mul(attention[:token_position+1], [key_cache_layer[timestep][head * head_size + i] for timestep in range(token_position+1)])) for i in range(head_size)]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:14(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:14(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:14(
              NameExpr(attention [l])
              SliceExpr:14(
                <empty>
                OpExpr:14(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            ListComprehension:14(
              GeneratorExpr:14(
                IndexExpr:14(
                  IndexExpr:14(
                    NameExpr(key_cache_layer [l])
                    NameExpr(timestep [l]))
                  OpExpr:14(
                    +
                    OpExpr:14(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l])))
                NameExpr(timestep* [l])
                CallExpr:14(
                  NameExpr(range [builtins.range])
                  Args(
                    OpExpr:14(
                      +
                      NameExpr(token_position [l])
                      IntExpr(1))))))))))
    NameExpr(i* [l])
    CallExpr:14(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------37th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(
            vec_elemwise_mul(
                attention[:token_position + 1],
                col_vec(key_cache_layer, head * head_size + i)[:token_position + 1]
            )
        ) for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:15(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:16(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:17(
              NameExpr(attention [l])
              SliceExpr:17(
                <empty>
                OpExpr:17(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            IndexExpr:18(
              CallExpr:18(
                NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                Args(
                  NameExpr(key_cache_layer [l])
                  OpExpr:18(
                    +
                    OpExpr:18(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l]))))
              SliceExpr:18(
                <empty>
                OpExpr:18(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:20(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------38th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(
            vec_elemwise_mul(
                vec_slice(attention, 0, token_position + 1),
                vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)
            )
        ) for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:12(
  GeneratorExpr:12(
    CallExpr:13(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:14(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:15(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:15(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:16(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:16(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:16(
                      +
                      OpExpr:16(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:16(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:18(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------39th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return matrix_vec_mul(
        [vec_elemwise_mul(vec_slice(attention, 0, token_position + 1),
                          vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1))
         for i in range(head_size)],
        [1] * head_size
    )

Failed to parse PS solution Unsupported node ListComprehension:15(
  GeneratorExpr:15(
    CallExpr:15(
      NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
      Args(
        CallExpr:15(
          NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
          Args(
            NameExpr(attention [l])
            IntExpr(0)
            OpExpr:15(
              +
              NameExpr(token_position [l])
              IntExpr(1))))
        CallExpr:16(
          NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
          Args(
            CallExpr:16(
              NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
              Args(
                NameExpr(key_cache_layer [l])
                OpExpr:16(
                  +
                  OpExpr:16(
                    *
                    NameExpr(head [l])
                    NameExpr(head_size [l]))
                  NameExpr(i [l]))))
            IntExpr(0)
            OpExpr:16(
              +
              NameExpr(token_position [l])
              IntExpr(1))))))
    NameExpr(i* [l])
    CallExpr:17(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------40th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:

    return [
        reduce_sum(vec_elemwise_mul(
            vec_slice(attention, 0, token_position + 1),
            vec_slice(
                col_vec(key_cache_layer, head * head_size + i),
                0,
                token_position + 1
            )
        ))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:15(
  GeneratorExpr:15(
    CallExpr:16(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:16(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:17(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:17(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:18(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:19(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:19(
                      +
                      OpExpr:19(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:21(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:24(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------41th PS solution--------

from typing import Callable, List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:

    return [
        reduce_sum(
            vec_elemwise_mul(
                vec_slice(attention, 0, token_position + 1),
                vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)
            )
        ) for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:15(
  GeneratorExpr:15(
    CallExpr:16(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:17(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:18(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:18(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:19(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:19(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:19(
                      +
                      OpExpr:19(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:19(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:21(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------42th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(
            vec_slice(attention, 0, token_position + 1),
            vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)
        )) for i in range(head_size)
    ]

Skipping duplicate solution

------43th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(
            vec_elemwise_mul(
                vec_slice(attention, 0, token_position + 1),
                vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)
            )
        ) for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:12(
  GeneratorExpr:12(
    CallExpr:13(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:14(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:15(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:15(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:16(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:16(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:16(
                      +
                      OpExpr:16(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:16(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:18(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------44th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(attention[:token_position + 1],
                                    vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:15(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:15(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:15(
              NameExpr(attention [l])
              SliceExpr:15(
                <empty>
                OpExpr:15(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:16(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:16(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:16(
                      +
                      OpExpr:16(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:16(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:17(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------45th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(
            vec_elemwise_mul(
                vec_slice(attention, 0, token_position + 1),
                vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)
            )
        ) for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:15(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:16(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            CallExpr:17(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                NameExpr(attention [l])
                IntExpr(0)
                OpExpr:17(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:18(
              NameExpr(vec_slice [tenspiler.llm.python_dsl.vec_slice])
              Args(
                CallExpr:18(
                  NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
                  Args(
                    NameExpr(key_cache_layer [l])
                    OpExpr:18(
                      +
                      OpExpr:18(
                        *
                        NameExpr(head [l])
                        NameExpr(head_size [l]))
                      NameExpr(i [l]))))
                IntExpr(0)
                OpExpr:18(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))))))
    NameExpr(i* [l])
    CallExpr:20(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------46th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(
            attention[:token_position + 1],
            [key_cache_layer[timestep][head * head_size + i] for timestep in range(token_position + 1)]
        ))
        for i in range(head_size)
    ]

Failed to parse PS solution Unsupported node ListComprehension:12(
  GeneratorExpr:12(
    CallExpr:13(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:13(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:14(
              NameExpr(attention [l])
              SliceExpr:14(
                <empty>
                OpExpr:14(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            ListComprehension:15(
              GeneratorExpr:15(
                IndexExpr:15(
                  IndexExpr:15(
                    NameExpr(key_cache_layer [l])
                    NameExpr(timestep [l]))
                  OpExpr:15(
                    +
                    OpExpr:15(
                      *
                      NameExpr(head [l])
                      NameExpr(head_size [l]))
                    NameExpr(i [l])))
                NameExpr(timestep* [l])
                CallExpr:15(
                  NameExpr(range [builtins.range])
                  Args(
                    OpExpr:15(
                      +
                      NameExpr(token_position [l])
                      IntExpr(1))))))))))
    NameExpr(i* [l])
    CallExpr:17(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------47th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(vec_elemwise_mul(
            attention[:token_position + 1],
            [key_cache_layer[timestep][head * head_size + i] for timestep in range(token_position + 1)]
        ))
        for i in range(head_size)
    ]

Skipping duplicate solution

------48th PS solution--------

from typing import List

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [reduce_sum(vec_elemwise_mul(attention[:token_position + 1],
    col_vec(matrix_row_slice(key_cache_layer, 0, token_position + 1), head * head_size + i))) for i in range(head_size)]

Failed to parse PS solution Unsupported node ListComprehension:14(
  GeneratorExpr:14(
    CallExpr:14(
      NameExpr(reduce_sum [tenspiler.llm.python_dsl.reduce_sum])
      Args(
        CallExpr:14(
          NameExpr(vec_elemwise_mul [tenspiler.llm.python_dsl.vec_elemwise_mul])
          Args(
            IndexExpr:14(
              NameExpr(attention [l])
              SliceExpr:14(
                <empty>
                OpExpr:14(
                  +
                  NameExpr(token_position [l])
                  IntExpr(1))))
            CallExpr:15(
              NameExpr(col_vec [tenspiler.llm.python_dsl.col_vec])
              Args(
                CallExpr:15(
                  NameExpr(matrix_row_slice [tenspiler.llm.python_dsl.matrix_row_slice])
                  Args(
                    NameExpr(key_cache_layer [l])
                    IntExpr(0)
                    OpExpr:15(
                      +
                      NameExpr(token_position [l])
                      IntExpr(1))))
                OpExpr:15(
                  +
                  OpExpr:15(
                    *
                    NameExpr(head [l])
                    NameExpr(head_size [l]))
                  NameExpr(i [l]))))))))
    NameExpr(i* [l])
    CallExpr:15(
      NameExpr(range [builtins.range])
      Args(
        NameExpr(head_size [l])))))
------49th PS solution--------

def transformer_part2(
    token_position: int,
    head: int,
    head_size: int,
    key_cache_layer: List[List[int]],
    attention: List[int]
) -> List[int]:
    return [
        reduce_sum(
            vec_elemwise_mul(
                vec_slice(attention, 0, token_position + 1),
                vec_slice(col_vec(key_cache_layer, head * head_size + i), 0, token_position + 1)
            )
        ) for i in range(head_size)
    ]

Skipping duplicate solution
