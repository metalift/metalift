[
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(active, scalar_matrix_div(32, active), lambda x, y: 32 if x == 0 else y)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition: Callable[[int, int], int] = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(base, active, condition)\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(\n        matrix_scalar_sub(32, base),\n        active,\n        lambda x, y: ite(y == 0, 32, 32 - x // y)\n    )\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(\n        scalar_matrix_div(32, active), \n        matrix_scalar_add(32, matrix_elemwise_sub(base, active)), \n        lambda a, b: ite(a == 32, 32, b)\n    )\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    cond = lambda a, b: a == 0\n    a = 32\n    b = lambda b, c: 32 - (32 - b) // c\n    return matrix_where(active, base, lambda a, b: ite(cond(a, b), a, b(a, b)))\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(\n        matrix_scalar_add(32, matrix_elemwise_div(matrix_scalar_sub(32, base), active)),\n        scalar_matrix_div(32, active),\n        lambda base_pixel, active_pixel: 32 if active_pixel == 0 else base_pixel\n    )\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition = lambda x, y: 32 if y == 0 else 32 - (32 - x) // y\n    return matrix_where(base, active, condition)\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return_var = matrix_where(\n        active,\n        matrix_scalar_div(\n            scalar_vec_sub(\n                32, \n                matrix_elemwise_sub(\n                    scalar_matrix_sub(32, base), \n                    active\n                )\n            ), \n            active\n        ),\n        lambda x, y: 32 if x == 0 else y\n    )\n    return return_var\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(\n        matrix_elemwise_sub(\n            scalar_matrix_sub(\n                32, \n                matrix_scalar_div(\n                    matrix_scalar_sub(\n                        32, \n                        base\n                    ), \n                    active\n                )\n            ), \n            scalar_matrix_div(\n                32, \n                active\n            ), \n            lambda a, b: ite(b == 0, a, 32)\n        )\n    )\n",
    "\nfrom typing import Callable, List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition: Callable[[int, int], int] = lambda x, y: 32 if y == 0 else 32 - (32 - x) // y\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(\n        active,\n        base,\n        lambda active_pixel, base_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    )\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, lambda x, y: 32 if y == 0 else 32 - (32 - x) // y)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(\n        base, \n        active, \n        lambda base, active: 32 if active == 0 else 32 - (32 - base) // active\n    )\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition: Callable[[int, int], int] = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(active, base, condition)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, lambda x, y: 32 if y == 0 else 32 - ((32 - x) // y))\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - ((32 - base_pixel) // active_pixel)\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import Callable, List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition: Callable[[int, int], int] = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - scalar_vec_div((32 - base_pixel), active_pixel)\n    return matrix_where(base, active, condition)\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(base, active, condition)\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(active, base, lambda x, y: 32 if x == 0 else 32 - (32 - y) // x)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(base_pixel: int, active_pixel: int) -> int:\n        return 32 if active_pixel == 0 else 32 - scalar_vec_div(32 - base_pixel, active_pixel)\n\n    return matrix_where(base, active, condition)\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - scalar_vec_div((32 - base_pixel), active_pixel))\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(base_pixel: int, active_pixel: int) -> int:\n        return 32 if active_pixel == 0 else 32 - ((32 - base_pixel) // active_pixel)\n        \n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition: Callable[[int, int], int] = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition = lambda base_pixel, active_pixel: ite(active_pixel == 0, 32, 32 - scalar_vec_div((32 - base_pixel), active_pixel))\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(base_pixel: int, active_pixel: int) -> int:\n        return ite(active_pixel == 0, 32, scalar_vec_sub(32, scalar_vec_div(scalar_vec_sub(32, base_pixel), active_pixel)))\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition: Callable[[int, int], int] = lambda b, a: 32 if a == 0 else 32 - ((32 - b) // a)\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition: Callable[[int, int], int] = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(active, base, condition)\n",
    "\nfrom typing import Callable, List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - ((32 - base_pixel) // active_pixel)\n    return matrix_where(base, active, condition)\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(base_pixel: int, active_pixel: int) -> int:\n        return 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition: Callable[[int, int], int] = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - ((32 - base_pixel) // active_pixel)\n    return matrix_where(base, active, condition)\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition: Callable[[int, int], int] = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(b: int, a: int) -> int:\n        return 32 if a == 0 else 32 - ((32 - b) // a)\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def pixel_condition(base_pixel, active_pixel):\n        return ite(active_pixel == 0, 32, 32 - scalar_vec_div(32 - base_pixel, active_pixel))\n    return matrix_where(base, active, pixel_condition)\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(base_pixel: int, active_pixel: int) -> int:\n        return 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def pixel_condition(base_pixel, active_pixel):\n        return 32 if active_pixel == 0 else 32 - scalar_vec_div(32 - base_pixel, active_pixel)\n    return matrix_where(base, active, pixel_condition)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(base_pixel: int, active_pixel: int) -> int:\n        return 32 if active_pixel == 0 else 32 - ((32 - base_pixel) // active_pixel)\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(base_pixel: int, active_pixel: int) -> int:\n        return 32 if active_pixel == 0 else 32 - ((32 - base_pixel) // active_pixel)\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(base_pixel: int, active_pixel: int) -> int:\n        if active_pixel == 0:\n            return 32\n        else:\n            return scalar_vec_sub(32, scalar_vec_div(scalar_vec_sub(32, base_pixel), active_pixel))\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(base_pixel: int, active_pixel: int) -> int:\n        if active_pixel == 0:\n            return 32\n        else:\n            return scalar_vec_sub(32, scalar_vec_div(scalar_vec_sub(32, base_pixel), active_pixel))\n\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(base_pixel: int, active_pixel: int) -> int:\n        if active_pixel == 0:\n            return 32\n        else:\n            return 32 - (32 - base_pixel) // active_pixel\n\n    return matrix_where(base, active, condition)\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    def condition(base_pixel: int, active_pixel: int) -> int:\n        return 32 if active_pixel == 0 else 32 - (32 - base_pixel) // active_pixel\n    return matrix_where(base, active, condition)\n",
    "\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(base, active, lambda b, a: ite(a == 0, 32, 32 - (32 - b) // a))\n",
    "\nfrom typing import List, Callable\n\ndef color_burn_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    condition: Callable[[int, int], int] = lambda base_pixel, active_pixel: 32 if active_pixel == 0 else 32 - ((32 - base_pixel) // active_pixel)\n    return matrix_where(base, active, condition)\n"
]
