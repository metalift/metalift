["\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_scalar_sub(5, matrix_elemwise_sub(matrix_row_slice(ex, 0, nx), matrix_elemwise_sub(matrix_col_slice(hz, 1, ny), matrix_col_slice(hz, 0, ny - 1))))\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        ex, \n        matrix_scalar_mul(\n            5, \n            matrix_elemwise_sub(\n                hz, \n                matrix_col_slice(hz, 0, ny)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        ex, \n        matrix_scalar_mul(\n            5, \n            matrix_elemwise_sub(\n                hz, \n                matrix_col_slice(hz, 0, ny-1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(ex, matrix_scalar_mul(5, matrix_elemwise_sub(matrix_col_slice(hz, 0, ny), matrix_col_slice(hz, 1, ny))))\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    def calc_diff(i: int, j: int): \n        return ex[i][j] - 5 * (hz[i][j] - hz[i][j - 1])\n    def condition(i: int, j: int): \n        return j >= 1\n    return matrix_where(ex, hz, calc_diff) if condition else ex\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        ex, \n        matrix_scalar_mul(\n            5, \n            matrix_elemwise_sub(\n                hz, \n                matrix_row_slice(hz, 0, ny-1)\n            )\n        )\n    )\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(ex, matrix_scalar_mul(5, matrix_elemwise_sub(matrix_col_slice(hz, 0, ny), matrix_col_slice(hz, 1, ny))))\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(\n    nx: int,\n    ny: int,\n    ex: List[List[int]],\n    hz: List[List[int]]\n) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        ex, \n        matrix_scalar_mul(\n            5, \n            matrix_elemwise_sub(\n                hz, \n                matrix_col_slice(hz, 0, ny-1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_scalar_sub(\n        5,\n        matrix_elemwise_sub(\n            matrix_row_slice(ex, 0, nx),\n            vec_elemwise_sub(\n                matrix_col_slice(hz, 1, ny),\n                matrix_col_slice(hz, 0, ny-1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        ex,\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                hz,\n                matrix_col_slice(hz, 0, ny - 1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n            matrix_row_slice(ex, 0, nx),\n            matrix_scalar_mul(\n                5,\n                matrix_elemwise_sub(\n                    matrix_col_slice(hz, 1, ny),\n                    matrix_col_slice(hz, 0, ny - 1)\n                )\n            )\n        )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_row_slice(matrix_elemwise_sub(ex, matrix_scalar_mul(5, matrix_elemwise_sub(matrix_col_slice(hz, 1, ny), matrix_col_slice(hz, 0, ny - 1)))), 0, nx)\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_scalar_sub(\n        5,\n        matrix_elemwise_sub(\n            matrix_row_slice(ex, 0, nx),\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 1, ny),\n                matrix_col_slice(hz, 0, ny-1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5, matrix_elemwise_sub(\n                matrix_row_slice(hz, 0, nx),\n                matrix_row_slice(matrix_col_slice(hz, 0, ny-1), 0, nx)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(\n    nx: int,\n    ny: int,\n    ex: List[List[int]],\n    hz: List[List[int]]\n) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 1, ny),\n                matrix_col_slice(hz, 0, ny - 1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        ex,\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_row_slice(hz, 0, nx),\n                matrix_row_slice(matrix_col_slice(hz, 0, ny-1), 0, nx)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 1, ny),\n                matrix_col_slice(hz, 0, ny - 1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 1, ny),\n                matrix_col_slice(hz, 0, ny-1)\n            )\n        )\n    )\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(ex,\n                               matrix_scalar_mul(5,\n                                                 matrix_elemwise_sub(matrix_row_slice(hz, 0, nx),\n                                                                     matrix_row_slice(matrix_col_slice(hz, 0, ny - 1), 0, nx))))\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 1, ny),\n                matrix_col_slice(hz, 0, ny - 1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    hz_sliced_1 = matrix_col_slice(hz, 1, ny)\n    hz_sliced_2 = matrix_col_slice(hz, 0, ny - 1)\n    hz_subtracted = matrix_elemwise_sub(hz_sliced_1, hz_sliced_2)\n    hz_multiplied = matrix_scalar_mul(5, hz_subtracted)\n    ex_sliced = matrix_row_slice(ex, 0, nx)\n    return matrix_elemwise_sub(ex_sliced, hz_multiplied)\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 1, ny),\n                matrix_col_slice(hz, 0, ny - 1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 1, ny),\n                matrix_col_slice(hz, 0, ny - 1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 1, ny),\n                matrix_col_slice(hz, 0, ny-1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(ex, matrix_scalar_mul(5, matrix_elemwise_sub(matrix_row_slice(hz, 0, nx), matrix_row_slice(matrix_col_slice(hz, 0, ny-1), 0, nx))))\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 1, ny),\n                matrix_col_slice(hz, 0, ny-1)\n            )\n        )\n    )\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_row_slice(hz, 0, nx),\n                matrix_row_slice(matrix_col_slice(hz, 0, ny-1), 0, nx)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_row_slice(hz, 0, nx),\n                matrix_col_slice(matrix_row_slice(hz, 0, nx), 0, ny-1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    def subtract_hz_from_ex(i: int, j: int): \n        return ex[i][j] - 5 * (hz[i][j] - hz[i][j - 1]) if j > 0 else ex[i][j]\n    \n    return [[subtract_hz_from_ex(i, j) for j in range(ny)] for i in range(nx)]\n", "\nfrom typing import List, Tuple\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    def element_sub(i: int, j: int) -> int:\n        return ex[i][j] - 5 * (hz[i][j] - hz[i][j - 1]) if j != 0 else ex[i][j]\n\n    return matrix_where(ex, hz, element_sub)\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    sliced_hz_left = matrix_col_slice(hz, 0, ny - 1)\n    sliced_hz_right = matrix_col_slice(hz, 1, ny)\n    diff_hz = matrix_elemwise_sub(sliced_hz_right, sliced_hz_left)\n    diff_hz_scaled = matrix_scalar_mul(5, diff_hz)\n    ex_sliced = matrix_col_slice(ex, 1, ny)\n    result = matrix_elemwise_sub(ex_sliced, diff_hz_scaled)\n    return result\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    hz_sliced_1 = matrix_col_slice(hz, 1, ny)\n    hz_sliced_2 = matrix_col_slice(hz, 0, ny - 1)\n    hz_subtracted = matrix_elemwise_sub(hz_sliced_1, hz_sliced_2)\n    hz_multiplied = matrix_scalar_mul(5, hz_subtracted)\n    ex_sliced = matrix_row_slice(ex, 0, nx)\n    return matrix_elemwise_sub(ex_sliced, hz_multiplied)\n", "\nfrom typing import List\n\ndef matrix_slice_sub_and_scalar_mul(\n    a: int, matrix1: List[List[int]], matrix2: List[List[int]],\n) -> List[List[int]]:\n    return matrix_scalar_sub(a, matrix_elemwise_sub(matrix1, matrix2))\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_slice_sub_and_scalar_mul(\n        5,\n        matrix_col_slice(ex, 0, ny),\n        matrix_elemwise_sub(\n            matrix_col_slice(hz, 0, ny),\n            matrix_col_slice(hz, 0, ny - 1)\n        )\n    )\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 0, ny),\n                matrix_col_slice(hz, 0, ny - 1)\n            )\n        )\n    )\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_row_slice(ex, 0, nx), matrix_scalar_mul(5, matrix_elemwise_sub(matrix_col_slice(hz, 1, ny), matrix_col_slice(hz, 0, ny-1))))\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    hz_sliced_1 = matrix_col_slice(hz, 0, ny - 1)\n    hz_sliced_2 = matrix_col_slice(hz, 1, ny)\n    hz_diff = matrix_elemwise_sub(hz_sliced_2, hz_sliced_1)\n    hz_scaled = matrix_scalar_mul(5, hz_diff)\n    return matrix_elemwise_sub(ex, hz_scaled)\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_row_slice(ex, 0, nx),\n                               matrix_scalar_mul(5, \n                                                 matrix_elemwise_sub(matrix_col_slice(hz, 1, ny), \n                                                                     matrix_col_slice(hz, 0, ny - 1))))\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    hz_sliced_1 = matrix_col_slice(hz, 0, ny - 1)\n    hz_sliced_2 = matrix_col_slice(hz, 1, ny)\n    hz_subtracted = matrix_elemwise_sub(hz_sliced_2, hz_sliced_1)\n    hz_scaled = matrix_scalar_mul(5, hz_subtracted) \n    return matrix_elemwise_sub(ex, hz_scaled)\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_row_slice(ex, 0, nx), matrix_scalar_mul(5, matrix_elemwise_sub(matrix_col_slice(hz, 1, ny), matrix_col_slice(hz, 0, ny-1))))\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    # Create a new matrix with the same dimensions as \"ex\"\n    result_matrix = [list(row) for row in ex]\n    \n    # For each row in the matrix...\n    for i in range(nx):\n        # For each element in the row, starting from the second element...\n        for j in range(1, ny):\n            # Subtract 5 times the difference between the current and previous element in \"hz\"\n            result_matrix[i][j] = vec_scalar_sub(5 * (hz[i][j] - hz[i][j - 1]), ex[i][j])\n    \n    return result_matrix\n", "\nfrom typing import List, Callable\n\ndef fdtd_2d_part2(\n    nx: int,\n    ny: int,\n    ex: List[List[int]],\n    hz: List[List[int]]\n) -> List[List[int]]:\n    \n    # Create a helper function to perform the calculation on each element\n    def calculate_element(i: int, j: int) -> int:\n        return ex[i][j] - 5 * (hz[i][j] - hz[i][j - 1]) if j > 0 else ex[i][j]\n    \n    # Use matrix_where function to apply the calculate_element function on each element\n    return matrix_where(ex, hz, calculate_element)\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    # Slice the matrices to get the required parts\n    ex_sliced = matrix_row_slice(ex, 0, nx)\n    hz_sliced_1 = matrix_col_slice(hz, 0, ny - 1)\n    hz_sliced_2 = matrix_col_slice(hz, 1, ny)\n\n    # Subtract corresponding elements of the sliced hz matrices\n    hz_sub = matrix_elemwise_sub(hz_sliced_2, hz_sliced_1)\n\n    # Multiply the result by 5\n    hz_sub_scaled = matrix_scalar_mul(5, hz_sub)\n\n    # Subtract the result from the corresponding elements of the sliced ex matrix\n    result = matrix_elemwise_sub(ex_sliced, hz_sub_scaled)\n\n    return result\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(ex, matrix_scalar_mul(5, matrix_elemwise_sub(matrix_col_slice(hz, 0, ny), matrix_col_slice(hz, 0, ny - 1))))\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_where(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 0, ny),\n                matrix_col_slice(hz, 0, ny - 1)\n            )\n        ),\n        lambda x,y: x-y\n    )\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    ex_sliced = matrix_col_slice(ex, 0, ny)\n    hz_sliced_1 = matrix_col_slice(hz, 0, ny-1)\n    hz_sliced_2 = matrix_col_slice(hz, 1, ny)\n    hz_diff = matrix_elemwise_sub(hz_sliced_2, hz_sliced_1)\n    hz_diff_scaled = matrix_scalar_mul(5, hz_diff)\n    return matrix_elemwise_sub(ex_sliced, hz_diff_scaled)\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n\n    return matrix_elemwise_sub(ex, matrix_scalar_mul(5, matrix_elemwise_sub(matrix_col_slice(hz, 1, ny), matrix_col_slice(hz, 0, ny-1))))\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5,\n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 0, ny),\n                matrix_col_slice(hz, 0, ny - 1)\n            )\n        )\n    )\n", "\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(matrix_row_slice(ex, 0, nx), matrix_scalar_mul(5, matrix_elemwise_sub(matrix_col_slice(hz, 1, ny), matrix_col_slice(hz, 0, ny-1))))\n", "\nfrom typing import List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    hz_sliced_1 = matrix_col_slice(hz, 1, ny)\n    hz_sliced_2 = matrix_col_slice(hz, 0, ny - 1)\n    hz_subtracted = matrix_elemwise_sub(hz_sliced_1, hz_sliced_2)\n    hz_multiplied = matrix_scalar_mul(5, hz_subtracted)\n    ex_sliced = matrix_col_slice(ex, 1, ny)\n    return matrix_elemwise_sub(ex_sliced, hz_multiplied)\n", "\nfrom typing import Callable, List\n\ndef fdtd_2d_part2(nx: int, ny: int, ex: List[List[int]], hz: List[List[int]]) -> List[List[int]]:\n    return matrix_elemwise_sub(\n        matrix_row_slice(ex, 0, nx),\n        matrix_scalar_mul(\n            5, \n            matrix_elemwise_sub(\n                matrix_col_slice(hz, 0, ny), \n                matrix_col_slice(hz, 0, ny - 1)\n            )\n        )\n    )\n"]
