{
    "overlay_blend_8": "\nfrom typing import List\n\n\ndef ite(cond: bool, if_then: Any, if_else: Any) -> Any:\n    return if_then if cond else if_else\n\n\ndef vec_scalar_mul(a: int, x: List[int]) -> List[int]:\n    return [] if len(x) < 1 else [a * x[0], *vec_scalar_mul(a, x[1:])]\n\n\ndef vec_scalar_div(a: int, x: List[int]) -> List[int]:\n    return [] if len(x) < 1 else [x[0] // a, *vec_scalar_div(a, x[1:])]\n\n\ndef vec_elemwise_sub(x: List[int], y: List[int]) -> List[int]:\n    return [] if len(x) < 1 or not len(x) == len(y) else [x[0] - y[0], *vec_elemwise_sub(x[1:], y[1:])]\n\n\ndef vec_elemwise_add(x: List[int], y: List[int]) -> List[int]:\n    return [] if len(x) < 1 or not len(x) == len(y) else [x[0] + y[0], *vec_elemwise_add(x[1:], y[1:])]\n\n\ndef vec_elemwise_mul(x: List[int], y: List[int]) -> List[int]:\n    return [] if len(x) < 1 or not len(x) == len(y) else [x[0] * y[0], *vec_elemwise_mul(x[1:], y[1:])]\n\n\ndef matrix_elemwise_add(matrix_x: List[List[int]], matrix_y: List[List[int]]) -> List[List[int]]:\n    return [] if len(matrix_x) < 1 or not len(matrix_x) == len(matrix_y) else [vec_elemwise_add(matrix_x[0], matrix_y[0]), *matrix_elemwise_add(matrix_x[1:], matrix_y[1:])]\n\n\ndef matrix_where(matrix_x: List[List[int]], matrix_y: List[List[int]], select_two_args_arg: Callable[[int, int], int]) -> List[List[int]]:\n    return [] if len(matrix_x) < 1 or not len(matrix_x) == len(matrix_y) else [selection_two_args(matrix_x[0], matrix_y[0], select_two_args_arg), *matrix_where(matrix_x[1:], matrix_y[1:], select_two_args_arg)]\n\n\ndef selection_two_args(x: List[int], y: List[int], select_two_args_arg: Callable[[int, int], int]) -> List[int]:\n    return [] if len(x) < 1 or not len(x) == len(y) else [select_two_args_arg(x[0], y[0]), *selection_two_args(x[1:], y[1:], select_two_args_arg)]\n\n\ndef overlay_blend_8(base: List[List[int]], active: List[List[int]]) -> List[List[int]]:\n    return matrix_where(\n        matrix_elemwise_mul(vec_scalar_mul(2, base), base),\n        matrix_elemwise_sub(\n            vec_scalar_add(\n                -255,\n                vec_scalar_mul(\n                    2,\n                    vec_scalar_div(\n                        255,\n                        vec_elemwise_mul(base, base),\n                    ),\n                ),\n            ),\n            vec_scalar_add(\n                -255,\n                vec_scalar_mul(\n                    2,\n                    vec_scalar_div(\n                        255,\n                        vec_elemwise_mul(base, base),\n                    ),\n                ),\n            ),\n        ),\n        lambda x, y: ite(x >= 128, y, vec_scalar_div(255, vec_elemwise_mul(base, base))[0]),\n    )\n"
}
